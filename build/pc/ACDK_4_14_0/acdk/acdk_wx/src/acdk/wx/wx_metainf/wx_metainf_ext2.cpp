// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DropSource_create_array(int length)
{
  return new ObjectArrayImpl<RDropSource>(length);
}

//static
::acdk::lang::RObject
DropSource_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DropSource_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_DropSource_INLRWindow__LRDropSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropSource((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_DropSource__LRDropSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropSource();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_DropSource_INLRDataObject_INLRWindow__LRDropSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropSource((RDataObject)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_DropSource_INLRDataObject__LRDropSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropSource((RDataObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DropSource::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_doDragDrop_I_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropSource* This = dmi_cast<DropSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->DropSource::doDragDrop(args[0].getIntVar());
    else
      ret = (DragResult)This->doDragDrop(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_doDragDrop__LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropSource* This = dmi_cast<DropSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->DropSource::doDragDrop();
    else
      ret = (DragResult)This->doDragDrop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropSource_method_giveFeedback_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropSource* This = dmi_cast<DropSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DropSource::giveFeedback((DragResult)args[0].getIntVar());
    else
      ret = This->giveFeedback((DragResult)args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DropSource_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_DropSource_INLRWindow__LRDropSource__arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_DropSource_INLRWindow__LRDropSource__args[] = 
{
  &DropSource_methods_DropSource_INLRWindow__LRDropSource__arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_DropSource_INLRWindow__LRDropSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_DropSource_INLRWindow__LRDropSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DropSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropSource::clazzInfo(), // return type
  "_0_DropSource", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_DropSource_INLRWindow__LRDropSource__args, // the arguments
  0, //arguments count
  DropSource_methods_DropSource_INLRWindow__LRDropSource__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_DropSource_INLRWindow__LRDropSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_DropSource__LRDropSource__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_DropSource__LRDropSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_DropSource__LRDropSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DropSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropSource::clazzInfo(), // return type
  "_1_DropSource", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_DropSource__LRDropSource__args, // the arguments
  0, //arguments count
  DropSource_methods_DropSource__LRDropSource__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_DropSource__LRDropSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__args[] = 
{
  &DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__arg_data,
  &DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_DropSource_INLRDataObject_INLRWindow__LRDropSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DropSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropSource::clazzInfo(), // return type
  "_2_DropSource", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__args, // the arguments
  0, //arguments count
  DropSource_methods_DropSource_INLRDataObject_INLRWindow__LRDropSource__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_DropSource_INLRDataObject_INLRWindow__LRDropSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_DropSource_INLRDataObject__LRDropSource__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_DropSource_INLRDataObject__LRDropSource__args[] = 
{
  &DropSource_methods_DropSource_INLRDataObject__LRDropSource__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_DropSource_INLRDataObject__LRDropSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_DropSource_INLRDataObject__LRDropSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DropSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropSource::clazzInfo(), // return type
  "_3_DropSource", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_DropSource_INLRDataObject__LRDropSource__args, // the arguments
  0, //arguments count
  DropSource_methods_DropSource_INLRDataObject__LRDropSource__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_DropSource_INLRDataObject__LRDropSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DropSource_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_doDragDrop_I_LDragResult__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_doDragDrop_I_LDragResult__args[] = 
{
  &DropSource_methods_doDragDrop_I_LDragResult__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_doDragDrop_I_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_doDragDrop_I_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doDragDrop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_doDragDrop", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_doDragDrop_I_LDragResult__args, // the arguments
  0, //arguments count
  DropSource_methods_doDragDrop_I_LDragResult__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_doDragDrop_I_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_doDragDrop__LDragResult__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_doDragDrop__LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_doDragDrop__LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "doDragDrop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_doDragDrop", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_doDragDrop__LDragResult__args, // the arguments
  0, //arguments count
  DropSource_methods_doDragDrop__LDragResult__exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_doDragDrop__LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropSource_methods_giveFeedback_I_Z_arg_effect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "effect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropSource_methods_giveFeedback_I_Z_args[] = 
{
  &DropSource_methods_giveFeedback_I_Z_arg_effect,
  0
};

::acdk::lang::dmi::ClazzInfo* DropSource_methods_giveFeedback_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropSource_method_giveFeedback_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "giveFeedback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_giveFeedback", // alternative name of method
  -1, // altlabelHashCode
  DropSource_methods_giveFeedback_I_Z_args, // the arguments
  0, //arguments count
  DropSource_methods_giveFeedback_I_Z_exceptions, // the declared exceptions
  DropSource_MetainfoWrapper::DropSource_method_giveFeedback_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DropSource_methods[] = 
{
  &DropSource_method_DropSource_INLRWindow__LRDropSource_,
  &DropSource_method_DropSource__LRDropSource_,
  &DropSource_method_DropSource_INLRDataObject_INLRWindow__LRDropSource_,
  &DropSource_method_DropSource_INLRDataObject__LRDropSource_,
  &DropSource_method_GetClass__L_acdk_lang_RClass_,
  &DropSource_method_doDragDrop_I_LDragResult_,
  &DropSource_method_doDragDrop__LDragResult_,
  &DropSource_method_giveFeedback_I_Z,
  0
};


struct DropSource_MetaInfoInitializer
{  DropSource_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DropSource::clazzInfo();
    ci->fields =  _DropSource_fields;
    ci->methods =  _DropSource_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DropSource_MetaInfoInitializer DropSource_MetaInfoInitializer_staticinstance__;


struct DropSource_clazzInfo_ClazzAttributesResInitializer3
{
  DropSource_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropSource_method_doDragDrop_I_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropSource_method_doDragDrop__LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropSource_methods_giveFeedback_I_Z_arg_effect, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
  }
};

DropSource_clazzInfo_ClazzAttributesResInitializer3 DropSource_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DropTarget_create_array(int length)
{
  return new ObjectArrayImpl<RDropTarget>(length);
}

//static
::acdk::lang::RObject
DropTarget_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DropTarget_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_DropTarget_INLRDataObject__LRDropTarget__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropTarget((RDataObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_DropTarget__LRDropTarget__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DropTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DropTarget::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_getData__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DropTarget::getData();
    else
      ret = This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_onData_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->DropTarget::onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_onDragOver_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->DropTarget::onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_onDrop_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DropTarget::onDrop(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->onDrop(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_onEnter_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->DropTarget::onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_onLeave__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DropTarget::onLeave();
    else
        This->onLeave();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DropTarget_method_setDataObject_INLRDataObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DropTarget* This = dmi_cast<DropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DropTarget::setDataObject((RDataObject)args[0].getObjectVar());
    else
        This->setDataObject((RDataObject)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DropTarget_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__arg_dataObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__args[] = 
{
  &DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__arg_dataObject,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_DropTarget_INLRDataObject__LRDropTarget_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropTarget::clazzInfo(), // return type
  "_0_DropTarget", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__args, // the arguments
  0, //arguments count
  DropTarget_methods_DropTarget_INLRDataObject__LRDropTarget__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_DropTarget_INLRDataObject__LRDropTarget__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_DropTarget__LRDropTarget__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_DropTarget__LRDropTarget__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_DropTarget__LRDropTarget_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DropTarget::clazzInfo(), // return type
  "_1_DropTarget", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_DropTarget__LRDropTarget__args, // the arguments
  0, //arguments count
  DropTarget_methods_DropTarget__LRDropTarget__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_DropTarget__LRDropTarget__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_getData__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_getData__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_getData__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getData", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_getData__Z_args, // the arguments
  0, //arguments count
  DropTarget_methods_getData__Z_exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_getData__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onData_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onData_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onData_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_onData_III_LDragResult__args[] = 
{
  &DropTarget_methods_onData_III_LDragResult__arg_x,
  &DropTarget_methods_onData_III_LDragResult__arg_y,
  &DropTarget_methods_onData_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_onData_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_onData_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_onData", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_onData_III_LDragResult__args, // the arguments
  0, //arguments count
  DropTarget_methods_onData_III_LDragResult__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_onData_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onDragOver_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onDragOver_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onDragOver_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_onDragOver_III_LDragResult__args[] = 
{
  &DropTarget_methods_onDragOver_III_LDragResult__arg_x,
  &DropTarget_methods_onDragOver_III_LDragResult__arg_y,
  &DropTarget_methods_onDragOver_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_onDragOver_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_onDragOver_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDragOver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_onDragOver", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_onDragOver_III_LDragResult__args, // the arguments
  0, //arguments count
  DropTarget_methods_onDragOver_III_LDragResult__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_onDragOver_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onDrop_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onDrop_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_onDrop_II_Z_args[] = 
{
  &DropTarget_methods_onDrop_II_Z_arg_x,
  &DropTarget_methods_onDrop_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_onDrop_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_onDrop_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDrop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_onDrop", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_onDrop_II_Z_args, // the arguments
  0, //arguments count
  DropTarget_methods_onDrop_II_Z_exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_onDrop_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onEnter_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onEnter_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_onEnter_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_onEnter_III_LDragResult__args[] = 
{
  &DropTarget_methods_onEnter_III_LDragResult__arg_x,
  &DropTarget_methods_onEnter_III_LDragResult__arg_y,
  &DropTarget_methods_onEnter_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_onEnter_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_onEnter_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onEnter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_onEnter", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_onEnter_III_LDragResult__args, // the arguments
  0, //arguments count
  DropTarget_methods_onEnter_III_LDragResult__exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_onEnter_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_onLeave__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_onLeave__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_onLeave__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onLeave", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_onLeave", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_onLeave__V_args, // the arguments
  0, //arguments count
  DropTarget_methods_onLeave__V_exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_onLeave__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DropTarget_methods_setDataObject_INLRDataObject__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DropTarget_methods_setDataObject_INLRDataObject__V_args[] = 
{
  &DropTarget_methods_setDataObject_INLRDataObject__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* DropTarget_methods_setDataObject_INLRDataObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DropTarget_method_setDataObject_INLRDataObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setDataObject", // alternative name of method
  -1, // altlabelHashCode
  DropTarget_methods_setDataObject_INLRDataObject__V_args, // the arguments
  0, //arguments count
  DropTarget_methods_setDataObject_INLRDataObject__V_exceptions, // the declared exceptions
  DropTarget_MetainfoWrapper::DropTarget_method_setDataObject_INLRDataObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DropTarget_methods[] = 
{
  &DropTarget_method_DropTarget_INLRDataObject__LRDropTarget_,
  &DropTarget_method_DropTarget__LRDropTarget_,
  &DropTarget_method_GetClass__L_acdk_lang_RClass_,
  &DropTarget_method_getData__Z,
  &DropTarget_method_onData_III_LDragResult_,
  &DropTarget_method_onDragOver_III_LDragResult_,
  &DropTarget_method_onDrop_II_Z,
  &DropTarget_method_onEnter_III_LDragResult_,
  &DropTarget_method_onLeave__V,
  &DropTarget_method_setDataObject_INLRDataObject__V,
  0
};


struct DropTarget_MetaInfoInitializer
{  DropTarget_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DropTarget::clazzInfo();
    ci->fields =  _DropTarget_fields;
    ci->methods =  _DropTarget_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DropTarget_MetaInfoInitializer DropTarget_MetaInfoInitializer_staticinstance__;


struct DropTarget_clazzInfo_ClazzAttributesResInitializer4
{
  DropTarget_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_methods_onEnter_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_method_onEnter_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_methods_onDragOver_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_method_onDragOver_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_methods_onData_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DropTarget_method_onData_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
  }
};

DropTarget_clazzInfo_ClazzAttributesResInitializer4 DropTarget_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Event_create_array(int length)
{
  return new ObjectArrayImpl<REvent>(length);
}

//static
::acdk::lang::RObject
Event_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Event_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Event::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_getEventObject__LRWxObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Event::getEventObject();
    else
        ret = (::acdk::lang::RObject)This->getEventObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_getEventType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Event::getEventType();
    else
      ret = This->getEventType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_getId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Event::getId();
    else
      ret = This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_getSkipped__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Event::getSkipped();
    else
      ret = This->getSkipped();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_getTimestamp__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Event::getTimestamp();
    else
      ret = This->getTimestamp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_isCommandEvent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Event::isCommandEvent();
    else
      ret = This->isCommandEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_setEventObject_INLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::setEventObject((RWxObject)args[0].getObjectVar());
    else
        This->setEventObject((RWxObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_setEventType_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::setEventType(args[0].getIntVar());
    else
        This->setEventType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_setId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::setId(args[0].getIntVar());
    else
        This->setId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_setTimestamp_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::setTimestamp(args[0].getIntVar());
    else
        This->setTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_setTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::setTimestamp();
    else
        This->setTimestamp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_skip_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::skip(args[0].getBoolVar());
    else
        This->skip(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Event_method_skip__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Event* This = dmi_cast<Event>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Event::skip();
    else
        This->skip();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Event_fields_EvtNull_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Event::EvtNull, flags);
    else
      Event::EvtNull = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Event_fields_EvtNull = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNull", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Event_MetainfoWrapper::Event_fields_EvtNull_accessor, // read/write access to this fields
  (void*)&Event::EvtNull // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Event_fields[] = 
{
  &Event_fields_EvtNull,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Event_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_getEventObject__LRWxObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_getEventObject__LRWxObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_getEventObject__LRWxObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEventObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo(), // return type
  "_2_getEventObject", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_getEventObject__LRWxObject__args, // the arguments
  0, //arguments count
  Event_methods_getEventObject__LRWxObject__exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_getEventObject__LRWxObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_getEventType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_getEventType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_getEventType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEventType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getEventType", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_getEventType__I_args, // the arguments
  0, //arguments count
  Event_methods_getEventType__I_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_getEventType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_getId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_getId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_getId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getId", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_getId__I_args, // the arguments
  0, //arguments count
  Event_methods_getId__I_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_getId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_getSkipped__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_getSkipped__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_getSkipped__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSkipped", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_getSkipped", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_getSkipped__Z_args, // the arguments
  0, //arguments count
  Event_methods_getSkipped__Z_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_getSkipped__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_getTimestamp__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_getTimestamp__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_getTimestamp__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_getTimestamp__I_args, // the arguments
  0, //arguments count
  Event_methods_getTimestamp__I_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_getTimestamp__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_isCommandEvent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_isCommandEvent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_isCommandEvent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCommandEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isCommandEvent", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_isCommandEvent__Z_args, // the arguments
  0, //arguments count
  Event_methods_isCommandEvent__Z_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_isCommandEvent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Event_methods_setEventObject_INLRWxObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_setEventObject_INLRWxObject__V_args[] = 
{
  &Event_methods_setEventObject_INLRWxObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_setEventObject_INLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_setEventObject_INLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEventObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setEventObject", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_setEventObject_INLRWxObject__V_args, // the arguments
  0, //arguments count
  Event_methods_setEventObject_INLRWxObject__V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_setEventObject_INLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Event_methods_setEventType_I_V_arg_typ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "typ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_setEventType_I_V_args[] = 
{
  &Event_methods_setEventType_I_V_arg_typ,
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_setEventType_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_setEventType_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEventType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setEventType", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_setEventType_I_V_args, // the arguments
  0, //arguments count
  Event_methods_setEventType_I_V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_setEventType_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Event_methods_setId_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_setId_I_V_args[] = 
{
  &Event_methods_setId_I_V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_setId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_setId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setId", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_setId_I_V_args, // the arguments
  0, //arguments count
  Event_methods_setId_I_V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_setId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Event_methods_setTimestamp_I_V_arg_ts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_setTimestamp_I_V_args[] = 
{
  &Event_methods_setTimestamp_I_V_arg_ts,
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_setTimestamp_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_setTimestamp_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_setTimestamp_I_V_args, // the arguments
  0, //arguments count
  Event_methods_setTimestamp_I_V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_setTimestamp_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_setTimestamp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_setTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_setTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_setTimestamp__V_args, // the arguments
  0, //arguments count
  Event_methods_setTimestamp__V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_setTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Event_methods_skip_Z_V_arg_doskip = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "doskip", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_skip_Z_V_args[] = 
{
  &Event_methods_skip_Z_V_arg_doskip,
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_skip_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_skip_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_skip", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_skip_Z_V_args, // the arguments
  0, //arguments count
  Event_methods_skip_Z_V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_skip_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Event_methods_skip__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Event_methods_skip__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Event_method_skip__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_skip", // alternative name of method
  -1, // altlabelHashCode
  Event_methods_skip__V_args, // the arguments
  0, //arguments count
  Event_methods_skip__V_exceptions, // the declared exceptions
  Event_MetainfoWrapper::Event_method_skip__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Event_methods[] = 
{
  &Event_method_GetClass__L_acdk_lang_RClass_,
  &Event_method_getEventObject__LRWxObject_,
  &Event_method_getEventType__I,
  &Event_method_getId__I,
  &Event_method_getSkipped__Z,
  &Event_method_getTimestamp__I,
  &Event_method_isCommandEvent__Z,
  &Event_method_setEventObject_INLRWxObject__V,
  &Event_method_setEventType_I_V,
  &Event_method_setId_I_V,
  &Event_method_setTimestamp_I_V,
  &Event_method_setTimestamp__V,
  &Event_method_skip_Z_V,
  &Event_method_skip__V,
  0
};


struct Event_MetaInfoInitializer
{  Event_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Event::clazzInfo();
    ci->fields =  _Event_fields;
    ci->methods =  _Event_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Event_MetaInfoInitializer Event_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
CloseEvent_create_array(int length)
{
  return new ObjectArrayImpl<RCloseEvent>(length);
}

//static
::acdk::lang::RObject
CloseEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CloseEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CloseEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_canVeto__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CloseEvent::canVeto();
    else
      ret = This->canVeto();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_getLoggingOff__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CloseEvent::getLoggingOff();
    else
      ret = This->getLoggingOff();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_setCanVeto_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CloseEvent::setCanVeto(args[0].getBoolVar());
    else
        This->setCanVeto(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_setLoggingOff_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CloseEvent::setLoggingOff(args[0].getBoolVar());
    else
        This->setLoggingOff(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_veto_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CloseEvent::veto(args[0].getBoolVar());
    else
        This->veto(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloseEvent_method_veto__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CloseEvent* This = dmi_cast<CloseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CloseEvent::veto();
    else
        This->veto();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CloseEvent_fields_EvtCloseWindow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CloseEvent::EvtCloseWindow, flags);
    else
      CloseEvent::EvtCloseWindow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CloseEvent_fields_EvtEndSession_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CloseEvent::EvtEndSession, flags);
    else
      CloseEvent::EvtEndSession = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CloseEvent_fields_EvtQueryEndSession_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CloseEvent::EvtQueryEndSession, flags);
    else
      CloseEvent::EvtQueryEndSession = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CloseEvent_fields_EvtCloseWindow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCloseWindow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CloseEvent_MetainfoWrapper::CloseEvent_fields_EvtCloseWindow_accessor, // read/write access to this fields
  (void*)&CloseEvent::EvtCloseWindow // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CloseEvent_fields_EvtEndSession = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtEndSession", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CloseEvent_MetainfoWrapper::CloseEvent_fields_EvtEndSession_accessor, // read/write access to this fields
  (void*)&CloseEvent::EvtEndSession // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CloseEvent_fields_EvtQueryEndSession = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtQueryEndSession", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CloseEvent_MetainfoWrapper::CloseEvent_fields_EvtQueryEndSession_accessor, // read/write access to this fields
  (void*)&CloseEvent::EvtQueryEndSession // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CloseEvent_fields[] = 
{
  &CloseEvent_fields_EvtCloseWindow,
  &CloseEvent_fields_EvtEndSession,
  &CloseEvent_fields_EvtQueryEndSession,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CloseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_canVeto__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_canVeto__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_canVeto__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canVeto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_canVeto", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_canVeto__Z_args, // the arguments
  0, //arguments count
  CloseEvent_methods_canVeto__Z_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_canVeto__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_getLoggingOff__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_getLoggingOff__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_getLoggingOff__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLoggingOff", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getLoggingOff", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_getLoggingOff__Z_args, // the arguments
  0, //arguments count
  CloseEvent_methods_getLoggingOff__Z_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_getLoggingOff__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CloseEvent_methods_setCanVeto_Z_V_arg_canVeto = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "canVeto", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_setCanVeto_Z_V_args[] = 
{
  &CloseEvent_methods_setCanVeto_Z_V_arg_canVeto,
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_setCanVeto_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_setCanVeto_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCanVeto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setCanVeto", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_setCanVeto_Z_V_args, // the arguments
  0, //arguments count
  CloseEvent_methods_setCanVeto_Z_V_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_setCanVeto_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CloseEvent_methods_setLoggingOff_Z_V_arg_loggingOff = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "loggingOff", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_setLoggingOff_Z_V_args[] = 
{
  &CloseEvent_methods_setLoggingOff_Z_V_arg_loggingOff,
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_setLoggingOff_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_setLoggingOff_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLoggingOff", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setLoggingOff", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_setLoggingOff_Z_V_args, // the arguments
  0, //arguments count
  CloseEvent_methods_setLoggingOff_Z_V_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_setLoggingOff_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CloseEvent_methods_veto_Z_V_arg_veto = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "veto", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_veto_Z_V_args[] = 
{
  &CloseEvent_methods_veto_Z_V_arg_veto,
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_veto_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_veto_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "veto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_veto", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_veto_Z_V_args, // the arguments
  0, //arguments count
  CloseEvent_methods_veto_Z_V_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_veto_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloseEvent_methods_veto__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloseEvent_methods_veto__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloseEvent_method_veto__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "veto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_veto", // alternative name of method
  -1, // altlabelHashCode
  CloseEvent_methods_veto__V_args, // the arguments
  0, //arguments count
  CloseEvent_methods_veto__V_exceptions, // the declared exceptions
  CloseEvent_MetainfoWrapper::CloseEvent_method_veto__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CloseEvent_methods[] = 
{
  &CloseEvent_method_GetClass__L_acdk_lang_RClass_,
  &CloseEvent_method_canVeto__Z,
  &CloseEvent_method_getLoggingOff__Z,
  &CloseEvent_method_setCanVeto_Z_V,
  &CloseEvent_method_setLoggingOff_Z_V,
  &CloseEvent_method_veto_Z_V,
  &CloseEvent_method_veto__V,
  0
};


struct CloseEvent_MetaInfoInitializer
{  CloseEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CloseEvent::clazzInfo();
    ci->fields =  _CloseEvent_fields;
    ci->methods =  _CloseEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CloseEvent_MetaInfoInitializer CloseEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MoveEvent_create_array(int length)
{
  return new ObjectArrayImpl<RMoveEvent>(length);
}

//static
::acdk::lang::RObject
MoveEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MoveEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MoveEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MoveEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MoveEvent_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MoveEvent* This = dmi_cast<MoveEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MoveEvent::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MoveEvent_fields_EvtMove_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MoveEvent::EvtMove, flags);
    else
      MoveEvent::EvtMove = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo MoveEvent_fields_EvtMove = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMove", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MoveEvent_MetainfoWrapper::MoveEvent_fields_EvtMove_accessor, // read/write access to this fields
  (void*)&MoveEvent::EvtMove // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _MoveEvent_fields[] = 
{
  &MoveEvent_fields_EvtMove,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MoveEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MoveEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MoveEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MoveEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MoveEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MoveEvent_MetainfoWrapper::MoveEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MoveEvent_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MoveEvent_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MoveEvent_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_0_getPosition", // alternative name of method
  -1, // altlabelHashCode
  MoveEvent_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  MoveEvent_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  MoveEvent_MetainfoWrapper::MoveEvent_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MoveEvent_methods[] = 
{
  &MoveEvent_method_GetClass__L_acdk_lang_RClass_,
  &MoveEvent_method_getPosition__LRPoint_,
  0
};


struct MoveEvent_MetaInfoInitializer
{  MoveEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MoveEvent::clazzInfo();
    ci->fields =  _MoveEvent_fields;
    ci->methods =  _MoveEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MoveEvent_MetaInfoInitializer MoveEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
SizeEvent_create_array(int length)
{
  return new ObjectArrayImpl<RSizeEvent>(length);
}

//static
::acdk::lang::RObject
SizeEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SizeEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SizeEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SizeEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SizeEvent_method_getSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SizeEvent* This = dmi_cast<SizeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SizeEvent::getSize();
    else
        ret = (::acdk::lang::RObject)This->getSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SizeEvent_fields_EvtSize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(SizeEvent::EvtSize, flags);
    else
      SizeEvent::EvtSize = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SizeEvent_fields_EvtSize = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SizeEvent_MetainfoWrapper::SizeEvent_fields_EvtSize_accessor, // read/write access to this fields
  (void*)&SizeEvent::EvtSize // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SizeEvent_fields[] = 
{
  &SizeEvent_fields_EvtSize,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SizeEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SizeEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SizeEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SizeEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SizeEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SizeEvent_MetainfoWrapper::SizeEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SizeEvent_methods_getSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SizeEvent_methods_getSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SizeEvent_method_getSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_0_getSize", // alternative name of method
  -1, // altlabelHashCode
  SizeEvent_methods_getSize__LRSize__args, // the arguments
  0, //arguments count
  SizeEvent_methods_getSize__LRSize__exceptions, // the declared exceptions
  SizeEvent_MetainfoWrapper::SizeEvent_method_getSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SizeEvent_methods[] = 
{
  &SizeEvent_method_GetClass__L_acdk_lang_RClass_,
  &SizeEvent_method_getSize__LRSize_,
  0
};


struct SizeEvent_MetaInfoInitializer
{  SizeEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SizeEvent::clazzInfo();
    ci->fields =  _SizeEvent_fields;
    ci->methods =  _SizeEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SizeEvent_MetaInfoInitializer SizeEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
CommandEvent_create_array(int length)
{
  return new ObjectArrayImpl<RCommandEvent>(length);
}

//static
::acdk::lang::RObject
CommandEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CommandEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_CommandEvent_II_LRCommandEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CommandEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_CommandEvent__LRCommandEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CommandEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_CommandEvent_I_LRCommandEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CommandEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CommandEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_getExtraLong__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandEvent::getExtraLong();
    else
      ret = This->getExtraLong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_getInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandEvent::getInt();
    else
      ret = This->getInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandEvent::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_getString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CommandEvent::getString();
    else
        ret = (::acdk::lang::RObject)This->getString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_isChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandEvent::isChecked();
    else
      ret = This->isChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_isSelection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandEvent::isSelection();
    else
      ret = This->isSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_setExtraLong_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CommandEvent::setExtraLong(args[0].getIntVar());
    else
        This->setExtraLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_setInt_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CommandEvent::setInt(args[0].getIntVar());
    else
        This->setInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandEvent_method_setString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandEvent* This = dmi_cast<CommandEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CommandEvent::setString((RString)args[0].getObjectVar());
    else
        This->setString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandButtonClicked_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandButtonClicked, flags);
    else
      CommandEvent::EvtCommandButtonClicked = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandCheckboxClicked_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandCheckboxClicked, flags);
    else
      CommandEvent::EvtCommandCheckboxClicked = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandChecklistboxToggled_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandChecklistboxToggled, flags);
    else
      CommandEvent::EvtCommandChecklistboxToggled = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandChoiceSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandChoiceSelected, flags);
    else
      CommandEvent::EvtCommandChoiceSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandComboboxSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandComboboxSelected, flags);
    else
      CommandEvent::EvtCommandComboboxSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandEnter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandEnter, flags);
    else
      CommandEvent::EvtCommandEnter = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandKillFocus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandKillFocus, flags);
    else
      CommandEvent::EvtCommandKillFocus = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandLeftClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandLeftClick, flags);
    else
      CommandEvent::EvtCommandLeftClick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandLeftDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandLeftDclick, flags);
    else
      CommandEvent::EvtCommandLeftDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandListboxDoubleclicked_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandListboxDoubleclicked, flags);
    else
      CommandEvent::EvtCommandListboxDoubleclicked = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandListboxSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandListboxSelected, flags);
    else
      CommandEvent::EvtCommandListboxSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandMenuSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandMenuSelected, flags);
    else
      CommandEvent::EvtCommandMenuSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandRadioboxSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandRadioboxSelected, flags);
    else
      CommandEvent::EvtCommandRadioboxSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandRadiobuttonSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandRadiobuttonSelected, flags);
    else
      CommandEvent::EvtCommandRadiobuttonSelected = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandRightClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandRightClick, flags);
    else
      CommandEvent::EvtCommandRightClick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandRightDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandRightDclick, flags);
    else
      CommandEvent::EvtCommandRightDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandScrollbarUpdated_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandScrollbarUpdated, flags);
    else
      CommandEvent::EvtCommandScrollbarUpdated = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandSetFocus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandSetFocus, flags);
    else
      CommandEvent::EvtCommandSetFocus = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandSliderUpdated_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandSliderUpdated, flags);
    else
      CommandEvent::EvtCommandSliderUpdated = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandSpinctrlUpdated_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandSpinctrlUpdated, flags);
    else
      CommandEvent::EvtCommandSpinctrlUpdated = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandTextUpdated_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandTextUpdated, flags);
    else
      CommandEvent::EvtCommandTextUpdated = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandToggleButtonClicked_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandToggleButtonClicked, flags);
    else
      CommandEvent::EvtCommandToggleButtonClicked = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandToolEnter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandToolEnter, flags);
    else
      CommandEvent::EvtCommandToolEnter = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandToolRclicked_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandToolRclicked, flags);
    else
      CommandEvent::EvtCommandToolRclicked = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandEvent_fields_EvtCommandVlboxSelected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CommandEvent::EvtCommandVlboxSelected, flags);
    else
      CommandEvent::EvtCommandVlboxSelected = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandButtonClicked = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandButtonClicked", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandButtonClicked_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandButtonClicked // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandCheckboxClicked = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandCheckboxClicked", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandCheckboxClicked_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandCheckboxClicked // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandChecklistboxToggled = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandChecklistboxToggled", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandChecklistboxToggled_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandChecklistboxToggled // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandChoiceSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandChoiceSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandChoiceSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandChoiceSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandComboboxSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandComboboxSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandComboboxSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandComboboxSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandEnter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandEnter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandEnter_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandEnter // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandKillFocus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandKillFocus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandKillFocus_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandKillFocus // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandLeftClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandLeftClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandLeftClick_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandLeftClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandLeftDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandLeftDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandLeftDclick_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandLeftDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandListboxDoubleclicked = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandListboxDoubleclicked", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandListboxDoubleclicked_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandListboxDoubleclicked // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandListboxSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandListboxSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandListboxSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandListboxSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandMenuSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandMenuSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandMenuSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandMenuSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandRadioboxSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandRadioboxSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandRadioboxSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandRadioboxSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandRadiobuttonSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandRadiobuttonSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandRadiobuttonSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandRadiobuttonSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandRightClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandRightClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandRightClick_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandRightClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandRightDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandRightDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandRightDclick_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandRightDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandScrollbarUpdated = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandScrollbarUpdated", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandScrollbarUpdated_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandScrollbarUpdated // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandSetFocus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandSetFocus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandSetFocus_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandSetFocus // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandSliderUpdated = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandSliderUpdated", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandSliderUpdated_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandSliderUpdated // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandSpinctrlUpdated = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandSpinctrlUpdated", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandSpinctrlUpdated_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandSpinctrlUpdated // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandTextUpdated = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTextUpdated", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandTextUpdated_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandTextUpdated // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandToggleButtonClicked = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandToggleButtonClicked", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandToggleButtonClicked_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandToggleButtonClicked // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandToolEnter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandToolEnter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandToolEnter_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandToolEnter // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandToolRclicked = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandToolRclicked", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandToolRclicked_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandToolRclicked // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandEvent_fields_EvtCommandVlboxSelected = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandVlboxSelected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CommandEvent_MetainfoWrapper::CommandEvent_fields_EvtCommandVlboxSelected_accessor, // read/write access to this fields
  (void*)&CommandEvent::EvtCommandVlboxSelected // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CommandEvent_fields[] = 
{
  &CommandEvent_fields_EvtCommandButtonClicked,
  &CommandEvent_fields_EvtCommandCheckboxClicked,
  &CommandEvent_fields_EvtCommandChecklistboxToggled,
  &CommandEvent_fields_EvtCommandChoiceSelected,
  &CommandEvent_fields_EvtCommandComboboxSelected,
  &CommandEvent_fields_EvtCommandEnter,
  &CommandEvent_fields_EvtCommandKillFocus,
  &CommandEvent_fields_EvtCommandLeftClick,
  &CommandEvent_fields_EvtCommandLeftDclick,
  &CommandEvent_fields_EvtCommandListboxDoubleclicked,
  &CommandEvent_fields_EvtCommandListboxSelected,
  &CommandEvent_fields_EvtCommandMenuSelected,
  &CommandEvent_fields_EvtCommandRadioboxSelected,
  &CommandEvent_fields_EvtCommandRadiobuttonSelected,
  &CommandEvent_fields_EvtCommandRightClick,
  &CommandEvent_fields_EvtCommandRightDclick,
  &CommandEvent_fields_EvtCommandScrollbarUpdated,
  &CommandEvent_fields_EvtCommandSetFocus,
  &CommandEvent_fields_EvtCommandSliderUpdated,
  &CommandEvent_fields_EvtCommandSpinctrlUpdated,
  &CommandEvent_fields_EvtCommandTextUpdated,
  &CommandEvent_fields_EvtCommandToggleButtonClicked,
  &CommandEvent_fields_EvtCommandToolEnter,
  &CommandEvent_fields_EvtCommandToolRclicked,
  &CommandEvent_fields_EvtCommandVlboxSelected,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_CommandEvent_II_LRCommandEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_CommandEvent_II_LRCommandEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_CommandEvent_II_LRCommandEvent__args[] = 
{
  &CommandEvent_methods_CommandEvent_II_LRCommandEvent__arg_commandType,
  &CommandEvent_methods_CommandEvent_II_LRCommandEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_CommandEvent_II_LRCommandEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_CommandEvent_II_LRCommandEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CommandEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CommandEvent::clazzInfo(), // return type
  "_0_CommandEvent", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_CommandEvent_II_LRCommandEvent__args, // the arguments
  0, //arguments count
  CommandEvent_methods_CommandEvent_II_LRCommandEvent__exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_CommandEvent_II_LRCommandEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_CommandEvent__LRCommandEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_CommandEvent__LRCommandEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_CommandEvent__LRCommandEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CommandEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CommandEvent::clazzInfo(), // return type
  "_1_CommandEvent", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_CommandEvent__LRCommandEvent__args, // the arguments
  0, //arguments count
  CommandEvent_methods_CommandEvent__LRCommandEvent__exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_CommandEvent__LRCommandEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_CommandEvent_I_LRCommandEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_CommandEvent_I_LRCommandEvent__args[] = 
{
  &CommandEvent_methods_CommandEvent_I_LRCommandEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_CommandEvent_I_LRCommandEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_CommandEvent_I_LRCommandEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CommandEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CommandEvent::clazzInfo(), // return type
  "_2_CommandEvent", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_CommandEvent_I_LRCommandEvent__args, // the arguments
  0, //arguments count
  CommandEvent_methods_CommandEvent_I_LRCommandEvent__exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_CommandEvent_I_LRCommandEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CommandEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_getExtraLong__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_getExtraLong__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_getExtraLong__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtraLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getExtraLong", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_getExtraLong__I_args, // the arguments
  0, //arguments count
  CommandEvent_methods_getExtraLong__I_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_getExtraLong__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_getInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_getInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_getInt__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getInt", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_getInt__I_args, // the arguments
  0, //arguments count
  CommandEvent_methods_getInt__I_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_getInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getSelection", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_getSelection__I_args, // the arguments
  0, //arguments count
  CommandEvent_methods_getSelection__I_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_getString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_getString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_getString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getString", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_getString__LRString__args, // the arguments
  0, //arguments count
  CommandEvent_methods_getString__LRString__exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_getString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_isChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_isChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_isChecked__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isChecked", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_isChecked__Z_args, // the arguments
  0, //arguments count
  CommandEvent_methods_isChecked__Z_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_isChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_isSelection__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_isSelection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_isSelection__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isSelection", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_isSelection__Z_args, // the arguments
  0, //arguments count
  CommandEvent_methods_isSelection__Z_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_isSelection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_setExtraLong_I_V_arg_extraLong = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "extraLong", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_setExtraLong_I_V_args[] = 
{
  &CommandEvent_methods_setExtraLong_I_V_arg_extraLong,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_setExtraLong_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_setExtraLong_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setExtraLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setExtraLong", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_setExtraLong_I_V_args, // the arguments
  0, //arguments count
  CommandEvent_methods_setExtraLong_I_V_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_setExtraLong_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_setInt_I_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_setInt_I_V_args[] = 
{
  &CommandEvent_methods_setInt_I_V_arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_setInt_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_setInt_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setInt", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_setInt_I_V_args, // the arguments
  0, //arguments count
  CommandEvent_methods_setInt_I_V_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_setInt_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandEvent_methods_setString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandEvent_methods_setString_INLRString__V_args[] = 
{
  &CommandEvent_methods_setString_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandEvent_methods_setString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandEvent_method_setString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setString", // alternative name of method
  -1, // altlabelHashCode
  CommandEvent_methods_setString_INLRString__V_args, // the arguments
  0, //arguments count
  CommandEvent_methods_setString_INLRString__V_exceptions, // the declared exceptions
  CommandEvent_MetainfoWrapper::CommandEvent_method_setString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CommandEvent_methods[] = 
{
  &CommandEvent_method_CommandEvent_II_LRCommandEvent_,
  &CommandEvent_method_CommandEvent__LRCommandEvent_,
  &CommandEvent_method_CommandEvent_I_LRCommandEvent_,
  &CommandEvent_method_GetClass__L_acdk_lang_RClass_,
  &CommandEvent_method_getExtraLong__I,
  &CommandEvent_method_getInt__I,
  &CommandEvent_method_getSelection__I,
  &CommandEvent_method_getString__LRString_,
  &CommandEvent_method_isChecked__Z,
  &CommandEvent_method_isSelection__Z,
  &CommandEvent_method_setExtraLong_I_V,
  &CommandEvent_method_setInt_I_V,
  &CommandEvent_method_setString_INLRString__V,
  0
};


struct CommandEvent_MetaInfoInitializer
{  CommandEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CommandEvent::clazzInfo();
    ci->fields =  _CommandEvent_fields;
    ci->methods =  _CommandEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CommandEvent_MetaInfoInitializer CommandEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ActivateEvent_create_array(int length)
{
  return new ObjectArrayImpl<RActivateEvent>(length);
}

//static
::acdk::lang::RObject
ActivateEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ActivateEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_ActivateEvent_IZI_LRActivateEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ActivateEvent(args[0].getIntVar(), args[1].getBoolVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_ActivateEvent__LRActivateEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ActivateEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_ActivateEvent_I_LRActivateEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ActivateEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_ActivateEvent_IZ_LRActivateEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ActivateEvent(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ActivateEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ActivateEvent_method_getActive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ActivateEvent* This = dmi_cast<ActivateEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ActivateEvent::getActive();
    else
      ret = This->getActive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ActivateEvent_fields_EvtActivate_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ActivateEvent::EvtActivate, flags);
    else
      ActivateEvent::EvtActivate = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ActivateEvent_fields_EvtActivateApp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ActivateEvent::EvtActivateApp, flags);
    else
      ActivateEvent::EvtActivateApp = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ActivateEvent_fields_EvtActivate = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtActivate", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ActivateEvent_MetainfoWrapper::ActivateEvent_fields_EvtActivate_accessor, // read/write access to this fields
  (void*)&ActivateEvent::EvtActivate // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ActivateEvent_fields_EvtActivateApp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtActivateApp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ActivateEvent_MetainfoWrapper::ActivateEvent_fields_EvtActivateApp_accessor, // read/write access to this fields
  (void*)&ActivateEvent::EvtActivateApp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ActivateEvent_fields[] = 
{
  &ActivateEvent_fields_EvtActivate,
  &ActivateEvent_fields_EvtActivateApp,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_active = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "active", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__args[] = 
{
  &ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_commandType,
  &ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_active,
  &ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_ActivateEvent_IZI_LRActivateEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ActivateEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ActivateEvent::clazzInfo(), // return type
  "_0_ActivateEvent", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__args, // the arguments
  0, //arguments count
  ActivateEvent_methods_ActivateEvent_IZI_LRActivateEvent__exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_ActivateEvent_IZI_LRActivateEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_ActivateEvent__LRActivateEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_ActivateEvent__LRActivateEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_ActivateEvent__LRActivateEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ActivateEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ActivateEvent::clazzInfo(), // return type
  "_1_ActivateEvent", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_ActivateEvent__LRActivateEvent__args, // the arguments
  0, //arguments count
  ActivateEvent_methods_ActivateEvent__LRActivateEvent__exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_ActivateEvent__LRActivateEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__args[] = 
{
  &ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_ActivateEvent_I_LRActivateEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ActivateEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ActivateEvent::clazzInfo(), // return type
  "_2_ActivateEvent", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__args, // the arguments
  0, //arguments count
  ActivateEvent_methods_ActivateEvent_I_LRActivateEvent__exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_ActivateEvent_I_LRActivateEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__arg_active = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "active", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__args[] = 
{
  &ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__arg_commandType,
  &ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__arg_active,
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_ActivateEvent_IZ_LRActivateEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ActivateEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ActivateEvent::clazzInfo(), // return type
  "_3_ActivateEvent", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__args, // the arguments
  0, //arguments count
  ActivateEvent_methods_ActivateEvent_IZ_LRActivateEvent__exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_ActivateEvent_IZ_LRActivateEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ActivateEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ActivateEvent_methods_getActive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ActivateEvent_methods_getActive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ActivateEvent_method_getActive__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_getActive", // alternative name of method
  -1, // altlabelHashCode
  ActivateEvent_methods_getActive__Z_args, // the arguments
  0, //arguments count
  ActivateEvent_methods_getActive__Z_exceptions, // the declared exceptions
  ActivateEvent_MetainfoWrapper::ActivateEvent_method_getActive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ActivateEvent_methods[] = 
{
  &ActivateEvent_method_ActivateEvent_IZI_LRActivateEvent_,
  &ActivateEvent_method_ActivateEvent__LRActivateEvent_,
  &ActivateEvent_method_ActivateEvent_I_LRActivateEvent_,
  &ActivateEvent_method_ActivateEvent_IZ_LRActivateEvent_,
  &ActivateEvent_method_GetClass__L_acdk_lang_RClass_,
  &ActivateEvent_method_getActive__Z,
  0
};


struct ActivateEvent_MetaInfoInitializer
{  ActivateEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ActivateEvent::clazzInfo();
    ci->fields =  _ActivateEvent_fields;
    ci->methods =  _ActivateEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ActivateEvent_MetaInfoInitializer ActivateEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
NotifyEvent_create_array(int length)
{
  return new ObjectArrayImpl<RNotifyEvent>(length);
}

//static
::acdk::lang::RObject
NotifyEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NotifyEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NotifyEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_NotifyEvent_II_LRNotifyEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotifyEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_NotifyEvent__LRNotifyEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotifyEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_NotifyEvent_I_LRNotifyEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotifyEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_allow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotifyEvent* This = dmi_cast<NotifyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NotifyEvent::allow();
    else
        This->allow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotifyEvent* This = dmi_cast<NotifyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NotifyEvent::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_isAllowed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotifyEvent* This = dmi_cast<NotifyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NotifyEvent::isAllowed();
    else
      ret = This->isAllowed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotifyEvent_method_veto__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotifyEvent* This = dmi_cast<NotifyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NotifyEvent::veto();
    else
        This->veto();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NotifyEvent_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NotifyEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__args[] = 
{
  &NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__arg_commandType,
  &NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_NotifyEvent_II_LRNotifyEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotifyEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotifyEvent::clazzInfo(), // return type
  "_0_NotifyEvent", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__args, // the arguments
  0, //arguments count
  NotifyEvent_methods_NotifyEvent_II_LRNotifyEvent__exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_NotifyEvent_II_LRNotifyEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_NotifyEvent__LRNotifyEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_NotifyEvent__LRNotifyEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_NotifyEvent__LRNotifyEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotifyEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotifyEvent::clazzInfo(), // return type
  "_1_NotifyEvent", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_NotifyEvent__LRNotifyEvent__args, // the arguments
  0, //arguments count
  NotifyEvent_methods_NotifyEvent__LRNotifyEvent__exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_NotifyEvent__LRNotifyEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__args[] = 
{
  &NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_NotifyEvent_I_LRNotifyEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotifyEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotifyEvent::clazzInfo(), // return type
  "_2_NotifyEvent", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__args, // the arguments
  0, //arguments count
  NotifyEvent_methods_NotifyEvent_I_LRNotifyEvent__exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_NotifyEvent_I_LRNotifyEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_allow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_allow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_allow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_allow", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_allow__V_args, // the arguments
  0, //arguments count
  NotifyEvent_methods_allow__V_exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_allow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_clone", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  NotifyEvent_methods_clone__LRObject__exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_isAllowed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_isAllowed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_isAllowed__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAllowed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isAllowed", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_isAllowed__Z_args, // the arguments
  0, //arguments count
  NotifyEvent_methods_isAllowed__Z_exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_isAllowed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotifyEvent_methods_veto__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyEvent_methods_veto__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotifyEvent_method_veto__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "veto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_veto", // alternative name of method
  -1, // altlabelHashCode
  NotifyEvent_methods_veto__V_args, // the arguments
  0, //arguments count
  NotifyEvent_methods_veto__V_exceptions, // the declared exceptions
  NotifyEvent_MetainfoWrapper::NotifyEvent_method_veto__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NotifyEvent_methods[] = 
{
  &NotifyEvent_method_GetClass__L_acdk_lang_RClass_,
  &NotifyEvent_method_NotifyEvent_II_LRNotifyEvent_,
  &NotifyEvent_method_NotifyEvent__LRNotifyEvent_,
  &NotifyEvent_method_NotifyEvent_I_LRNotifyEvent_,
  &NotifyEvent_method_allow__V,
  &NotifyEvent_method_clone__LRObject_,
  &NotifyEvent_method_isAllowed__Z,
  &NotifyEvent_method_veto__V,
  0
};


struct NotifyEvent_MetaInfoInitializer
{  NotifyEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NotifyEvent::clazzInfo();
    ci->fields =  _NotifyEvent_fields;
    ci->methods =  _NotifyEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NotifyEvent_MetaInfoInitializer NotifyEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ScrollEvent_create_array(int length)
{
  return new ObjectArrayImpl<RScrollEvent>(length);
}

//static
::acdk::lang::RObject
ScrollEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScrollEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScrollEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_ScrollEvent_IIII_LRScrollEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollEvent(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_ScrollEvent__LRScrollEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_ScrollEvent_I_LRScrollEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_ScrollEvent_II_LRScrollEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_ScrollEvent_III_LRScrollEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollEvent(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollEvent* This = dmi_cast<ScrollEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScrollEvent::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_getOrientation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollEvent* This = dmi_cast<ScrollEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrollEvent::getOrientation();
    else
      ret = This->getOrientation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_getPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollEvent* This = dmi_cast<ScrollEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrollEvent::getPosition();
    else
      ret = This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_setOrientation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollEvent* This = dmi_cast<ScrollEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrollEvent::setOrientation(args[0].getIntVar());
    else
        This->setOrientation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollEvent_method_setPosition_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollEvent* This = dmi_cast<ScrollEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrollEvent::setPosition(args[0].getIntVar());
    else
        This->setPosition(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollBottom_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollBottom, flags);
    else
      ScrollEvent::EvtScrollBottom = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollEndscroll_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollEndscroll, flags);
    else
      ScrollEvent::EvtScrollEndscroll = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollLinedown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollLinedown, flags);
    else
      ScrollEvent::EvtScrollLinedown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollLineup_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollLineup, flags);
    else
      ScrollEvent::EvtScrollLineup = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollPagedown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollPagedown, flags);
    else
      ScrollEvent::EvtScrollPagedown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollPageup_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollPageup, flags);
    else
      ScrollEvent::EvtScrollPageup = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollThumbrelease_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollThumbrelease, flags);
    else
      ScrollEvent::EvtScrollThumbrelease = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollThumbtrack_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollThumbtrack, flags);
    else
      ScrollEvent::EvtScrollThumbtrack = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollEvent_fields_EvtScrollTop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollEvent::EvtScrollTop, flags);
    else
      ScrollEvent::EvtScrollTop = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollBottom = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollBottom", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollBottom_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollBottom // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollEndscroll = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollEndscroll", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollEndscroll_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollEndscroll // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollLinedown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollLinedown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollLinedown_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollLinedown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollLineup = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollLineup", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollLineup_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollLineup // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollPagedown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollPagedown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollPagedown_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollPagedown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollPageup = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollPageup", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollPageup_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollPageup // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollThumbrelease = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollThumbrelease", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollThumbrelease_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollThumbrelease // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollThumbtrack = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollThumbtrack", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollThumbtrack_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollThumbtrack // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollEvent_fields_EvtScrollTop = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollTop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollEvent_MetainfoWrapper::ScrollEvent_fields_EvtScrollTop_accessor, // read/write access to this fields
  (void*)&ScrollEvent::EvtScrollTop // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ScrollEvent_fields[] = 
{
  &ScrollEvent_fields_EvtScrollBottom,
  &ScrollEvent_fields_EvtScrollEndscroll,
  &ScrollEvent_fields_EvtScrollLinedown,
  &ScrollEvent_fields_EvtScrollLineup,
  &ScrollEvent_fields_EvtScrollPagedown,
  &ScrollEvent_fields_EvtScrollPageup,
  &ScrollEvent_fields_EvtScrollThumbrelease,
  &ScrollEvent_fields_EvtScrollThumbtrack,
  &ScrollEvent_fields_EvtScrollTop,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__args[] = 
{
  &ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_commandType,
  &ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_id,
  &ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_pos,
  &ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_ScrollEvent_IIII_LRScrollEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollEvent::clazzInfo(), // return type
  "_0_ScrollEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_ScrollEvent_IIII_LRScrollEvent__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_ScrollEvent_IIII_LRScrollEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_ScrollEvent__LRScrollEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_ScrollEvent__LRScrollEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_ScrollEvent__LRScrollEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollEvent::clazzInfo(), // return type
  "_1_ScrollEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_ScrollEvent__LRScrollEvent__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_ScrollEvent__LRScrollEvent__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_ScrollEvent__LRScrollEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__args[] = 
{
  &ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_ScrollEvent_I_LRScrollEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollEvent::clazzInfo(), // return type
  "_2_ScrollEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_ScrollEvent_I_LRScrollEvent__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_ScrollEvent_I_LRScrollEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__args[] = 
{
  &ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__arg_commandType,
  &ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_ScrollEvent_II_LRScrollEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollEvent::clazzInfo(), // return type
  "_3_ScrollEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_ScrollEvent_II_LRScrollEvent__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_ScrollEvent_II_LRScrollEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__args[] = 
{
  &ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_commandType,
  &ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_id,
  &ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_ScrollEvent_III_LRScrollEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollEvent::clazzInfo(), // return type
  "_4_ScrollEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_ScrollEvent_III_LRScrollEvent__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_ScrollEvent_III_LRScrollEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_clone", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ScrollEvent_methods_clone__LRObject__exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_getOrientation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_getOrientation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_getOrientation__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getOrientation", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_getOrientation__I_args, // the arguments
  0, //arguments count
  ScrollEvent_methods_getOrientation__I_exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_getOrientation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_getPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_getPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_getPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_getPosition__I_args, // the arguments
  0, //arguments count
  ScrollEvent_methods_getPosition__I_exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_getPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_setOrientation_I_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_setOrientation_I_V_args[] = 
{
  &ScrollEvent_methods_setOrientation_I_V_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_setOrientation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_setOrientation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setOrientation", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_setOrientation_I_V_args, // the arguments
  0, //arguments count
  ScrollEvent_methods_setOrientation_I_V_exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_setOrientation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollEvent_methods_setPosition_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollEvent_methods_setPosition_I_V_args[] = 
{
  &ScrollEvent_methods_setPosition_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollEvent_methods_setPosition_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollEvent_method_setPosition_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrollEvent_methods_setPosition_I_V_args, // the arguments
  0, //arguments count
  ScrollEvent_methods_setPosition_I_V_exceptions, // the declared exceptions
  ScrollEvent_MetainfoWrapper::ScrollEvent_method_setPosition_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScrollEvent_methods[] = 
{
  &ScrollEvent_method_GetClass__L_acdk_lang_RClass_,
  &ScrollEvent_method_ScrollEvent_IIII_LRScrollEvent_,
  &ScrollEvent_method_ScrollEvent__LRScrollEvent_,
  &ScrollEvent_method_ScrollEvent_I_LRScrollEvent_,
  &ScrollEvent_method_ScrollEvent_II_LRScrollEvent_,
  &ScrollEvent_method_ScrollEvent_III_LRScrollEvent_,
  &ScrollEvent_method_clone__LRObject_,
  &ScrollEvent_method_getOrientation__I,
  &ScrollEvent_method_getPosition__I,
  &ScrollEvent_method_setOrientation_I_V,
  &ScrollEvent_method_setPosition_I_V,
  0
};


struct ScrollEvent_MetaInfoInitializer
{  ScrollEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScrollEvent::clazzInfo();
    ci->fields =  _ScrollEvent_fields;
    ci->methods =  _ScrollEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScrollEvent_MetaInfoInitializer ScrollEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ScrollWinEvent_create_array(int length)
{
  return new ObjectArrayImpl<RScrollWinEvent>(length);
}

//static
::acdk::lang::RObject
ScrollWinEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScrollWinEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScrollWinEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_ScrollWinEvent_III_LRScrollWinEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollWinEvent(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_ScrollWinEvent__LRScrollWinEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollWinEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_ScrollWinEvent_I_LRScrollWinEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollWinEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_ScrollWinEvent_II_LRScrollWinEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrollWinEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_getOrientation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollWinEvent* This = dmi_cast<ScrollWinEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrollWinEvent::getOrientation();
    else
      ret = This->getOrientation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_getPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollWinEvent* This = dmi_cast<ScrollWinEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrollWinEvent::getPosition();
    else
      ret = This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_setOrientation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollWinEvent* This = dmi_cast<ScrollWinEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrollWinEvent::setOrientation(args[0].getIntVar());
    else
        This->setOrientation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrollWinEvent_method_setPosition_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrollWinEvent* This = dmi_cast<ScrollWinEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrollWinEvent::setPosition(args[0].getIntVar());
    else
        This->setPosition(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinBottom_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinBottom, flags);
    else
      ScrollWinEvent::EvtScrollwinBottom = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinLinedown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinLinedown, flags);
    else
      ScrollWinEvent::EvtScrollwinLinedown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinLineup_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinLineup, flags);
    else
      ScrollWinEvent::EvtScrollwinLineup = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinPagedown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinPagedown, flags);
    else
      ScrollWinEvent::EvtScrollwinPagedown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinPageup_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinPageup, flags);
    else
      ScrollWinEvent::EvtScrollwinPageup = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinThumbrelease_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinThumbrelease, flags);
    else
      ScrollWinEvent::EvtScrollwinThumbrelease = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinThumbtrack_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinThumbtrack, flags);
    else
      ScrollWinEvent::EvtScrollwinThumbtrack = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScrollWinEvent_fields_EvtScrollwinTop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ScrollWinEvent::EvtScrollwinTop, flags);
    else
      ScrollWinEvent::EvtScrollwinTop = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinBottom = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinBottom", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinBottom_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinBottom // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinLinedown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinLinedown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinLinedown_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinLinedown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinLineup = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinLineup", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinLineup_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinLineup // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinPagedown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinPagedown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinPagedown_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinPagedown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinPageup = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinPageup", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinPageup_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinPageup // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinThumbrelease = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinThumbrelease", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinThumbrelease_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinThumbrelease // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinThumbtrack = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinThumbtrack", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinThumbtrack_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinThumbtrack // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScrollWinEvent_fields_EvtScrollwinTop = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtScrollwinTop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_fields_EvtScrollwinTop_accessor, // read/write access to this fields
  (void*)&ScrollWinEvent::EvtScrollwinTop // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ScrollWinEvent_fields[] = 
{
  &ScrollWinEvent_fields_EvtScrollwinBottom,
  &ScrollWinEvent_fields_EvtScrollwinLinedown,
  &ScrollWinEvent_fields_EvtScrollwinLineup,
  &ScrollWinEvent_fields_EvtScrollwinPagedown,
  &ScrollWinEvent_fields_EvtScrollwinPageup,
  &ScrollWinEvent_fields_EvtScrollwinThumbrelease,
  &ScrollWinEvent_fields_EvtScrollwinThumbtrack,
  &ScrollWinEvent_fields_EvtScrollwinTop,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__args[] = 
{
  &ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_commandType,
  &ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_pos,
  &ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_ScrollWinEvent_III_LRScrollWinEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollWinEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollWinEvent::clazzInfo(), // return type
  "_0_ScrollWinEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_ScrollWinEvent_III_LRScrollWinEvent__exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_ScrollWinEvent_III_LRScrollWinEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_ScrollWinEvent__LRScrollWinEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_ScrollWinEvent__LRScrollWinEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_ScrollWinEvent__LRScrollWinEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollWinEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollWinEvent::clazzInfo(), // return type
  "_1_ScrollWinEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_ScrollWinEvent__LRScrollWinEvent__args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_ScrollWinEvent__LRScrollWinEvent__exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_ScrollWinEvent__LRScrollWinEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__args[] = 
{
  &ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_ScrollWinEvent_I_LRScrollWinEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollWinEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollWinEvent::clazzInfo(), // return type
  "_2_ScrollWinEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_ScrollWinEvent_I_LRScrollWinEvent__exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_ScrollWinEvent_I_LRScrollWinEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__args[] = 
{
  &ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__arg_commandType,
  &ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_ScrollWinEvent_II_LRScrollWinEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrollWinEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrollWinEvent::clazzInfo(), // return type
  "_3_ScrollWinEvent", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_ScrollWinEvent_II_LRScrollWinEvent__exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_ScrollWinEvent_II_LRScrollWinEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_getOrientation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_getOrientation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_getOrientation__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getOrientation", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_getOrientation__I_args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_getOrientation__I_exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_getOrientation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_getPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_getPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_getPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_getPosition__I_args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_getPosition__I_exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_getPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_setOrientation_I_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_setOrientation_I_V_args[] = 
{
  &ScrollWinEvent_methods_setOrientation_I_V_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_setOrientation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_setOrientation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setOrientation", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_setOrientation_I_V_args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_setOrientation_I_V_exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_setOrientation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrollWinEvent_methods_setPosition_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrollWinEvent_methods_setPosition_I_V_args[] = 
{
  &ScrollWinEvent_methods_setPosition_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrollWinEvent_methods_setPosition_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrollWinEvent_method_setPosition_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrollWinEvent_methods_setPosition_I_V_args, // the arguments
  0, //arguments count
  ScrollWinEvent_methods_setPosition_I_V_exceptions, // the declared exceptions
  ScrollWinEvent_MetainfoWrapper::ScrollWinEvent_method_setPosition_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScrollWinEvent_methods[] = 
{
  &ScrollWinEvent_method_GetClass__L_acdk_lang_RClass_,
  &ScrollWinEvent_method_ScrollWinEvent_III_LRScrollWinEvent_,
  &ScrollWinEvent_method_ScrollWinEvent__LRScrollWinEvent_,
  &ScrollWinEvent_method_ScrollWinEvent_I_LRScrollWinEvent_,
  &ScrollWinEvent_method_ScrollWinEvent_II_LRScrollWinEvent_,
  &ScrollWinEvent_method_getOrientation__I,
  &ScrollWinEvent_method_getPosition__I,
  &ScrollWinEvent_method_setOrientation_I_V,
  &ScrollWinEvent_method_setPosition_I_V,
  0
};


struct ScrollWinEvent_MetaInfoInitializer
{  ScrollWinEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScrollWinEvent::clazzInfo();
    ci->fields =  _ScrollWinEvent_fields;
    ci->methods =  _ScrollWinEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScrollWinEvent_MetaInfoInitializer ScrollWinEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
KeyEvent_create_array(int length)
{
  return new ObjectArrayImpl<RKeyEvent>(length);
}

//static
::acdk::lang::RObject
KeyEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class KeyEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)KeyEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_altDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::altDown();
    else
      ret = This->altDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_controlDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::controlDown();
    else
      ret = This->controlDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getKeyCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::getKeyCode();
    else
      ret = This->getKeyCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getPosition_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->KeyEvent::getPosition(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getPosition(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->KeyEvent::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getRawKeyCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::getRawKeyCode();
    else
      ret = This->getRawKeyCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getRawKeyFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::getRawKeyFlags();
    else
      ret = This->getRawKeyFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::getX();
    else
      ret = This->getX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_getY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::getY();
    else
      ret = This->getY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_hasModifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::hasModifiers();
    else
      ret = This->hasModifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_keyCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::keyCode();
    else
      ret = This->keyCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_metaDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::metaDown();
    else
      ret = This->metaDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  KeyEvent_method_shiftDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    KeyEvent* This = dmi_cast<KeyEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->KeyEvent::shiftDown();
    else
      ret = This->shiftDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  KeyEvent_fields_EvtChar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(KeyEvent::EvtChar, flags);
    else
      KeyEvent::EvtChar = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  KeyEvent_fields_EvtCharHook_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(KeyEvent::EvtCharHook, flags);
    else
      KeyEvent::EvtCharHook = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  KeyEvent_fields_EvtKeyDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(KeyEvent::EvtKeyDown, flags);
    else
      KeyEvent::EvtKeyDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  KeyEvent_fields_EvtKeyUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(KeyEvent::EvtKeyUp, flags);
    else
      KeyEvent::EvtKeyUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  KeyEvent_fields_EvtNavigationKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(KeyEvent::EvtNavigationKey, flags);
    else
      KeyEvent::EvtNavigationKey = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo KeyEvent_fields_EvtChar = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtChar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  KeyEvent_MetainfoWrapper::KeyEvent_fields_EvtChar_accessor, // read/write access to this fields
  (void*)&KeyEvent::EvtChar // address of field
};

::acdk::lang::dmi::ClazzFieldInfo KeyEvent_fields_EvtCharHook = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCharHook", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  KeyEvent_MetainfoWrapper::KeyEvent_fields_EvtCharHook_accessor, // read/write access to this fields
  (void*)&KeyEvent::EvtCharHook // address of field
};

::acdk::lang::dmi::ClazzFieldInfo KeyEvent_fields_EvtKeyDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtKeyDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  KeyEvent_MetainfoWrapper::KeyEvent_fields_EvtKeyDown_accessor, // read/write access to this fields
  (void*)&KeyEvent::EvtKeyDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo KeyEvent_fields_EvtKeyUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtKeyUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  KeyEvent_MetainfoWrapper::KeyEvent_fields_EvtKeyUp_accessor, // read/write access to this fields
  (void*)&KeyEvent::EvtKeyUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo KeyEvent_fields_EvtNavigationKey = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNavigationKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  KeyEvent_MetainfoWrapper::KeyEvent_fields_EvtNavigationKey_accessor, // read/write access to this fields
  (void*)&KeyEvent::EvtNavigationKey // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _KeyEvent_fields[] = 
{
  &KeyEvent_fields_EvtChar,
  &KeyEvent_fields_EvtCharHook,
  &KeyEvent_fields_EvtKeyDown,
  &KeyEvent_fields_EvtKeyUp,
  &KeyEvent_fields_EvtNavigationKey,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  KeyEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_altDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_altDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_altDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "altDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_altDown", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_altDown__Z_args, // the arguments
  0, //arguments count
  KeyEvent_methods_altDown__Z_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_altDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_controlDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_controlDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_controlDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "controlDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_controlDown", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_controlDown__Z_args, // the arguments
  0, //arguments count
  KeyEvent_methods_controlDown__Z_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_controlDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getKeyCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getKeyCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getKeyCode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeyCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getKeyCode", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getKeyCode__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getKeyCode__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getKeyCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo KeyEvent_methods_getPosition_OUTIOUTI_V_arg_xpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "xpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo KeyEvent_methods_getPosition_OUTIOUTI_V_arg_ypos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ypos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getPosition_OUTIOUTI_V_args[] = 
{
  &KeyEvent_methods_getPosition_OUTIOUTI_V_arg_xpos,
  &KeyEvent_methods_getPosition_OUTIOUTI_V_arg_ypos,
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getPosition_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getPosition_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_getPosition", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getPosition_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getPosition_OUTIOUTI_V_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getPosition_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_9_getPosition", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  KeyEvent_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getRawKeyCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getRawKeyCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getRawKeyCode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRawKeyCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getRawKeyCode", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getRawKeyCode__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getRawKeyCode__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getRawKeyCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getRawKeyFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getRawKeyFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getRawKeyFlags__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRawKeyFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getRawKeyFlags", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getRawKeyFlags__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getRawKeyFlags__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getRawKeyFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getX", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getX__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getX__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_getY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_getY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_getY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getY", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_getY__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_getY__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_getY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_hasModifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_hasModifiers__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_hasModifiers__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasModifiers", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_hasModifiers__Z_args, // the arguments
  0, //arguments count
  KeyEvent_methods_hasModifiers__Z_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_hasModifiers__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_keyCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_keyCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_keyCode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_keyCode", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_keyCode__I_args, // the arguments
  0, //arguments count
  KeyEvent_methods_keyCode__I_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_keyCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_metaDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_metaDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_metaDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "metaDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_metaDown", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_metaDown__Z_args, // the arguments
  0, //arguments count
  KeyEvent_methods_metaDown__Z_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_metaDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* KeyEvent_methods_shiftDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* KeyEvent_methods_shiftDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo KeyEvent_method_shiftDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shiftDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_shiftDown", // alternative name of method
  -1, // altlabelHashCode
  KeyEvent_methods_shiftDown__Z_args, // the arguments
  0, //arguments count
  KeyEvent_methods_shiftDown__Z_exceptions, // the declared exceptions
  KeyEvent_MetainfoWrapper::KeyEvent_method_shiftDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _KeyEvent_methods[] = 
{
  &KeyEvent_method_GetClass__L_acdk_lang_RClass_,
  &KeyEvent_method_altDown__Z,
  &KeyEvent_method_controlDown__Z,
  &KeyEvent_method_getKeyCode__I,
  &KeyEvent_method_getPosition_OUTIOUTI_V,
  &KeyEvent_method_getPosition__LRPoint_,
  &KeyEvent_method_getRawKeyCode__I,
  &KeyEvent_method_getRawKeyFlags__I,
  &KeyEvent_method_getX__I,
  &KeyEvent_method_getY__I,
  &KeyEvent_method_hasModifiers__Z,
  &KeyEvent_method_keyCode__I,
  &KeyEvent_method_metaDown__Z,
  &KeyEvent_method_shiftDown__Z,
  0
};


struct KeyEvent_MetaInfoInitializer
{  KeyEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = KeyEvent::clazzInfo();
    ci->fields =  _KeyEvent_fields;
    ci->methods =  _KeyEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
KeyEvent_MetaInfoInitializer KeyEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MouseEvent_create_array(int length)
{
  return new ObjectArrayImpl<RMouseEvent>(length);
}

//static
::acdk::lang::RObject
MouseEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MouseEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MouseEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_MouseEvent_I_LRMouseEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MouseEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_MouseEvent__LRMouseEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MouseEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_altDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::altDown();
    else
      ret = This->altDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_button_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::button(args[0].getIntVar());
    else
      ret = This->button(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonDClick_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonDClick(args[0].getIntVar());
    else
      ret = This->buttonDClick(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonDClick__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonDClick();
    else
      ret = This->buttonDClick();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonDown_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonDown(args[0].getIntVar());
    else
      ret = This->buttonDown(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonDown();
    else
      ret = This->buttonDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonIsDown_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonIsDown(args[0].getIntVar());
    else
      ret = This->buttonIsDown(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonUp_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonUp(args[0].getIntVar());
    else
      ret = This->buttonUp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_buttonUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::buttonUp();
    else
      ret = This->buttonUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MouseEvent::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_controlDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::controlDown();
    else
      ret = This->controlDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_dragging__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::dragging();
    else
      ret = This->dragging();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_entering__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::entering();
    else
      ret = This->entering();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getButton__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getButton();
    else
      ret = This->getButton();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getLinesPerAction__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getLinesPerAction();
    else
      ret = This->getLinesPerAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getPosition_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::getPosition(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getPosition(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MouseEvent::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getWheelDelta__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getWheelDelta();
    else
      ret = This->getWheelDelta();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getWheelRotation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getWheelRotation();
    else
      ret = This->getWheelRotation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getX();
    else
      ret = This->getX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_getY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::getY();
    else
      ret = This->getY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_isButton__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::isButton();
    else
      ret = This->isButton();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_isPageScroll__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::isPageScroll();
    else
      ret = This->isPageScroll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_leaving__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::leaving();
    else
      ret = This->leaving();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_leftDClick__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::leftDClick();
    else
      ret = This->leftDClick();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_leftDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::leftDown();
    else
      ret = This->leftDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_leftIsDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::leftIsDown();
    else
      ret = This->leftIsDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_leftUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::leftUp();
    else
      ret = This->leftUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_metaDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::metaDown();
    else
      ret = This->metaDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_middleDClick__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::middleDClick();
    else
      ret = This->middleDClick();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_middleDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::middleDown();
    else
      ret = This->middleDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_middleIsDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::middleIsDown();
    else
      ret = This->middleIsDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_middleUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::middleUp();
    else
      ret = This->middleUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_moving__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::moving();
    else
      ret = This->moving();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_rightDClick__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::rightDClick();
    else
      ret = This->rightDClick();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_rightDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::rightDown();
    else
      ret = This->rightDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_rightIsDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::rightIsDown();
    else
      ret = This->rightIsDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_rightUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::rightUp();
    else
      ret = This->rightUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setAltDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setAltDown(args[0].getBoolVar());
    else
        This->setAltDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setControlDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setControlDown(args[0].getBoolVar());
    else
        This->setControlDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setLeftDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setLeftDown(args[0].getBoolVar());
    else
        This->setLeftDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setMetaDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setMetaDown(args[0].getBoolVar());
    else
        This->setMetaDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setMiddleDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setMiddleDown(args[0].getBoolVar());
    else
        This->setMiddleDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setRightDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setRightDown(args[0].getBoolVar());
    else
        This->setRightDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setShiftDown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setShiftDown(args[0].getBoolVar());
    else
        This->setShiftDown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setX_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setX(args[0].getIntVar());
    else
        This->setX(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_setY_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MouseEvent::setY(args[0].getIntVar());
    else
        This->setY(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MouseEvent_method_shiftDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MouseEvent* This = dmi_cast<MouseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MouseEvent::shiftDown();
    else
      ret = This->shiftDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtEnterWindow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtEnterWindow, flags);
    else
      MouseEvent::EvtEnterWindow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtLeaveWindow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtLeaveWindow, flags);
    else
      MouseEvent::EvtLeaveWindow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtLeftDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtLeftDclick, flags);
    else
      MouseEvent::EvtLeftDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtLeftDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtLeftDown, flags);
    else
      MouseEvent::EvtLeftDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtLeftUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtLeftUp, flags);
    else
      MouseEvent::EvtLeftUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtMiddleDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtMiddleDclick, flags);
    else
      MouseEvent::EvtMiddleDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtMiddleDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtMiddleDown, flags);
    else
      MouseEvent::EvtMiddleDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtMiddleUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtMiddleUp, flags);
    else
      MouseEvent::EvtMiddleUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtMotion_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtMotion, flags);
    else
      MouseEvent::EvtMotion = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtMousewheel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtMousewheel, flags);
    else
      MouseEvent::EvtMousewheel = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcEnterWindow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcEnterWindow, flags);
    else
      MouseEvent::EvtNcEnterWindow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcLeaveWindow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcLeaveWindow, flags);
    else
      MouseEvent::EvtNcLeaveWindow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcLeftDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcLeftDclick, flags);
    else
      MouseEvent::EvtNcLeftDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcLeftDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcLeftDown, flags);
    else
      MouseEvent::EvtNcLeftDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcLeftUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcLeftUp, flags);
    else
      MouseEvent::EvtNcLeftUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcMiddleDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcMiddleDclick, flags);
    else
      MouseEvent::EvtNcMiddleDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcMiddleDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcMiddleDown, flags);
    else
      MouseEvent::EvtNcMiddleDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcMiddleUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcMiddleUp, flags);
    else
      MouseEvent::EvtNcMiddleUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcMotion_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcMotion, flags);
    else
      MouseEvent::EvtNcMotion = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcRightDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcRightDclick, flags);
    else
      MouseEvent::EvtNcRightDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcRightDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcRightDown, flags);
    else
      MouseEvent::EvtNcRightDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtNcRightUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtNcRightUp, flags);
    else
      MouseEvent::EvtNcRightUp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtRightDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtRightDclick, flags);
    else
      MouseEvent::EvtRightDclick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtRightDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtRightDown, flags);
    else
      MouseEvent::EvtRightDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MouseEvent_fields_EvtRightUp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MouseEvent::EvtRightUp, flags);
    else
      MouseEvent::EvtRightUp = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtEnterWindow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtEnterWindow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtEnterWindow_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtEnterWindow // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtLeaveWindow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtLeaveWindow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtLeaveWindow_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtLeaveWindow // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtLeftDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtLeftDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtLeftDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtLeftDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtLeftDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtLeftDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtLeftDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtLeftDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtLeftUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtLeftUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtLeftUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtLeftUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtMiddleDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMiddleDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtMiddleDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtMiddleDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtMiddleDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMiddleDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtMiddleDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtMiddleDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtMiddleUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMiddleUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtMiddleUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtMiddleUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtMotion = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMotion", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtMotion_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtMotion // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtMousewheel = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtMousewheel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtMousewheel_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtMousewheel // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcEnterWindow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcEnterWindow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcEnterWindow_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcEnterWindow // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcLeaveWindow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcLeaveWindow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcLeaveWindow_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcLeaveWindow // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcLeftDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcLeftDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcLeftDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcLeftDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcLeftDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcLeftDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcLeftDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcLeftDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcLeftUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcLeftUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcLeftUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcLeftUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcMiddleDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcMiddleDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcMiddleDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcMiddleDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcMiddleDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcMiddleDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcMiddleDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcMiddleDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcMiddleUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcMiddleUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcMiddleUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcMiddleUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcMotion = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcMotion", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcMotion_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcMotion // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcRightDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcRightDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcRightDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcRightDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcRightDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcRightDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcRightDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcRightDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtNcRightUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcRightUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtNcRightUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtNcRightUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtRightDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtRightDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtRightDclick_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtRightDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtRightDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtRightDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtRightDown_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtRightDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MouseEvent_fields_EvtRightUp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtRightUp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MouseEvent_MetainfoWrapper::MouseEvent_fields_EvtRightUp_accessor, // read/write access to this fields
  (void*)&MouseEvent::EvtRightUp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _MouseEvent_fields[] = 
{
  &MouseEvent_fields_EvtEnterWindow,
  &MouseEvent_fields_EvtLeaveWindow,
  &MouseEvent_fields_EvtLeftDclick,
  &MouseEvent_fields_EvtLeftDown,
  &MouseEvent_fields_EvtLeftUp,
  &MouseEvent_fields_EvtMiddleDclick,
  &MouseEvent_fields_EvtMiddleDown,
  &MouseEvent_fields_EvtMiddleUp,
  &MouseEvent_fields_EvtMotion,
  &MouseEvent_fields_EvtMousewheel,
  &MouseEvent_fields_EvtNcEnterWindow,
  &MouseEvent_fields_EvtNcLeaveWindow,
  &MouseEvent_fields_EvtNcLeftDclick,
  &MouseEvent_fields_EvtNcLeftDown,
  &MouseEvent_fields_EvtNcLeftUp,
  &MouseEvent_fields_EvtNcMiddleDclick,
  &MouseEvent_fields_EvtNcMiddleDown,
  &MouseEvent_fields_EvtNcMiddleUp,
  &MouseEvent_fields_EvtNcMotion,
  &MouseEvent_fields_EvtNcRightDclick,
  &MouseEvent_fields_EvtNcRightDown,
  &MouseEvent_fields_EvtNcRightUp,
  &MouseEvent_fields_EvtRightDclick,
  &MouseEvent_fields_EvtRightDown,
  &MouseEvent_fields_EvtRightUp,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_O_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MouseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_MouseEvent_I_LRMouseEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_MouseEvent_I_LRMouseEvent__args[] = 
{
  &MouseEvent_methods_MouseEvent_I_LRMouseEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_MouseEvent_I_LRMouseEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_MouseEvent_I_LRMouseEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MouseEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MouseEvent::clazzInfo(), // return type
  "_0_MouseEvent", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_MouseEvent_I_LRMouseEvent__args, // the arguments
  0, //arguments count
  MouseEvent_methods_MouseEvent_I_LRMouseEvent__exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_MouseEvent_I_LRMouseEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_MouseEvent__LRMouseEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_MouseEvent__LRMouseEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_MouseEvent__LRMouseEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MouseEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MouseEvent::clazzInfo(), // return type
  "_1_MouseEvent", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_MouseEvent__LRMouseEvent__args, // the arguments
  0, //arguments count
  MouseEvent_methods_MouseEvent__LRMouseEvent__exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_MouseEvent__LRMouseEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_altDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_altDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_altDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "altDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_altDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_altDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_altDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_altDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_button_I_Z_arg_but = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "but", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_button_I_Z_args[] = 
{
  &MouseEvent_methods_button_I_Z_arg_but,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_button_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_button_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_button", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_button_I_Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_button_I_Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_button_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_buttonDClick_I_Z_arg_but = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "but", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonDClick_I_Z_args[] = 
{
  &MouseEvent_methods_buttonDClick_I_Z_arg_but,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonDClick_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonDClick_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonDClick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_buttonDClick", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonDClick_I_Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonDClick_I_Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonDClick_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonDClick__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonDClick__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonDClick__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonDClick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_buttonDClick", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonDClick__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonDClick__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonDClick__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_buttonDown_I_Z_arg_but = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "but", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonDown_I_Z_args[] = 
{
  &MouseEvent_methods_buttonDown_I_Z_arg_but,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonDown_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonDown_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_buttonDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonDown_I_Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonDown_I_Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonDown_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_buttonDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_buttonIsDown_I_Z_arg_but = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "but", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonIsDown_I_Z_args[] = 
{
  &MouseEvent_methods_buttonIsDown_I_Z_arg_but,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonIsDown_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonIsDown_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonIsDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_buttonIsDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonIsDown_I_Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonIsDown_I_Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonIsDown_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_buttonUp_I_Z_arg_but = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "but", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonUp_I_Z_args[] = 
{
  &MouseEvent_methods_buttonUp_I_Z_arg_but,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonUp_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonUp_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_buttonUp", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonUp_I_Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonUp_I_Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonUp_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_buttonUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_buttonUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_buttonUp__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "buttonUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_buttonUp", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_buttonUp__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_buttonUp__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_buttonUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_clone", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  MouseEvent_methods_clone__LRObject__exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_controlDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_controlDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_controlDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "controlDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_controlDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_controlDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_controlDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_controlDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_dragging__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_dragging__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_dragging__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dragging", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_dragging", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_dragging__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_dragging__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_dragging__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_entering__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_entering__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_entering__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entering", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_entering", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_entering__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_entering__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_entering__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getButton__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getButton__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getButton__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getButton", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getButton__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getButton__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getButton__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getLinesPerAction__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getLinesPerAction__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getLinesPerAction__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLinesPerAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_D_getLinesPerAction", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getLinesPerAction__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getLinesPerAction__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getLinesPerAction__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_getPosition_OUTIOUTI_V_arg_xpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "xpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_getPosition_OUTIOUTI_V_arg_ypos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ypos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getPosition_OUTIOUTI_V_args[] = 
{
  &MouseEvent_methods_getPosition_OUTIOUTI_V_arg_xpos,
  &MouseEvent_methods_getPosition_OUTIOUTI_V_arg_ypos,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getPosition_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getPosition_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_getPosition", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getPosition_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getPosition_OUTIOUTI_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getPosition_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_y_getPosition", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  MouseEvent_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getWheelDelta__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getWheelDelta__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getWheelDelta__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWheelDelta", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_C_getWheelDelta", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getWheelDelta__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getWheelDelta__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getWheelDelta__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getWheelRotation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getWheelRotation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getWheelRotation__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWheelRotation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getWheelRotation", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getWheelRotation__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getWheelRotation__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getWheelRotation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getX", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getX__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getX__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_getY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_getY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_getY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getY", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_getY__I_args, // the arguments
  0, //arguments count
  MouseEvent_methods_getY__I_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_getY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_isButton__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_isButton__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_isButton__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isButton", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_isButton__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_isButton__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_isButton__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_isPageScroll__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_isPageScroll__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_isPageScroll__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPageScroll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_isPageScroll", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_isPageScroll__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_isPageScroll__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_isPageScroll__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_leaving__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_leaving__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_leaving__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leaving", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_leaving", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_leaving__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_leaving__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_leaving__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_leftDClick__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_leftDClick__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_leftDClick__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftDClick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_leftDClick", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_leftDClick__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_leftDClick__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_leftDClick__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_leftDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_leftDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_leftDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_leftDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_leftDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_leftDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_leftDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_leftIsDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_leftIsDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_leftIsDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftIsDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_leftIsDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_leftIsDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_leftIsDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_leftIsDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_leftUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_leftUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_leftUp__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_leftUp", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_leftUp__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_leftUp__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_leftUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_metaDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_metaDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_metaDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "metaDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_metaDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_metaDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_metaDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_metaDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_middleDClick__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_middleDClick__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_middleDClick__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "middleDClick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_middleDClick", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_middleDClick__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_middleDClick__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_middleDClick__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_middleDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_middleDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_middleDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "middleDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_middleDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_middleDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_middleDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_middleDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_middleIsDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_middleIsDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_middleIsDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "middleIsDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_middleIsDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_middleIsDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_middleIsDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_middleIsDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_middleUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_middleUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_middleUp__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "middleUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_middleUp", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_middleUp__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_middleUp__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_middleUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_moving__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_moving__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_moving__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moving", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_moving", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_moving__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_moving__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_moving__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_rightDClick__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_rightDClick__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_rightDClick__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightDClick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_rightDClick", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_rightDClick__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_rightDClick__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_rightDClick__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_rightDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_rightDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_rightDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_rightDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_rightDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_rightDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_rightDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_rightIsDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_rightIsDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_rightIsDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightIsDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_rightIsDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_rightIsDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_rightIsDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_rightIsDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_rightUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_rightUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_rightUp__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_rightUp", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_rightUp__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_rightUp__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_rightUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setAltDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setAltDown_Z_V_args[] = 
{
  &MouseEvent_methods_setAltDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setAltDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setAltDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAltDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_setAltDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setAltDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setAltDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setAltDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setControlDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setControlDown_Z_V_args[] = 
{
  &MouseEvent_methods_setControlDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setControlDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setControlDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setControlDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_setControlDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setControlDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setControlDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setControlDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setLeftDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setLeftDown_Z_V_args[] = 
{
  &MouseEvent_methods_setLeftDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setLeftDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setLeftDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLeftDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_setLeftDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setLeftDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setLeftDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setLeftDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setMetaDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setMetaDown_Z_V_args[] = 
{
  &MouseEvent_methods_setMetaDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setMetaDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setMetaDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMetaDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_setMetaDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setMetaDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setMetaDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setMetaDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setMiddleDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setMiddleDown_Z_V_args[] = 
{
  &MouseEvent_methods_setMiddleDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setMiddleDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setMiddleDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMiddleDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_setMiddleDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setMiddleDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setMiddleDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setMiddleDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setRightDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setRightDown_Z_V_args[] = 
{
  &MouseEvent_methods_setRightDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setRightDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setRightDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRightDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setRightDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setRightDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setRightDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setRightDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setShiftDown_Z_V_arg_down = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "down", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setShiftDown_Z_V_args[] = 
{
  &MouseEvent_methods_setShiftDown_Z_V_arg_down,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setShiftDown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setShiftDown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShiftDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_setShiftDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setShiftDown_Z_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setShiftDown_Z_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setShiftDown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setX_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setX_I_V_args[] = 
{
  &MouseEvent_methods_setX_I_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setX_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setX_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_setX", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setX_I_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setX_I_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setX_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MouseEvent_methods_setY_I_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_setY_I_V_args[] = 
{
  &MouseEvent_methods_setY_I_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_setY_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_setY_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_setY", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_setY_I_V_args, // the arguments
  0, //arguments count
  MouseEvent_methods_setY_I_V_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_setY_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MouseEvent_methods_shiftDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MouseEvent_methods_shiftDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MouseEvent_method_shiftDown__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shiftDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_shiftDown", // alternative name of method
  -1, // altlabelHashCode
  MouseEvent_methods_shiftDown__Z_args, // the arguments
  0, //arguments count
  MouseEvent_methods_shiftDown__Z_exceptions, // the declared exceptions
  MouseEvent_MetainfoWrapper::MouseEvent_method_shiftDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MouseEvent_methods[] = 
{
  &MouseEvent_method_GetClass__L_acdk_lang_RClass_,
  &MouseEvent_method_MouseEvent_I_LRMouseEvent_,
  &MouseEvent_method_MouseEvent__LRMouseEvent_,
  &MouseEvent_method_altDown__Z,
  &MouseEvent_method_button_I_Z,
  &MouseEvent_method_buttonDClick_I_Z,
  &MouseEvent_method_buttonDClick__Z,
  &MouseEvent_method_buttonDown_I_Z,
  &MouseEvent_method_buttonDown__Z,
  &MouseEvent_method_buttonIsDown_I_Z,
  &MouseEvent_method_buttonUp_I_Z,
  &MouseEvent_method_buttonUp__Z,
  &MouseEvent_method_clone__LRObject_,
  &MouseEvent_method_controlDown__Z,
  &MouseEvent_method_dragging__Z,
  &MouseEvent_method_entering__Z,
  &MouseEvent_method_getButton__I,
  &MouseEvent_method_getLinesPerAction__I,
  &MouseEvent_method_getPosition_OUTIOUTI_V,
  &MouseEvent_method_getPosition__LRPoint_,
  &MouseEvent_method_getWheelDelta__I,
  &MouseEvent_method_getWheelRotation__I,
  &MouseEvent_method_getX__I,
  &MouseEvent_method_getY__I,
  &MouseEvent_method_isButton__Z,
  &MouseEvent_method_isPageScroll__Z,
  &MouseEvent_method_leaving__Z,
  &MouseEvent_method_leftDClick__Z,
  &MouseEvent_method_leftDown__Z,
  &MouseEvent_method_leftIsDown__Z,
  &MouseEvent_method_leftUp__Z,
  &MouseEvent_method_metaDown__Z,
  &MouseEvent_method_middleDClick__Z,
  &MouseEvent_method_middleDown__Z,
  &MouseEvent_method_middleIsDown__Z,
  &MouseEvent_method_middleUp__Z,
  &MouseEvent_method_moving__Z,
  &MouseEvent_method_rightDClick__Z,
  &MouseEvent_method_rightDown__Z,
  &MouseEvent_method_rightIsDown__Z,
  &MouseEvent_method_rightUp__Z,
  &MouseEvent_method_setAltDown_Z_V,
  &MouseEvent_method_setControlDown_Z_V,
  &MouseEvent_method_setLeftDown_Z_V,
  &MouseEvent_method_setMetaDown_Z_V,
  &MouseEvent_method_setMiddleDown_Z_V,
  &MouseEvent_method_setRightDown_Z_V,
  &MouseEvent_method_setShiftDown_Z_V,
  &MouseEvent_method_setX_I_V,
  &MouseEvent_method_setY_I_V,
  &MouseEvent_method_shiftDown__Z,
  0
};


struct MouseEvent_MetaInfoInitializer
{  MouseEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MouseEvent::clazzInfo();
    ci->fields =  _MouseEvent_fields;
    ci->methods =  _MouseEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MouseEvent_MetaInfoInitializer MouseEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
SetCursorEvent_create_array(int length)
{
  return new ObjectArrayImpl<RSetCursorEvent>(length);
}

//static
::acdk::lang::RObject
SetCursorEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SetCursorEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SetCursorEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_SetCursorEvent_II_LRSetCursorEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetCursorEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_SetCursorEvent__LRSetCursorEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetCursorEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_SetCursorEvent_I_LRSetCursorEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetCursorEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SetCursorEvent* This = dmi_cast<SetCursorEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SetCursorEvent::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_getX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SetCursorEvent* This = dmi_cast<SetCursorEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SetCursorEvent::getX();
    else
      ret = This->getX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_getY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SetCursorEvent* This = dmi_cast<SetCursorEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SetCursorEvent::getY();
    else
      ret = This->getY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetCursorEvent_method_hasCursor__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SetCursorEvent* This = dmi_cast<SetCursorEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SetCursorEvent::hasCursor();
    else
      ret = This->hasCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SetCursorEvent_fields_EvtSetCursor_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(SetCursorEvent::EvtSetCursor, flags);
    else
      SetCursorEvent::EvtSetCursor = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SetCursorEvent_fields_EvtSetCursor = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSetCursor", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_fields_EvtSetCursor_accessor, // read/write access to this fields
  (void*)&SetCursorEvent::EvtSetCursor // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SetCursorEvent_fields[] = 
{
  &SetCursorEvent_fields_EvtSetCursor,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__args[] = 
{
  &SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__arg_x,
  &SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_SetCursorEvent_II_LRSetCursorEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SetCursorEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetCursorEvent::clazzInfo(), // return type
  "_0_SetCursorEvent", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_SetCursorEvent_II_LRSetCursorEvent__exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_SetCursorEvent_II_LRSetCursorEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_SetCursorEvent__LRSetCursorEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_SetCursorEvent__LRSetCursorEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_SetCursorEvent__LRSetCursorEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SetCursorEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetCursorEvent::clazzInfo(), // return type
  "_1_SetCursorEvent", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_SetCursorEvent__LRSetCursorEvent__args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_SetCursorEvent__LRSetCursorEvent__exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_SetCursorEvent__LRSetCursorEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__args[] = 
{
  &SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_SetCursorEvent_I_LRSetCursorEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SetCursorEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetCursorEvent::clazzInfo(), // return type
  "_2_SetCursorEvent", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_SetCursorEvent_I_LRSetCursorEvent__exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_SetCursorEvent_I_LRSetCursorEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_clone__LRObject__exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_getX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_getX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_getX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getX", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_getX__I_args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_getX__I_exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_getX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_getY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_getY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_getY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getY", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_getY__I_args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_getY__I_exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_getY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetCursorEvent_methods_hasCursor__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetCursorEvent_methods_hasCursor__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetCursorEvent_method_hasCursor__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_hasCursor", // alternative name of method
  -1, // altlabelHashCode
  SetCursorEvent_methods_hasCursor__Z_args, // the arguments
  0, //arguments count
  SetCursorEvent_methods_hasCursor__Z_exceptions, // the declared exceptions
  SetCursorEvent_MetainfoWrapper::SetCursorEvent_method_hasCursor__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SetCursorEvent_methods[] = 
{
  &SetCursorEvent_method_GetClass__L_acdk_lang_RClass_,
  &SetCursorEvent_method_SetCursorEvent_II_LRSetCursorEvent_,
  &SetCursorEvent_method_SetCursorEvent__LRSetCursorEvent_,
  &SetCursorEvent_method_SetCursorEvent_I_LRSetCursorEvent_,
  &SetCursorEvent_method_clone__LRObject_,
  &SetCursorEvent_method_getX__I,
  &SetCursorEvent_method_getY__I,
  &SetCursorEvent_method_hasCursor__Z,
  0
};


struct SetCursorEvent_MetaInfoInitializer
{  SetCursorEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SetCursorEvent::clazzInfo();
    ci->fields =  _SetCursorEvent_fields;
    ci->methods =  _SetCursorEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SetCursorEvent_MetaInfoInitializer SetCursorEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FocusEvent_create_array(int length)
{
  return new ObjectArrayImpl<RFocusEvent>(length);
}

//static
::acdk::lang::RObject
FocusEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FocusEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FocusEvent_method_FocusEvent_II_LRFocusEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FocusEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FocusEvent_method_FocusEvent__LRFocusEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FocusEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FocusEvent_method_FocusEvent_I_LRFocusEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FocusEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FocusEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FocusEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FocusEvent_fields_EvtChildFocus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FocusEvent::EvtChildFocus, flags);
    else
      FocusEvent::EvtChildFocus = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FocusEvent_fields_EvtKillFocus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FocusEvent::EvtKillFocus, flags);
    else
      FocusEvent::EvtKillFocus = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FocusEvent_fields_EvtSetFocus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FocusEvent::EvtSetFocus, flags);
    else
      FocusEvent::EvtSetFocus = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FocusEvent_fields_EvtChildFocus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtChildFocus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FocusEvent_MetainfoWrapper::FocusEvent_fields_EvtChildFocus_accessor, // read/write access to this fields
  (void*)&FocusEvent::EvtChildFocus // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FocusEvent_fields_EvtKillFocus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtKillFocus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FocusEvent_MetainfoWrapper::FocusEvent_fields_EvtKillFocus_accessor, // read/write access to this fields
  (void*)&FocusEvent::EvtKillFocus // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FocusEvent_fields_EvtSetFocus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSetFocus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FocusEvent_MetainfoWrapper::FocusEvent_fields_EvtSetFocus_accessor, // read/write access to this fields
  (void*)&FocusEvent::EvtSetFocus // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FocusEvent_fields[] = 
{
  &FocusEvent_fields_EvtChildFocus,
  &FocusEvent_fields_EvtKillFocus,
  &FocusEvent_fields_EvtSetFocus,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FocusEvent_methods_FocusEvent_II_LRFocusEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FocusEvent_methods_FocusEvent_II_LRFocusEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FocusEvent_methods_FocusEvent_II_LRFocusEvent__args[] = 
{
  &FocusEvent_methods_FocusEvent_II_LRFocusEvent__arg_commandType,
  &FocusEvent_methods_FocusEvent_II_LRFocusEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* FocusEvent_methods_FocusEvent_II_LRFocusEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FocusEvent_method_FocusEvent_II_LRFocusEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FocusEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FocusEvent::clazzInfo(), // return type
  "_0_FocusEvent", // alternative name of method
  -1, // altlabelHashCode
  FocusEvent_methods_FocusEvent_II_LRFocusEvent__args, // the arguments
  0, //arguments count
  FocusEvent_methods_FocusEvent_II_LRFocusEvent__exceptions, // the declared exceptions
  FocusEvent_MetainfoWrapper::FocusEvent_method_FocusEvent_II_LRFocusEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FocusEvent_methods_FocusEvent__LRFocusEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FocusEvent_methods_FocusEvent__LRFocusEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FocusEvent_method_FocusEvent__LRFocusEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FocusEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FocusEvent::clazzInfo(), // return type
  "_1_FocusEvent", // alternative name of method
  -1, // altlabelHashCode
  FocusEvent_methods_FocusEvent__LRFocusEvent__args, // the arguments
  0, //arguments count
  FocusEvent_methods_FocusEvent__LRFocusEvent__exceptions, // the declared exceptions
  FocusEvent_MetainfoWrapper::FocusEvent_method_FocusEvent__LRFocusEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FocusEvent_methods_FocusEvent_I_LRFocusEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FocusEvent_methods_FocusEvent_I_LRFocusEvent__args[] = 
{
  &FocusEvent_methods_FocusEvent_I_LRFocusEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* FocusEvent_methods_FocusEvent_I_LRFocusEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FocusEvent_method_FocusEvent_I_LRFocusEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FocusEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FocusEvent::clazzInfo(), // return type
  "_2_FocusEvent", // alternative name of method
  -1, // altlabelHashCode
  FocusEvent_methods_FocusEvent_I_LRFocusEvent__args, // the arguments
  0, //arguments count
  FocusEvent_methods_FocusEvent_I_LRFocusEvent__exceptions, // the declared exceptions
  FocusEvent_MetainfoWrapper::FocusEvent_method_FocusEvent_I_LRFocusEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FocusEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FocusEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FocusEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FocusEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FocusEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FocusEvent_MetainfoWrapper::FocusEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FocusEvent_methods[] = 
{
  &FocusEvent_method_FocusEvent_II_LRFocusEvent_,
  &FocusEvent_method_FocusEvent__LRFocusEvent_,
  &FocusEvent_method_FocusEvent_I_LRFocusEvent_,
  &FocusEvent_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct FocusEvent_MetaInfoInitializer
{  FocusEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FocusEvent::clazzInfo();
    ci->fields =  _FocusEvent_fields;
    ci->methods =  _FocusEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FocusEvent_MetaInfoInitializer FocusEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
IdleEvent_create_array(int length)
{
  return new ObjectArrayImpl<RIdleEvent>(length);
}

//static
::acdk::lang::RObject
IdleEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IdleEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdleEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IdleEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdleEvent_method_IdleEvent__LRIdleEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdleEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IdleEvent_fields_EvtIdle_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(IdleEvent::EvtIdle, flags);
    else
      IdleEvent::EvtIdle = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo IdleEvent_fields_EvtIdle = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtIdle", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  IdleEvent_MetainfoWrapper::IdleEvent_fields_EvtIdle_accessor, // read/write access to this fields
  (void*)&IdleEvent::EvtIdle // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IdleEvent_fields[] = 
{
  &IdleEvent_fields_EvtIdle,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdleEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdleEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdleEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IdleEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IdleEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IdleEvent_MetainfoWrapper::IdleEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdleEvent_methods_IdleEvent__LRIdleEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdleEvent_methods_IdleEvent__LRIdleEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdleEvent_method_IdleEvent__LRIdleEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IdleEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdleEvent::clazzInfo(), // return type
  "_0_IdleEvent", // alternative name of method
  -1, // altlabelHashCode
  IdleEvent_methods_IdleEvent__LRIdleEvent__args, // the arguments
  0, //arguments count
  IdleEvent_methods_IdleEvent__LRIdleEvent__exceptions, // the declared exceptions
  IdleEvent_MetainfoWrapper::IdleEvent_method_IdleEvent__LRIdleEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IdleEvent_methods[] = 
{
  &IdleEvent_method_GetClass__L_acdk_lang_RClass_,
  &IdleEvent_method_IdleEvent__LRIdleEvent_,
  0
};


struct IdleEvent_MetaInfoInitializer
{  IdleEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IdleEvent::clazzInfo();
    ci->fields =  _IdleEvent_fields;
    ci->methods =  _IdleEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IdleEvent_MetaInfoInitializer IdleEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
UpdateUIEvent_create_array(int length)
{
  return new ObjectArrayImpl<RUpdateUIEvent>(length);
}

//static
::acdk::lang::RObject
UpdateUIEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UpdateUIEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UpdateUIEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_UpdateUIEvent_I_LRUpdateUIEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UpdateUIEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_canUpdate_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UpdateUIEvent::canUpdate((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_check_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->UpdateUIEvent::check(args[0].getBoolVar());
    else
        This->check(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_enable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->UpdateUIEvent::enable(args[0].getBoolVar());
    else
        This->enable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UpdateUIEvent::getChecked();
    else
      ret = This->getChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UpdateUIEvent::getEnabled();
    else
      ret = This->getEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getMode__LUpdateUIMode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = (UpdateUIMode)UpdateUIEvent::getMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getSetChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UpdateUIEvent::getSetChecked();
    else
      ret = This->getSetChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getSetEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UpdateUIEvent::getSetEnabled();
    else
      ret = This->getSetEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getSetText__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UpdateUIEvent::getSetText();
    else
      ret = This->getSetText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UpdateUIEvent::getText();
    else
        ret = (::acdk::lang::RObject)This->getText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_getUpdateInterval__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UpdateUIEvent::getUpdateInterval();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_resetUpdateTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent::resetUpdateTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_setMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent::setMode((UpdateUIMode)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_setText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent* This = dmi_cast<UpdateUIEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->UpdateUIEvent::setText((RString)args[0].getObjectVar());
    else
        This->setText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UpdateUIEvent_method_setUpdateInterval_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UpdateUIEvent::setUpdateInterval(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UpdateUIEvent_fields_EvtUpdateUi_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(UpdateUIEvent::EvtUpdateUi, flags);
    else
      UpdateUIEvent::EvtUpdateUi = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo UpdateUIEvent_fields_EvtUpdateUi = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtUpdateUi", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_fields_EvtUpdateUi_accessor, // read/write access to this fields
  (void*)&UpdateUIEvent::EvtUpdateUi // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _UpdateUIEvent_fields[] = 
{
  &UpdateUIEvent_fields_EvtUpdateUi,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__arg_windowId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "windowId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__args[] = 
{
  &UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__arg_windowId,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_UpdateUIEvent_I_LRUpdateUIEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UpdateUIEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UpdateUIEvent::clazzInfo(), // return type
  "_0_UpdateUIEvent", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_UpdateUIEvent_I_LRUpdateUIEvent__exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_UpdateUIEvent_I_LRUpdateUIEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_canUpdate_INLRWindow__Z_arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_canUpdate_INLRWindow__Z_args[] = 
{
  &UpdateUIEvent_methods_canUpdate_INLRWindow__Z_arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_canUpdate_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_canUpdate_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_canUpdate", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_canUpdate_INLRWindow__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_canUpdate_INLRWindow__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_canUpdate_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_check_Z_V_arg_check = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "check", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_check_Z_V_args[] = 
{
  &UpdateUIEvent_methods_check_Z_V_arg_check,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_check_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_check_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "check", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_check", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_check_Z_V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_check_Z_V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_check_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_enable_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_enable_Z_V_args[] = 
{
  &UpdateUIEvent_methods_enable_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_enable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_enable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_enable", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_enable_Z_V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_enable_Z_V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_enable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getChecked__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getChecked", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getChecked__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getChecked__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_getEnabled", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getEnabled__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getEnabled__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getMode__LUpdateUIMode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getMode__LUpdateUIMode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getMode__LUpdateUIMode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getMode", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getMode__LUpdateUIMode__args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getMode__LUpdateUIMode__exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getMode__LUpdateUIMode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getSetChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getSetChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getSetChecked__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSetChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getSetChecked", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getSetChecked__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getSetChecked__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getSetChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getSetEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getSetEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getSetEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSetEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getSetEnabled", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getSetEnabled__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getSetEnabled__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getSetEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getSetText__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getSetText__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getSetText__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSetText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_getSetText", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getSetText__Z_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getSetText__Z_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getSetText__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getText", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getText__LRString__args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getText__LRString__exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_getUpdateInterval__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_getUpdateInterval__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_getUpdateInterval__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateInterval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getUpdateInterval", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_getUpdateInterval__I_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_getUpdateInterval__I_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_getUpdateInterval__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_resetUpdateTime__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_resetUpdateTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_resetUpdateTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetUpdateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_resetUpdateTime", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_resetUpdateTime__V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_resetUpdateTime__V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_resetUpdateTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_setMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_setMode_I_V_args[] = 
{
  &UpdateUIEvent_methods_setMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_setMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_setMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setMode", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_setMode_I_V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_setMode_I_V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_setMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_setText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_setText_INLRString__V_args[] = 
{
  &UpdateUIEvent_methods_setText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_setText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_setText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setText", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_setText_INLRString__V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_setText_INLRString__V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_setText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UpdateUIEvent_methods_setUpdateInterval_I_V_arg_updateInterval = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "updateInterval", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UpdateUIEvent_methods_setUpdateInterval_I_V_args[] = 
{
  &UpdateUIEvent_methods_setUpdateInterval_I_V_arg_updateInterval,
  0
};

::acdk::lang::dmi::ClazzInfo* UpdateUIEvent_methods_setUpdateInterval_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UpdateUIEvent_method_setUpdateInterval_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUpdateInterval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setUpdateInterval", // alternative name of method
  -1, // altlabelHashCode
  UpdateUIEvent_methods_setUpdateInterval_I_V_args, // the arguments
  0, //arguments count
  UpdateUIEvent_methods_setUpdateInterval_I_V_exceptions, // the declared exceptions
  UpdateUIEvent_MetainfoWrapper::UpdateUIEvent_method_setUpdateInterval_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UpdateUIEvent_methods[] = 
{
  &UpdateUIEvent_method_GetClass__L_acdk_lang_RClass_,
  &UpdateUIEvent_method_UpdateUIEvent_I_LRUpdateUIEvent_,
  &UpdateUIEvent_method_canUpdate_INLRWindow__Z,
  &UpdateUIEvent_method_check_Z_V,
  &UpdateUIEvent_method_enable_Z_V,
  &UpdateUIEvent_method_getChecked__Z,
  &UpdateUIEvent_method_getEnabled__Z,
  &UpdateUIEvent_method_getMode__LUpdateUIMode_,
  &UpdateUIEvent_method_getSetChecked__Z,
  &UpdateUIEvent_method_getSetEnabled__Z,
  &UpdateUIEvent_method_getSetText__Z,
  &UpdateUIEvent_method_getText__LRString_,
  &UpdateUIEvent_method_getUpdateInterval__I,
  &UpdateUIEvent_method_resetUpdateTime__V,
  &UpdateUIEvent_method_setMode_I_V,
  &UpdateUIEvent_method_setText_INLRString__V,
  &UpdateUIEvent_method_setUpdateInterval_I_V,
  0
};


struct UpdateUIEvent_MetaInfoInitializer
{  UpdateUIEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UpdateUIEvent::clazzInfo();
    ci->fields =  _UpdateUIEvent_fields;
    ci->methods =  _UpdateUIEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UpdateUIEvent_MetaInfoInitializer UpdateUIEvent_MetaInfoInitializer_staticinstance__;


struct UpdateUIEvent_clazzInfo_ClazzAttributesResInitializer5
{
  UpdateUIEvent_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UpdateUIEvent_methods_setMode_I_V_arg_mode, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)UpdateUIModeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UpdateUIEvent_method_getMode__LUpdateUIMode_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)UpdateUIModeMetaInf::GetEnumInfo()));
  }
};

UpdateUIEvent_clazzInfo_ClazzAttributesResInitializer5 UpdateUIEvent_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
HelpEvent_create_array(int length)
{
  return new ObjectArrayImpl<RHelpEvent>(length);
}

//static
::acdk::lang::RObject
HelpEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HelpEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HelpEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_HelpEvent_IIINLRPoint__LRHelpEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HelpEvent(args[0].getIntVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_HelpEvent__LRHelpEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HelpEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_HelpEvent_I_LRHelpEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HelpEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_HelpEvent_II_LRHelpEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HelpEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelpEvent* This = dmi_cast<HelpEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HelpEvent::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelpEvent_method_setPosition_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelpEvent* This = dmi_cast<HelpEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HelpEvent::setPosition((RPoint)args[0].getObjectVar());
    else
        This->setPosition((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HelpEvent_fields_EvtHelp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(HelpEvent::EvtHelp, flags);
    else
      HelpEvent::EvtHelp = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HelpEvent_fields_EvtHelp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtHelp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HelpEvent_MetainfoWrapper::HelpEvent_fields_EvtHelp_accessor, // read/write access to this fields
  (void*)&HelpEvent::EvtHelp // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HelpEvent_fields[] = 
{
  &HelpEvent_fields_EvtHelp,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HelpEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__args[] = 
{
  &HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_eventType,
  &HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_id,
  &HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__arg_point,
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_HelpEvent_IIINLRPoint__LRHelpEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HelpEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HelpEvent::clazzInfo(), // return type
  "_0_HelpEvent", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__args, // the arguments
  0, //arguments count
  HelpEvent_methods_HelpEvent_IIINLRPoint__LRHelpEvent__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_HelpEvent_IIINLRPoint__LRHelpEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_HelpEvent__LRHelpEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_HelpEvent__LRHelpEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_HelpEvent__LRHelpEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HelpEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HelpEvent::clazzInfo(), // return type
  "_1_HelpEvent", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_HelpEvent__LRHelpEvent__args, // the arguments
  0, //arguments count
  HelpEvent_methods_HelpEvent__LRHelpEvent__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_HelpEvent__LRHelpEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_I_LRHelpEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_HelpEvent_I_LRHelpEvent__args[] = 
{
  &HelpEvent_methods_HelpEvent_I_LRHelpEvent__arg_eventType,
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_HelpEvent_I_LRHelpEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_HelpEvent_I_LRHelpEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HelpEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HelpEvent::clazzInfo(), // return type
  "_2_HelpEvent", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_HelpEvent_I_LRHelpEvent__args, // the arguments
  0, //arguments count
  HelpEvent_methods_HelpEvent_I_LRHelpEvent__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_HelpEvent_I_LRHelpEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_II_LRHelpEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_HelpEvent_II_LRHelpEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_HelpEvent_II_LRHelpEvent__args[] = 
{
  &HelpEvent_methods_HelpEvent_II_LRHelpEvent__arg_eventType,
  &HelpEvent_methods_HelpEvent_II_LRHelpEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_HelpEvent_II_LRHelpEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_HelpEvent_II_LRHelpEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HelpEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HelpEvent::clazzInfo(), // return type
  "_3_HelpEvent", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_HelpEvent_II_LRHelpEvent__args, // the arguments
  0, //arguments count
  HelpEvent_methods_HelpEvent_II_LRHelpEvent__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_HelpEvent_II_LRHelpEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_4_getPosition", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  HelpEvent_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelpEvent_methods_setPosition_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelpEvent_methods_setPosition_INLRPoint__V_args[] = 
{
  &HelpEvent_methods_setPosition_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* HelpEvent_methods_setPosition_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelpEvent_method_setPosition_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setPosition", // alternative name of method
  -1, // altlabelHashCode
  HelpEvent_methods_setPosition_INLRPoint__V_args, // the arguments
  0, //arguments count
  HelpEvent_methods_setPosition_INLRPoint__V_exceptions, // the declared exceptions
  HelpEvent_MetainfoWrapper::HelpEvent_method_setPosition_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HelpEvent_methods[] = 
{
  &HelpEvent_method_GetClass__L_acdk_lang_RClass_,
  &HelpEvent_method_HelpEvent_IIINLRPoint__LRHelpEvent_,
  &HelpEvent_method_HelpEvent__LRHelpEvent_,
  &HelpEvent_method_HelpEvent_I_LRHelpEvent_,
  &HelpEvent_method_HelpEvent_II_LRHelpEvent_,
  &HelpEvent_method_getPosition__LRPoint_,
  &HelpEvent_method_setPosition_INLRPoint__V,
  0
};


struct HelpEvent_MetaInfoInitializer
{  HelpEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HelpEvent::clazzInfo();
    ci->fields =  _HelpEvent_fields;
    ci->methods =  _HelpEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HelpEvent_MetaInfoInitializer HelpEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
InitDialogEvent_create_array(int length)
{
  return new ObjectArrayImpl<RInitDialogEvent>(length);
}

//static
::acdk::lang::RObject
InitDialogEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InitDialogEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InitDialogEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InitDialogEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InitDialogEvent_method_InitDialogEvent__LRInitDialogEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InitDialogEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InitDialogEvent_fields_EvtInitDialog_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(InitDialogEvent::EvtInitDialog, flags);
    else
      InitDialogEvent::EvtInitDialog = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InitDialogEvent_fields_EvtInitDialog = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtInitDialog", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  InitDialogEvent_MetainfoWrapper::InitDialogEvent_fields_EvtInitDialog_accessor, // read/write access to this fields
  (void*)&InitDialogEvent::EvtInitDialog // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InitDialogEvent_fields[] = 
{
  &InitDialogEvent_fields_EvtInitDialog,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InitDialogEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InitDialogEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InitDialogEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InitDialogEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InitDialogEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InitDialogEvent_MetainfoWrapper::InitDialogEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InitDialogEvent_methods_InitDialogEvent__LRInitDialogEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InitDialogEvent_methods_InitDialogEvent__LRInitDialogEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InitDialogEvent_method_InitDialogEvent__LRInitDialogEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InitDialogEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InitDialogEvent::clazzInfo(), // return type
  "_0_InitDialogEvent", // alternative name of method
  -1, // altlabelHashCode
  InitDialogEvent_methods_InitDialogEvent__LRInitDialogEvent__args, // the arguments
  0, //arguments count
  InitDialogEvent_methods_InitDialogEvent__LRInitDialogEvent__exceptions, // the declared exceptions
  InitDialogEvent_MetainfoWrapper::InitDialogEvent_method_InitDialogEvent__LRInitDialogEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InitDialogEvent_methods[] = 
{
  &InitDialogEvent_method_GetClass__L_acdk_lang_RClass_,
  &InitDialogEvent_method_InitDialogEvent__LRInitDialogEvent_,
  0
};


struct InitDialogEvent_MetaInfoInitializer
{  InitDialogEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InitDialogEvent::clazzInfo();
    ci->fields =  _InitDialogEvent_fields;
    ci->methods =  _InitDialogEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InitDialogEvent_MetaInfoInitializer InitDialogEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
EvtHandler_create_array(int length)
{
  return new ObjectArrayImpl<REvtHandler>(length);
}

//static
::acdk::lang::RObject
EvtHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EvtHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_EvtHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EvtHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EvtHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_addPendingEvent_INLREvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::addPendingEvent((REvent)args[0].getObjectVar());
    else
        This->addPendingEvent((REvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::connect(args[0].getIntVar(), args[1].getIntVar(), (acdk::lang::dmi::RDmiDelegate)args[2].getObjectVar());
    else
        This->connect(args[0].getIntVar(), args[1].getIntVar(), (acdk::lang::dmi::RDmiDelegate)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_connectToClass_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::connectToClass(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->connectToClass(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_connectToThis_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::connectToThis(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->connectToThis(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_disconnectAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::disconnectAll();
    else
        This->disconnectAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_getClientObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EvtHandler::getClientObject();
    else
        ret = (::acdk::lang::RObject)This->getClientObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_getEvtHandlerEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->EvtHandler::getEvtHandlerEnabled();
    else
      ret = This->getEvtHandlerEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_getFreeId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = EvtHandler::getFreeId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_getNextHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EvtHandler::getNextHandler();
    else
        ret = (::acdk::lang::RObject)This->getNextHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_getPreviousHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EvtHandler::getPreviousHandler();
    else
        ret = (::acdk::lang::RObject)This->getPreviousHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_processEvent_INLREvent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->EvtHandler::processEvent((REvent)args[0].getObjectVar());
    else
      ret = This->processEvent((REvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_processPendingEvents__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::processPendingEvents();
    else
        This->processPendingEvents();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_processThreadEvent_INLREvent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->EvtHandler::processThreadEvent((REvent)args[0].getObjectVar());
    else
      ret = This->processThreadEvent((REvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_registerId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler::registerId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_setClientObject_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::setClientObject((RObject)args[0].getObjectVar());
    else
        This->setClientObject((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_setEvtHandlerEnabled_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::setEvtHandlerEnabled(args[0].getBoolVar());
    else
        This->setEvtHandlerEnabled(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_setNextHandler_INLREvtHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::setNextHandler((REvtHandler)args[0].getObjectVar());
    else
        This->setNextHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EvtHandler_method_setPreviousHandler_INLREvtHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EvtHandler* This = dmi_cast<EvtHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EvtHandler::setPreviousHandler((REvtHandler)args[0].getObjectVar());
    else
        This->setPreviousHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EvtHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_EvtHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_EvtHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_EvtHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EvtHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EvtHandler::clazzInfo(), // return type
  "_0_EvtHandler", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_EvtHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  EvtHandler_methods_EvtHandler__LREvtHandler__exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_EvtHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EvtHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_addPendingEvent_INLREvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_addPendingEvent_INLREvent__V_args[] = 
{
  &EvtHandler_methods_addPendingEvent_INLREvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_addPendingEvent_INLREvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_addPendingEvent_INLREvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPendingEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_addPendingEvent", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_addPendingEvent_INLREvent__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_addPendingEvent_INLREvent__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_addPendingEvent_INLREvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_et = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "et", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_del = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "del", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_args[] = 
{
  &EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_et,
  &EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_id,
  &EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_arg_del,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_connect_IIINLacdk_lang_dmi_RDmiDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_connect", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_connect_IIINLacdk_lang_dmi_RDmiDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_et = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "et", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_method = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "method", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_args[] = 
{
  &EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_et,
  &EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_id,
  &EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_className,
  &EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_arg_method,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_connectToClass_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connectToClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_connectToClass", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_connectToClass_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_connectToClass_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToThis_IIINLRString__V_arg_et = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "et", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToThis_IIINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_connectToThis_IIINLRString__V_arg_method = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "method", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_connectToThis_IIINLRString__V_args[] = 
{
  &EvtHandler_methods_connectToThis_IIINLRString__V_arg_et,
  &EvtHandler_methods_connectToThis_IIINLRString__V_arg_id,
  &EvtHandler_methods_connectToThis_IIINLRString__V_arg_method,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_connectToThis_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_connectToThis_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connectToThis", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_connectToThis", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_connectToThis_IIINLRString__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_connectToThis_IIINLRString__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_connectToThis_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_disconnectAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_disconnectAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_disconnectAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnectAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_disconnectAll", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_disconnectAll__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_disconnectAll__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_disconnectAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_getClientObject__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_getClientObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_getClientObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_g_getClientObject", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_getClientObject__LRObject__args, // the arguments
  0, //arguments count
  EvtHandler_methods_getClientObject__LRObject__exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_getClientObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_getEvtHandlerEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_getEvtHandlerEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_getEvtHandlerEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEvtHandlerEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_getEvtHandlerEnabled", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_getEvtHandlerEnabled__Z_args, // the arguments
  0, //arguments count
  EvtHandler_methods_getEvtHandlerEnabled__Z_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_getEvtHandlerEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_getFreeId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_getFreeId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_getFreeId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFreeId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getFreeId", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_getFreeId__I_args, // the arguments
  0, //arguments count
  EvtHandler_methods_getFreeId__I_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_getFreeId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_getNextHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_getNextHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_getNextHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_5_getNextHandler", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_getNextHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  EvtHandler_methods_getNextHandler__LREvtHandler__exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_getNextHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_getPreviousHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_getPreviousHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_getPreviousHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPreviousHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_6_getPreviousHandler", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_getPreviousHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  EvtHandler_methods_getPreviousHandler__LREvtHandler__exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_getPreviousHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_processEvent_INLREvent__Z_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_processEvent_INLREvent__Z_args[] = 
{
  &EvtHandler_methods_processEvent_INLREvent__Z_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_processEvent_INLREvent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_processEvent_INLREvent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_processEvent", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_processEvent_INLREvent__Z_args, // the arguments
  0, //arguments count
  EvtHandler_methods_processEvent_INLREvent__Z_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_processEvent_INLREvent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_processPendingEvents__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_processPendingEvents__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_processPendingEvents__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processPendingEvents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_processPendingEvents", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_processPendingEvents__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_processPendingEvents__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_processPendingEvents__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_processThreadEvent_INLREvent__Z_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_processThreadEvent_INLREvent__Z_args[] = 
{
  &EvtHandler_methods_processThreadEvent_INLREvent__Z_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_processThreadEvent_INLREvent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_processThreadEvent_INLREvent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processThreadEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_processThreadEvent", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_processThreadEvent_INLREvent__Z_args, // the arguments
  0, //arguments count
  EvtHandler_methods_processThreadEvent_INLREvent__Z_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_processThreadEvent_INLREvent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_registerId_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_registerId_I_V_args[] = 
{
  &EvtHandler_methods_registerId_I_V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_registerId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_registerId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_registerId", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_registerId_I_V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_registerId_I_V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_registerId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_setClientObject_INLRObject__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_setClientObject_INLRObject__V_args[] = 
{
  &EvtHandler_methods_setClientObject_INLRObject__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_setClientObject_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_setClientObject_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClientObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setClientObject", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_setClientObject_INLRObject__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_setClientObject_INLRObject__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_setClientObject_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_setEvtHandlerEnabled_Z_V_arg_enabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_setEvtHandlerEnabled_Z_V_args[] = 
{
  &EvtHandler_methods_setEvtHandlerEnabled_Z_V_arg_enabled,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_setEvtHandlerEnabled_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_setEvtHandlerEnabled_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEvtHandlerEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setEvtHandlerEnabled", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_setEvtHandlerEnabled_Z_V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_setEvtHandlerEnabled_Z_V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_setEvtHandlerEnabled_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_setNextHandler_INLREvtHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_setNextHandler_INLREvtHandler__V_args[] = 
{
  &EvtHandler_methods_setNextHandler_INLREvtHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_setNextHandler_INLREvtHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_setNextHandler_INLREvtHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNextHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setNextHandler", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_setNextHandler_INLREvtHandler__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_setNextHandler_INLREvtHandler__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_setNextHandler_INLREvtHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_args[] = 
{
  &EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EvtHandler_method_setPreviousHandler_INLREvtHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPreviousHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setPreviousHandler", // alternative name of method
  -1, // altlabelHashCode
  EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_args, // the arguments
  0, //arguments count
  EvtHandler_methods_setPreviousHandler_INLREvtHandler__V_exceptions, // the declared exceptions
  EvtHandler_MetainfoWrapper::EvtHandler_method_setPreviousHandler_INLREvtHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EvtHandler_methods[] = 
{
  &EvtHandler_method_EvtHandler__LREvtHandler_,
  &EvtHandler_method_GetClass__L_acdk_lang_RClass_,
  &EvtHandler_method_addPendingEvent_INLREvent__V,
  &EvtHandler_method_connect_IIINLacdk_lang_dmi_RDmiDelegate__V,
  &EvtHandler_method_connectToClass_IIINLRString_INLRString__V,
  &EvtHandler_method_connectToThis_IIINLRString__V,
  &EvtHandler_method_disconnectAll__V,
  &EvtHandler_method_getClientObject__LRObject_,
  &EvtHandler_method_getEvtHandlerEnabled__Z,
  &EvtHandler_method_getFreeId__I,
  &EvtHandler_method_getNextHandler__LREvtHandler_,
  &EvtHandler_method_getPreviousHandler__LREvtHandler_,
  &EvtHandler_method_processEvent_INLREvent__Z,
  &EvtHandler_method_processPendingEvents__V,
  &EvtHandler_method_processThreadEvent_INLREvent__Z,
  &EvtHandler_method_registerId_I_V,
  &EvtHandler_method_setClientObject_INLRObject__V,
  &EvtHandler_method_setEvtHandlerEnabled_Z_V,
  &EvtHandler_method_setNextHandler_INLREvtHandler__V,
  &EvtHandler_method_setPreviousHandler_INLREvtHandler__V,
  0
};


struct EvtHandler_MetaInfoInitializer
{  EvtHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EvtHandler::clazzInfo();
    ci->fields =  _EvtHandler_fields;
    ci->methods =  _EvtHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EvtHandler_MetaInfoInitializer EvtHandler_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

