// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../ide.h"
#include "../Config.h"
#include "../FrameLayout.h"
#include "../StyledTextCtrl.h"
#include "../TextOutputCtrl.h"
#include "../ide.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
BarDimHandlerBase_create_array(int length)
{
  return new ObjectArrayImpl<RBarDimHandlerBase>(length);
}

//static
::acdk::lang::RObject
BarDimHandlerBase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BarDimHandlerBase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarDimHandlerBase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BarDimHandlerBase::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BarDimHandlerBase_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarDimHandlerBase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarDimHandlerBase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarDimHandlerBase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BarDimHandlerBase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BarDimHandlerBase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BarDimHandlerBase_MetainfoWrapper::BarDimHandlerBase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BarDimHandlerBase_methods[] = 
{
  &BarDimHandlerBase_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BarDimHandlerBase_MetaInfoInitializer
{  BarDimHandlerBase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BarDimHandlerBase::clazzInfo();
    ci->fields =  _BarDimHandlerBase_fields;
    ci->methods =  _BarDimHandlerBase_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BarDimHandlerBase_MetaInfoInitializer BarDimHandlerBase_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
DynToolBarDimHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDynToolBarDimHandler>(length);
}

//static
::acdk::lang::RObject
DynToolBarDimHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DynToolBarDimHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynToolBarDimHandler_method_DynToolBarDimHandler__LRDynToolBarDimHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynToolBarDimHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynToolBarDimHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DynToolBarDimHandler::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DynToolBarDimHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynToolBarDimHandler_methods_DynToolBarDimHandler__LRDynToolBarDimHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DynToolBarDimHandler_methods_DynToolBarDimHandler__LRDynToolBarDimHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynToolBarDimHandler_method_DynToolBarDimHandler__LRDynToolBarDimHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DynToolBarDimHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynToolBarDimHandler::clazzInfo(), // return type
  "_0_DynToolBarDimHandler", // alternative name of method
  -1, // altlabelHashCode
  DynToolBarDimHandler_methods_DynToolBarDimHandler__LRDynToolBarDimHandler__args, // the arguments
  0, //arguments count
  DynToolBarDimHandler_methods_DynToolBarDimHandler__LRDynToolBarDimHandler__exceptions, // the declared exceptions
  DynToolBarDimHandler_MetainfoWrapper::DynToolBarDimHandler_method_DynToolBarDimHandler__LRDynToolBarDimHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynToolBarDimHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DynToolBarDimHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynToolBarDimHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DynToolBarDimHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DynToolBarDimHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DynToolBarDimHandler_MetainfoWrapper::DynToolBarDimHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DynToolBarDimHandler_methods[] = 
{
  &DynToolBarDimHandler_method_DynToolBarDimHandler__LRDynToolBarDimHandler_,
  &DynToolBarDimHandler_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DynToolBarDimHandler_MetaInfoInitializer
{  DynToolBarDimHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DynToolBarDimHandler::clazzInfo();
    ci->fields =  _DynToolBarDimHandler_fields;
    ci->methods =  _DynToolBarDimHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DynToolBarDimHandler_MetaInfoInitializer DynToolBarDimHandler_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
DimInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDimInfo>(length);
}

//static
::acdk::lang::RObject
DimInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DimInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DimInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< bool>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc), ::acdk::lang::dmi::castTo< RBarDimHandlerBase>(args[9], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_DimInfo_IIIIII_LRDimInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DimInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_DimInfo_IIIIIIZ_LRDimInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DimInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< bool>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_DimInfo_IIIIIIZI_LRDimInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DimInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< bool>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_DimInfo_IIIIIIZII_LRDimInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DimInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< bool>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DimInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DimInfo::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DimInfo_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dh_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dh_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dv_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dv_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_f_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_f_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_isFixed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isFixed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_horizGap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "horizGap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_vertGap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "vertGap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dimHandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dimHandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarDimHandlerBase::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__args[] = 
{
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dh_x,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dh_y,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dv_x,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dv_y,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_f_x,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_f_y,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_isFixed,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_horizGap,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_vertGap,
  &DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__arg_dimHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DimInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DimInfo::clazzInfo(), // return type
  "_0_DimInfo", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__args, // the arguments
  0, //arguments count
  DimInfo_methods_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dh_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dh_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dv_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dv_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_f_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_f_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_DimInfo_IIIIII_LRDimInfo__args[] = 
{
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dh_x,
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dh_y,
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dv_x,
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_dv_y,
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_f_x,
  &DimInfo_methods_DimInfo_IIIIII_LRDimInfo__arg_f_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_DimInfo_IIIIII_LRDimInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_DimInfo_IIIIII_LRDimInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DimInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DimInfo::clazzInfo(), // return type
  "_1_DimInfo", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_DimInfo_IIIIII_LRDimInfo__args, // the arguments
  0, //arguments count
  DimInfo_methods_DimInfo_IIIIII_LRDimInfo__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_DimInfo_IIIIII_LRDimInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dh_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dh_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dv_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dv_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_f_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_f_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_isFixed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isFixed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__args[] = 
{
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dh_x,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dh_y,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dv_x,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_dv_y,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_f_x,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_f_y,
  &DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__arg_isFixed,
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_DimInfo_IIIIIIZ_LRDimInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DimInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DimInfo::clazzInfo(), // return type
  "_2_DimInfo", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__args, // the arguments
  0, //arguments count
  DimInfo_methods_DimInfo_IIIIIIZ_LRDimInfo__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_DimInfo_IIIIIIZ_LRDimInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dh_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dh_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dv_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dv_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_f_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_f_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_isFixed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isFixed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_horizGap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "horizGap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__args[] = 
{
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dh_x,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dh_y,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dv_x,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_dv_y,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_f_x,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_f_y,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_isFixed,
  &DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__arg_horizGap,
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_DimInfo_IIIIIIZI_LRDimInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DimInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DimInfo::clazzInfo(), // return type
  "_3_DimInfo", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__args, // the arguments
  0, //arguments count
  DimInfo_methods_DimInfo_IIIIIIZI_LRDimInfo__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_DimInfo_IIIIIIZI_LRDimInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dh_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dh_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dh_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dv_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dv_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dv_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_f_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_f_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f_y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_isFixed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isFixed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_horizGap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "horizGap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_vertGap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "vertGap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__args[] = 
{
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dh_x,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dh_y,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dv_x,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_dv_y,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_f_x,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_f_y,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_isFixed,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_horizGap,
  &DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__arg_vertGap,
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_DimInfo_IIIIIIZII_LRDimInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DimInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DimInfo::clazzInfo(), // return type
  "_4_DimInfo", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__args, // the arguments
  0, //arguments count
  DimInfo_methods_DimInfo_IIIIIIZII_LRDimInfo__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_DimInfo_IIIIIIZII_LRDimInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DimInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DimInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DimInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DimInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DimInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DimInfo_MetainfoWrapper::DimInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DimInfo_methods[] = 
{
  &DimInfo_method_DimInfo_IIIIIIZIIINLRBarDimHandlerBase__LRDimInfo_,
  &DimInfo_method_DimInfo_IIIIII_LRDimInfo_,
  &DimInfo_method_DimInfo_IIIIIIZ_LRDimInfo_,
  &DimInfo_method_DimInfo_IIIIIIZI_LRDimInfo_,
  &DimInfo_method_DimInfo_IIIIIIZII_LRDimInfo_,
  &DimInfo_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DimInfo_MetaInfoInitializer
{  DimInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DimInfo::clazzInfo();
    ci->fields =  _DimInfo_fields;
    ci->methods =  _DimInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DimInfo_MetaInfoInitializer DimInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
BarInfo_create_array(int length)
{
  return new ObjectArrayImpl<RBarInfo>(length);
}

//static
::acdk::lang::RObject
BarInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BarInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BarInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_getBarWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BarInfo::getBarWindow();
    else
        ret = (::acdk::lang::RObject)This->getBarWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_getBounds__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BarInfo::getBounds();
    else
        ret = (::acdk::lang::RObject)This->getBounds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_getBoundsInParent__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BarInfo::getBoundsInParent();
    else
        ret = (::acdk::lang::RObject)This->getBoundsInParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BarInfo::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_getState__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BarInfo::getState();
    else
      ret = This->getState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_isExpanded__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BarInfo::isExpanded();
    else
      ret = This->isExpanded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_isFixed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BarInfo::isFixed();
    else
      ret = This->isFixed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_setBarWindow_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BarInfo::setBarWindow(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    else
        This->setBarWindow(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_setBounds_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BarInfo::setBounds(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    else
        This->setBounds(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_setBoundsInParent_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BarInfo::setBoundsInParent(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    else
        This->setBoundsInParent(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BarInfo::setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BarInfo_method_setState_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BarInfo* This = dmi_cast<BarInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BarInfo::setState(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setState(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BarInfo_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BarInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_getBarWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_getBarWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_getBarWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBarWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_a_getBarWindow", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_getBarWindow__LRWindow__args, // the arguments
  0, //arguments count
  BarInfo_methods_getBarWindow__LRWindow__exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_getBarWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_getBounds__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_getBounds__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_getBounds__LRRect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBounds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_4_getBounds", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_getBounds__LRRect__args, // the arguments
  0, //arguments count
  BarInfo_methods_getBounds__LRRect__exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_getBounds__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_getBoundsInParent__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_getBoundsInParent__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_getBoundsInParent__LRRect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoundsInParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_6_getBoundsInParent", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_getBoundsInParent__LRRect__args, // the arguments
  0, //arguments count
  BarInfo_methods_getBoundsInParent__LRRect__exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_getBoundsInParent__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_getName__LRString__args, // the arguments
  0, //arguments count
  BarInfo_methods_getName__LRString__exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_getState__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_getState__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_getState__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getState", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_getState__I_args, // the arguments
  0, //arguments count
  BarInfo_methods_getState__I_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_getState__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_isExpanded__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_isExpanded__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_isExpanded__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isExpanded", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_isExpanded__Z_args, // the arguments
  0, //arguments count
  BarInfo_methods_isExpanded__Z_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_isExpanded__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_isFixed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_isFixed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_isFixed__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFixed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_isFixed", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_isFixed__Z_args, // the arguments
  0, //arguments count
  BarInfo_methods_isFixed__Z_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_isFixed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BarInfo_methods_setBarWindow_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_setBarWindow_INLRWindow__V_args[] = 
{
  &BarInfo_methods_setBarWindow_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_setBarWindow_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_setBarWindow_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBarWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setBarWindow", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_setBarWindow_INLRWindow__V_args, // the arguments
  0, //arguments count
  BarInfo_methods_setBarWindow_INLRWindow__V_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_setBarWindow_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BarInfo_methods_setBounds_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_setBounds_INLRRect__V_args[] = 
{
  &BarInfo_methods_setBounds_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_setBounds_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_setBounds_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBounds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setBounds", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_setBounds_INLRRect__V_args, // the arguments
  0, //arguments count
  BarInfo_methods_setBounds_INLRRect__V_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_setBounds_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BarInfo_methods_setBoundsInParent_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_setBoundsInParent_INLRRect__V_args[] = 
{
  &BarInfo_methods_setBoundsInParent_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_setBoundsInParent_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_setBoundsInParent_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoundsInParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setBoundsInParent", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_setBoundsInParent_INLRRect__V_args, // the arguments
  0, //arguments count
  BarInfo_methods_setBoundsInParent_INLRRect__V_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_setBoundsInParent_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BarInfo_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_setName_INLRString__V_args[] = 
{
  &BarInfo_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setName", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  BarInfo_methods_setName_INLRString__V_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BarInfo_methods_setState_I_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BarInfo_methods_setState_I_V_args[] = 
{
  &BarInfo_methods_setState_I_V_arg_state,
  0
};

::acdk::lang::dmi::ClazzInfo* BarInfo_methods_setState_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BarInfo_method_setState_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setState", // alternative name of method
  -1, // altlabelHashCode
  BarInfo_methods_setState_I_V_args, // the arguments
  0, //arguments count
  BarInfo_methods_setState_I_V_exceptions, // the declared exceptions
  BarInfo_MetainfoWrapper::BarInfo_method_setState_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BarInfo_methods[] = 
{
  &BarInfo_method_GetClass__L_acdk_lang_RClass_,
  &BarInfo_method_getBarWindow__LRWindow_,
  &BarInfo_method_getBounds__LRRect_,
  &BarInfo_method_getBoundsInParent__LRRect_,
  &BarInfo_method_getName__LRString_,
  &BarInfo_method_getState__I,
  &BarInfo_method_isExpanded__Z,
  &BarInfo_method_isFixed__Z,
  &BarInfo_method_setBarWindow_INLRWindow__V,
  &BarInfo_method_setBounds_INLRRect__V,
  &BarInfo_method_setBoundsInParent_INLRRect__V,
  &BarInfo_method_setName_INLRString__V,
  &BarInfo_method_setState_I_V,
  0
};


struct BarInfo_MetaInfoInitializer
{  BarInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BarInfo::clazzInfo();
    ci->fields =  _BarInfo_fields;
    ci->methods =  _BarInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BarInfo_MetaInfoInitializer BarInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
RowInfo_create_array(int length)
{
  return new ObjectArrayImpl<RRowInfo>(length);
}

//static
::acdk::lang::RObject
RowInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RowInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RowInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RowInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RowInfo_method_getFirstBar__LRBarInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RowInfo* This = dmi_cast<RowInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RowInfo::getFirstBar();
    else
        ret = (::acdk::lang::RObject)This->getFirstBar();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RowInfo_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RowInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RowInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RowInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RowInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RowInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RowInfo_MetainfoWrapper::RowInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RowInfo_methods_getFirstBar__LRBarInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RowInfo_methods_getFirstBar__LRBarInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RowInfo_method_getFirstBar__LRBarInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo(), // return type
  "_0_getFirstBar", // alternative name of method
  -1, // altlabelHashCode
  RowInfo_methods_getFirstBar__LRBarInfo__args, // the arguments
  0, //arguments count
  RowInfo_methods_getFirstBar__LRBarInfo__exceptions, // the declared exceptions
  RowInfo_MetainfoWrapper::RowInfo_method_getFirstBar__LRBarInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RowInfo_methods[] = 
{
  &RowInfo_method_GetClass__L_acdk_lang_RClass_,
  &RowInfo_method_getFirstBar__LRBarInfo_,
  0
};


struct RowInfo_MetaInfoInitializer
{  RowInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RowInfo::clazzInfo();
    ci->fields =  _RowInfo_fields;
    ci->methods =  _RowInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RowInfo_MetaInfoInitializer RowInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
DockPane_create_array(int length)
{
  return new ObjectArrayImpl<RDockPane>(length);
}

//static
::acdk::lang::RObject
DockPane_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DockPane_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DockPane::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_calcLengthRatios_INLRRowInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::calcLengthRatios(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
        This->calcLengthRatios(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_contractBar_INLRBarInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::contractBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
        This->contractBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_doInsertBar_INLRBarInfo_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::doInsertBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->doInsertBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_expandBar_INLRBarInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::expandBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
        This->expandBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_frameToPane_INOUTIINOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::frameToPane(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    else
        This->frameToPane(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_frameToPane_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::frameToPane(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    else
        This->frameToPane(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getMinimalRowHeight_INLRRowInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getMinimalRowHeight(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->getMinimalRowHeight(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getNotFixedBarsCount_INLRRowInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getNotFixedBarsCount(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->getNotFixedBarsCount(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getRow_I_LRRowInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DockPane::getRow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getRow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getRowAt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getRowAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getRowAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getRowAt_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getRowAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getRowAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getRowIndex_INLRRowInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getRowIndex(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->getRowIndex(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_getRowY_INLRRowInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::getRowY(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->getRowY(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_hasNotFixedBarsLeft_INLRBarInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::hasNotFixedBarsLeft(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
      ret = This->hasNotFixedBarsLeft(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_hasNotFixedBarsRight_INLRBarInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::hasNotFixedBarsRight(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
      ret = This->hasNotFixedBarsRight(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_hasNotFixedRowsAbove_INLRRowInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::hasNotFixedRowsAbove(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->hasNotFixedRowsAbove(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_hasNotFixedRowsBelow_INLRRowInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::hasNotFixedRowsBelow(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
      ret = This->hasNotFixedRowsBelow(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_hasPoint_INLRPoint_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::hasPoint(::acdk::lang::dmi::castTo< RPoint>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    else
      ret = This->hasPoint(::acdk::lang::dmi::castTo< RPoint>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_initLinksForRow_INLRRowInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::initLinksForRow(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
        This->initLinksForRow(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_initLinksForRows__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::initLinksForRows();
    else
        This->initLinksForRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_isFixedSize_INLRBarInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DockPane::isFixedSize(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
      ret = This->isFixedSize(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_paneToFrame_INOUTIINOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::paneToFrame(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    else
        This->paneToFrame(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_paneToFrame_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::paneToFrame(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    else
        This->paneToFrame(::acdk::lang::dmi::castTo< RRect>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_recalcRowLayout_INLRRowInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::recalcRowLayout(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
        This->recalcRowLayout(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_setRowHeight_INLRRowInfo_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::setRowHeight(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setRowHeight(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DockPane_method_syncRowFlags_INLRRowInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DockPane* This = dmi_cast<DockPane>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DockPane::syncRowFlags(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    else
        This->syncRowFlags(::acdk::lang::dmi::castTo< RRowInfo>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DockPane_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DockPane_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_calcLengthRatios_INLRRowInfo__V_arg_pInRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pInRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_calcLengthRatios_INLRRowInfo__V_args[] = 
{
  &DockPane_methods_calcLengthRatios_INLRRowInfo__V_arg_pInRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_calcLengthRatios_INLRRowInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_calcLengthRatios_INLRRowInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcLengthRatios", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_calcLengthRatios", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_calcLengthRatios_INLRRowInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_calcLengthRatios_INLRRowInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_calcLengthRatios_INLRRowInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_contractBar_INLRBarInfo__V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_contractBar_INLRBarInfo__V_args[] = 
{
  &DockPane_methods_contractBar_INLRBarInfo__V_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_contractBar_INLRBarInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_contractBar_INLRBarInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contractBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_contractBar", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_contractBar_INLRBarInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_contractBar_INLRBarInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_contractBar_INLRBarInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_doInsertBar_INLRBarInfo_I_V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_doInsertBar_INLRBarInfo_I_V_arg_rowNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rowNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_doInsertBar_INLRBarInfo_I_V_args[] = 
{
  &DockPane_methods_doInsertBar_INLRBarInfo_I_V_arg_pBar,
  &DockPane_methods_doInsertBar_INLRBarInfo_I_V_arg_rowNo,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_doInsertBar_INLRBarInfo_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_doInsertBar_INLRBarInfo_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doInsertBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_doInsertBar", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_doInsertBar_INLRBarInfo_I_V_args, // the arguments
  0, //arguments count
  DockPane_methods_doInsertBar_INLRBarInfo_I_V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_doInsertBar_INLRBarInfo_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_expandBar_INLRBarInfo__V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_expandBar_INLRBarInfo__V_args[] = 
{
  &DockPane_methods_expandBar_INLRBarInfo__V_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_expandBar_INLRBarInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_expandBar_INLRBarInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expandBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_expandBar", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_expandBar_INLRBarInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_expandBar_INLRBarInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_expandBar_INLRBarInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_frameToPane_INOUTIINOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_frameToPane_INOUTIINOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_frameToPane_INOUTIINOUTI_V_args[] = 
{
  &DockPane_methods_frameToPane_INOUTIINOUTI_V_arg_x,
  &DockPane_methods_frameToPane_INOUTIINOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_frameToPane_INOUTIINOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_frameToPane_INOUTIINOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "frameToPane", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_frameToPane", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_frameToPane_INOUTIINOUTI_V_args, // the arguments
  0, //arguments count
  DockPane_methods_frameToPane_INOUTIINOUTI_V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_frameToPane_INOUTIINOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_frameToPane_INLRRect__V_arg_pRect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_frameToPane_INLRRect__V_args[] = 
{
  &DockPane_methods_frameToPane_INLRRect__V_arg_pRect,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_frameToPane_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_frameToPane_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "frameToPane", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_frameToPane", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_frameToPane_INLRRect__V_args, // the arguments
  0, //arguments count
  DockPane_methods_frameToPane_INLRRect__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_frameToPane_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_args[] = 
{
  &DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getMinimalRowHeight_INLRRowInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimalRowHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getMinimalRowHeight", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_args, // the arguments
  0, //arguments count
  DockPane_methods_getMinimalRowHeight_INLRRowInfo__I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getMinimalRowHeight_INLRRowInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_args[] = 
{
  &DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getNotFixedBarsCount_INLRRowInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNotFixedBarsCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getNotFixedBarsCount", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_args, // the arguments
  0, //arguments count
  DockPane_methods_getNotFixedBarsCount_INLRRowInfo__I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getNotFixedBarsCount_INLRRowInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRow_I_LRRowInfo__arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getRow_I_LRRowInfo__args[] = 
{
  &DockPane_methods_getRow_I_LRRowInfo__arg_row,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getRow_I_LRRowInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getRow_I_LRRowInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo(), // return type
  "_0_getRow", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getRow_I_LRRowInfo__args, // the arguments
  0, //arguments count
  DockPane_methods_getRow_I_LRRowInfo__exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getRow_I_LRRowInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRowAt_I_I_arg_paneY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paneY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getRowAt_I_I_args[] = 
{
  &DockPane_methods_getRowAt_I_I_arg_paneY,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getRowAt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getRowAt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRowAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getRowAt", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getRowAt_I_I_args, // the arguments
  0, //arguments count
  DockPane_methods_getRowAt_I_I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getRowAt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRowAt_II_I_arg_upperY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "upperY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRowAt_II_I_arg_lowerY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lowerY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getRowAt_II_I_args[] = 
{
  &DockPane_methods_getRowAt_II_I_arg_upperY,
  &DockPane_methods_getRowAt_II_I_arg_lowerY,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getRowAt_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getRowAt_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRowAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getRowAt", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getRowAt_II_I_args, // the arguments
  0, //arguments count
  DockPane_methods_getRowAt_II_I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getRowAt_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRowIndex_INLRRowInfo__I_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getRowIndex_INLRRowInfo__I_args[] = 
{
  &DockPane_methods_getRowIndex_INLRRowInfo__I_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getRowIndex_INLRRowInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getRowIndex_INLRRowInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRowIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getRowIndex", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getRowIndex_INLRRowInfo__I_args, // the arguments
  0, //arguments count
  DockPane_methods_getRowIndex_INLRRowInfo__I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getRowIndex_INLRRowInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_getRowY_INLRRowInfo__I_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_getRowY_INLRRowInfo__I_args[] = 
{
  &DockPane_methods_getRowY_INLRRowInfo__I_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_getRowY_INLRRowInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_getRowY_INLRRowInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRowY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getRowY", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_getRowY_INLRRowInfo__I_args, // the arguments
  0, //arguments count
  DockPane_methods_getRowY_INLRRowInfo__I_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_getRowY_INLRRowInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_args[] = 
{
  &DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_hasNotFixedBarsLeft_INLRBarInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNotFixedBarsLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_hasNotFixedBarsLeft", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_args, // the arguments
  0, //arguments count
  DockPane_methods_hasNotFixedBarsLeft_INLRBarInfo__Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_hasNotFixedBarsLeft_INLRBarInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_args[] = 
{
  &DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_hasNotFixedBarsRight_INLRBarInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNotFixedBarsRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_hasNotFixedBarsRight", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_args, // the arguments
  0, //arguments count
  DockPane_methods_hasNotFixedBarsRight_INLRBarInfo__Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_hasNotFixedBarsRight_INLRBarInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_args[] = 
{
  &DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_hasNotFixedRowsAbove_INLRRowInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNotFixedRowsAbove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_hasNotFixedRowsAbove", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_args, // the arguments
  0, //arguments count
  DockPane_methods_hasNotFixedRowsAbove_INLRRowInfo__Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_hasNotFixedRowsAbove_INLRRowInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_args[] = 
{
  &DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_hasNotFixedRowsBelow_INLRRowInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNotFixedRowsBelow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_hasNotFixedRowsBelow", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_args, // the arguments
  0, //arguments count
  DockPane_methods_hasNotFixedRowsBelow_INLRRowInfo__Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_hasNotFixedRowsBelow_INLRRowInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_hasPoint_INLRPoint_IIII_Z_args[] = 
{
  &DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_pos,
  &DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_x,
  &DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_y,
  &DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_width,
  &DockPane_methods_hasPoint_INLRPoint_IIII_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_hasPoint_INLRPoint_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_hasPoint_INLRPoint_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_hasPoint", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_hasPoint_INLRPoint_IIII_Z_args, // the arguments
  0, //arguments count
  DockPane_methods_hasPoint_INLRPoint_IIII_Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_hasPoint_INLRPoint_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_initLinksForRow_INLRRowInfo__V_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_initLinksForRow_INLRRowInfo__V_args[] = 
{
  &DockPane_methods_initLinksForRow_INLRRowInfo__V_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_initLinksForRow_INLRRowInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_initLinksForRow_INLRRowInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initLinksForRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_initLinksForRow", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_initLinksForRow_INLRRowInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_initLinksForRow_INLRRowInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_initLinksForRow_INLRRowInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_initLinksForRows__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_initLinksForRows__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_initLinksForRows__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initLinksForRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_initLinksForRows", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_initLinksForRows__V_args, // the arguments
  0, //arguments count
  DockPane_methods_initLinksForRows__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_initLinksForRows__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_isFixedSize_INLRBarInfo__Z_arg_pInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_isFixedSize_INLRBarInfo__Z_args[] = 
{
  &DockPane_methods_isFixedSize_INLRBarInfo__Z_arg_pInfo,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_isFixedSize_INLRBarInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_isFixedSize_INLRBarInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFixedSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isFixedSize", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_isFixedSize_INLRBarInfo__Z_args, // the arguments
  0, //arguments count
  DockPane_methods_isFixedSize_INLRBarInfo__Z_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_isFixedSize_INLRBarInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_paneToFrame_INOUTIINOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_paneToFrame_INOUTIINOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_paneToFrame_INOUTIINOUTI_V_args[] = 
{
  &DockPane_methods_paneToFrame_INOUTIINOUTI_V_arg_x,
  &DockPane_methods_paneToFrame_INOUTIINOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_paneToFrame_INOUTIINOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_paneToFrame_INOUTIINOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paneToFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_paneToFrame", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_paneToFrame_INOUTIINOUTI_V_args, // the arguments
  0, //arguments count
  DockPane_methods_paneToFrame_INOUTIINOUTI_V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_paneToFrame_INOUTIINOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_paneToFrame_INLRRect__V_arg_pRect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_paneToFrame_INLRRect__V_args[] = 
{
  &DockPane_methods_paneToFrame_INLRRect__V_arg_pRect,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_paneToFrame_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_paneToFrame_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paneToFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_paneToFrame", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_paneToFrame_INLRRect__V_args, // the arguments
  0, //arguments count
  DockPane_methods_paneToFrame_INLRRect__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_paneToFrame_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_recalcRowLayout_INLRRowInfo__V_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_recalcRowLayout_INLRRowInfo__V_args[] = 
{
  &DockPane_methods_recalcRowLayout_INLRRowInfo__V_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_recalcRowLayout_INLRRowInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_recalcRowLayout_INLRRowInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcRowLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_recalcRowLayout", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_recalcRowLayout_INLRRowInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_recalcRowLayout_INLRRowInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_recalcRowLayout_INLRRowInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_setRowHeight_INLRRowInfo_I_V_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_setRowHeight_INLRRowInfo_I_V_arg_newHeight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newHeight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_setRowHeight_INLRRowInfo_I_V_args[] = 
{
  &DockPane_methods_setRowHeight_INLRRowInfo_I_V_arg_pRow,
  &DockPane_methods_setRowHeight_INLRRowInfo_I_V_arg_newHeight,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_setRowHeight_INLRRowInfo_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_setRowHeight_INLRRowInfo_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRowHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setRowHeight", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_setRowHeight_INLRRowInfo_I_V_args, // the arguments
  0, //arguments count
  DockPane_methods_setRowHeight_INLRRowInfo_I_V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_setRowHeight_INLRRowInfo_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DockPane_methods_syncRowFlags_INLRRowInfo__V_arg_pRow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pRow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRowInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DockPane_methods_syncRowFlags_INLRRowInfo__V_args[] = 
{
  &DockPane_methods_syncRowFlags_INLRRowInfo__V_arg_pRow,
  0
};

::acdk::lang::dmi::ClazzInfo* DockPane_methods_syncRowFlags_INLRRowInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DockPane_method_syncRowFlags_INLRRowInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "syncRowFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_syncRowFlags", // alternative name of method
  -1, // altlabelHashCode
  DockPane_methods_syncRowFlags_INLRRowInfo__V_args, // the arguments
  0, //arguments count
  DockPane_methods_syncRowFlags_INLRRowInfo__V_exceptions, // the declared exceptions
  DockPane_MetainfoWrapper::DockPane_method_syncRowFlags_INLRRowInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DockPane_methods[] = 
{
  &DockPane_method_GetClass__L_acdk_lang_RClass_,
  &DockPane_method_calcLengthRatios_INLRRowInfo__V,
  &DockPane_method_contractBar_INLRBarInfo__V,
  &DockPane_method_doInsertBar_INLRBarInfo_I_V,
  &DockPane_method_expandBar_INLRBarInfo__V,
  &DockPane_method_frameToPane_INOUTIINOUTI_V,
  &DockPane_method_frameToPane_INLRRect__V,
  &DockPane_method_getMinimalRowHeight_INLRRowInfo__I,
  &DockPane_method_getNotFixedBarsCount_INLRRowInfo__I,
  &DockPane_method_getRow_I_LRRowInfo_,
  &DockPane_method_getRowAt_I_I,
  &DockPane_method_getRowAt_II_I,
  &DockPane_method_getRowIndex_INLRRowInfo__I,
  &DockPane_method_getRowY_INLRRowInfo__I,
  &DockPane_method_hasNotFixedBarsLeft_INLRBarInfo__Z,
  &DockPane_method_hasNotFixedBarsRight_INLRBarInfo__Z,
  &DockPane_method_hasNotFixedRowsAbove_INLRRowInfo__Z,
  &DockPane_method_hasNotFixedRowsBelow_INLRRowInfo__Z,
  &DockPane_method_hasPoint_INLRPoint_IIII_Z,
  &DockPane_method_initLinksForRow_INLRRowInfo__V,
  &DockPane_method_initLinksForRows__V,
  &DockPane_method_isFixedSize_INLRBarInfo__Z,
  &DockPane_method_paneToFrame_INOUTIINOUTI_V,
  &DockPane_method_paneToFrame_INLRRect__V,
  &DockPane_method_recalcRowLayout_INLRRowInfo__V,
  &DockPane_method_setRowHeight_INLRRowInfo_I_V,
  &DockPane_method_syncRowFlags_INLRRowInfo__V,
  0
};


struct DockPane_MetaInfoInitializer
{  DockPane_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DockPane::clazzInfo();
    ci->fields =  _DockPane_fields;
    ci->methods =  _DockPane_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DockPane_MetaInfoInitializer DockPane_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
FrameLayout_create_array(int length)
{
  return new ObjectArrayImpl<RFrameLayout>(length);
}

//static
::acdk::lang::RObject
FrameLayout_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FrameLayout_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FrameLayout(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RWindow>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_FrameLayout_INLRWindow__LRFrameLayout__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FrameLayout(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FrameLayout(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RWindow>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FrameLayout::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_activate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::activate();
    else
        This->activate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc), ::acdk::lang::dmi::castTo< bool>(args[7], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc), ::acdk::lang::dmi::castTo< bool>(args[7], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc));
    else
        This->addBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< RDimInfo>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addPlugin_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::addPlugin(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->addPlugin(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_addPlugins_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::addPlugins(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->addPlugins(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_applyBarProperties_INLRBarInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::applyBarProperties(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
        This->applyBarProperties(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_deactivate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::deactivate();
    else
        This->deactivate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_destroyBarWindows__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::destroyBarWindows();
    else
        This->destroyBarWindows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_enableFloating_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::enableFloating(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->enableFloating(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_enableFloating__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::enableFloating();
    else
        This->enableFloating();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_findBarByName_INLRString__LRBarInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::findBarByName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findBarByName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_findBarByWindow_INLRWindow__LRBarInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::findBarByWindow(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findBarByWindow(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getClientHeight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::getClientHeight();
    else
      ret = This->getClientHeight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getClientRect__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::getClientRect();
    else
        ret = (::acdk::lang::RObject)This->getClientRect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getClientWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::getClientWidth();
    else
      ret = This->getClientWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getFrameClient__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::getFrameClient();
    else
        ret = (::acdk::lang::RObject)This->getFrameClient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getPane_I_LRDockPane__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::getPane(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getPane(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getPanesArray__LRDockPaneArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::getPanesArray();
    else
        ret = (::acdk::lang::RObject)This->getPanesArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_getParentFrame__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FrameLayout::getParentFrame();
    else
        ret = (::acdk::lang::RObject)This->getParentFrame();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_hasTopPlugin__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::hasTopPlugin();
    else
      ret = This->hasTopPlugin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_hideBarWindows__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::hideBarWindows();
    else
        This->hideBarWindows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_inverseVisibility_INLRBarInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::inverseVisibility(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
        This->inverseVisibility(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_popAllPlugins__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::popAllPlugins();
    else
        This->popAllPlugins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_popPlugin__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::popPlugin();
    else
        This->popPlugin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_pushDefaultPlugins__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::pushDefaultPlugins();
    else
        This->pushDefaultPlugins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_recalcLayout_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::recalcLayout(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->recalcLayout(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_recalcLayout__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::recalcLayout();
    else
        This->recalcLayout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc), ::acdk::lang::dmi::castTo< RDockPane>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    else
      ret = This->redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc), ::acdk::lang::dmi::castTo< RDockPane>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_redockBar_INLRBarInfo_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc));
    else
      ret = This->redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FrameLayout::redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc), ::acdk::lang::dmi::castTo< RDockPane>(args[2], dc));
    else
      ret = This->redockBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< RRect>(args[1], dc), ::acdk::lang::dmi::castTo< RDockPane>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_refreshNow_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::refreshNow(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->refreshNow(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_refreshNow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::refreshNow();
    else
        This->refreshNow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_removeBar_INLRBarInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::removeBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    else
        This->removeBar(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_setBarState_INLRBarInfo_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::setBarState(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        This->setBarState(::acdk::lang::dmi::castTo< RBarInfo>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_setFrameClient_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::setFrameClient(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    else
        This->setFrameClient(::acdk::lang::dmi::castTo< RWindow>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_setMargins_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    else
        This->setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_setMargins_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        This->setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FrameLayout_method_setPaneBackground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FrameLayout* This = dmi_cast<FrameLayout>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FrameLayout::setPaneBackground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->setPaneBackground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FrameLayout_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_parentFrame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parentFrame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_frameClient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "frameClient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_activateNow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "activateNow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__args[] = 
{
  &FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_parentFrame,
  &FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_frameClient,
  &FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__arg_activateNow,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FrameLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FrameLayout::clazzInfo(), // return type
  "_0_FrameLayout", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__args, // the arguments
  0, //arguments count
  FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__arg_parentFrame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parentFrame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__args[] = 
{
  &FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__arg_parentFrame,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_FrameLayout_INLRWindow__LRFrameLayout_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FrameLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FrameLayout::clazzInfo(), // return type
  "_1_FrameLayout", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__args, // the arguments
  0, //arguments count
  FrameLayout_methods_FrameLayout_INLRWindow__LRFrameLayout__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_FrameLayout_INLRWindow__LRFrameLayout__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__arg_parentFrame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parentFrame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__arg_frameClient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "frameClient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__args[] = 
{
  &FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__arg_parentFrame,
  &FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__arg_frameClient,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FrameLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FrameLayout::clazzInfo(), // return type
  "_2_FrameLayout", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__args, // the arguments
  0, //arguments count
  FrameLayout_methods_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_K_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FrameLayout_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_activate__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_activate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_activate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_activate", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_activate__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_activate__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_activate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_rowNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rowNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_columnPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "columnPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_spyEvents = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "spyEvents", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_alignment,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_state,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_rowNo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_columnPos,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_name,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_arg_spyEvents,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_arg_dimInfo,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_arg_alignment,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_I_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_alignment,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_arg_state,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_II_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_rowNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rowNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_alignment,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_state,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_arg_rowNo,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_III_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_rowNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rowNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_columnPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "columnPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_alignment,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_state,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_rowNo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_arg_columnPos,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIII_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_pBarWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBarWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_dimInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dimInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDimInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_rowNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rowNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_columnPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "columnPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_args[] = 
{
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_pBarWnd,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_dimInfo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_alignment,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_state,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_rowNo,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_columnPos,
  &FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_addBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addPlugin_INLRString__Z_arg_pluginWxClassName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pluginWxClassName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addPlugin_INLRString__Z_args[] = 
{
  &FrameLayout_methods_addPlugin_INLRString__Z_arg_pluginWxClassName,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addPlugin_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addPlugin_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPlugin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_addPlugin", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addPlugin_INLRString__Z_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addPlugin_INLRString__Z_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addPlugin_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_addPlugins_I_V_arg_plugIds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "plugIds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_addPlugins_I_V_args[] = 
{
  &FrameLayout_methods_addPlugins_I_V_arg_plugIds,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_addPlugins_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_addPlugins_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPlugins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addPlugins", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_addPlugins_I_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_addPlugins_I_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_addPlugins_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_applyBarProperties_INLRBarInfo__V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_applyBarProperties_INLRBarInfo__V_args[] = 
{
  &FrameLayout_methods_applyBarProperties_INLRBarInfo__V_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_applyBarProperties_INLRBarInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_applyBarProperties_INLRBarInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyBarProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_applyBarProperties", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_applyBarProperties_INLRBarInfo__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_applyBarProperties_INLRBarInfo__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_applyBarProperties_INLRBarInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_deactivate__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_deactivate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_deactivate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deactivate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_deactivate", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_deactivate__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_deactivate__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_deactivate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_destroyBarWindows__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_destroyBarWindows__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_destroyBarWindows__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroyBarWindows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_destroyBarWindows", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_destroyBarWindows__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_destroyBarWindows__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_destroyBarWindows__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_enableFloating_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_enableFloating_Z_V_args[] = 
{
  &FrameLayout_methods_enableFloating_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_enableFloating_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_enableFloating_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enableFloating", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_enableFloating", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_enableFloating_Z_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_enableFloating_Z_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_enableFloating_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_enableFloating__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_enableFloating__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_enableFloating__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "enableFloating", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_enableFloating", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_enableFloating__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_enableFloating__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_enableFloating__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_findBarByName_INLRString__LRBarInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_findBarByName_INLRString__LRBarInfo__args[] = 
{
  &FrameLayout_methods_findBarByName_INLRString__LRBarInfo__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_findBarByName_INLRString__LRBarInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_findBarByName_INLRString__LRBarInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findBarByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo(), // return type
  "_q_findBarByName", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_findBarByName_INLRString__LRBarInfo__args, // the arguments
  0, //arguments count
  FrameLayout_methods_findBarByName_INLRString__LRBarInfo__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_findBarByName_INLRString__LRBarInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__arg_pWnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pWnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__args[] = 
{
  &FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__arg_pWnd,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_findBarByWindow_INLRWindow__LRBarInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findBarByWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo(), // return type
  "_r_findBarByWindow", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__args, // the arguments
  0, //arguments count
  FrameLayout_methods_findBarByWindow_INLRWindow__LRBarInfo__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_findBarByWindow_INLRWindow__LRBarInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getClientHeight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getClientHeight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getClientHeight__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_y_getClientHeight", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getClientHeight__I_args, // the arguments
  0, //arguments count
  FrameLayout_methods_getClientHeight__I_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getClientHeight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getClientRect__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getClientRect__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getClientRect__LRRect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_A_getClientRect", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getClientRect__LRRect__args, // the arguments
  0, //arguments count
  FrameLayout_methods_getClientRect__LRRect__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getClientRect__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getClientWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getClientWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getClientWidth__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getClientWidth", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getClientWidth__I_args, // the arguments
  0, //arguments count
  FrameLayout_methods_getClientWidth__I_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getClientWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getFrameClient__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getFrameClient__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getFrameClient__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFrameClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_c_getFrameClient", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getFrameClient__LRWindow__args, // the arguments
  0, //arguments count
  FrameLayout_methods_getFrameClient__LRWindow__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getFrameClient__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_getPane_I_LRDockPane__arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getPane_I_LRDockPane__args[] = 
{
  &FrameLayout_methods_getPane_I_LRDockPane__arg_alignment,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getPane_I_LRDockPane__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getPane_I_LRDockPane_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPane", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDockPane::clazzInfo(), // return type
  "_f_getPane", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getPane_I_LRDockPane__args, // the arguments
  0, //arguments count
  FrameLayout_methods_getPane_I_LRDockPane__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getPane_I_LRDockPane__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getPanesArray__LRDockPaneArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getPanesArray__LRDockPaneArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getPanesArray__LRDockPaneArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPanesArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDockPaneArray::clazzInfo(), // return type
  "_e_getPanesArray", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getPanesArray__LRDockPaneArray__args, // the arguments
  0, //arguments count
  FrameLayout_methods_getPanesArray__LRDockPaneArray__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getPanesArray__LRDockPaneArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_getParentFrame__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_getParentFrame__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_getParentFrame__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_d_getParentFrame", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_getParentFrame__LRWindow__args, // the arguments
  0, //arguments count
  FrameLayout_methods_getParentFrame__LRWindow__exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_getParentFrame__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_hasTopPlugin__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_hasTopPlugin__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_hasTopPlugin__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasTopPlugin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_hasTopPlugin", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_hasTopPlugin__Z_args, // the arguments
  0, //arguments count
  FrameLayout_methods_hasTopPlugin__Z_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_hasTopPlugin__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_hideBarWindows__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_hideBarWindows__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_hideBarWindows__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hideBarWindows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_hideBarWindows", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_hideBarWindows__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_hideBarWindows__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_hideBarWindows__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_inverseVisibility_INLRBarInfo__V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_inverseVisibility_INLRBarInfo__V_args[] = 
{
  &FrameLayout_methods_inverseVisibility_INLRBarInfo__V_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_inverseVisibility_INLRBarInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_inverseVisibility_INLRBarInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inverseVisibility", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_inverseVisibility", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_inverseVisibility_INLRBarInfo__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_inverseVisibility_INLRBarInfo__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_inverseVisibility_INLRBarInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_popAllPlugins__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_popAllPlugins__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_popAllPlugins__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popAllPlugins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_popAllPlugins", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_popAllPlugins__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_popAllPlugins__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_popAllPlugins__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_popPlugin__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_popPlugin__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_popPlugin__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popPlugin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_popPlugin", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_popPlugin__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_popPlugin__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_popPlugin__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_pushDefaultPlugins__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_pushDefaultPlugins__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_pushDefaultPlugins__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushDefaultPlugins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_pushDefaultPlugins", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_pushDefaultPlugins__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_pushDefaultPlugins__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_pushDefaultPlugins__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_recalcLayout_Z_V_arg_repositionBarsNow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "repositionBarsNow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_recalcLayout_Z_V_args[] = 
{
  &FrameLayout_methods_recalcLayout_Z_V_arg_repositionBarsNow,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_recalcLayout_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_recalcLayout_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_recalcLayout", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_recalcLayout_Z_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_recalcLayout_Z_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_recalcLayout_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_recalcLayout__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_recalcLayout__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_recalcLayout__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_recalcLayout", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_recalcLayout__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_recalcLayout__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_recalcLayout__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_shapeInParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shapeInParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_pToPane = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pToPane", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDockPane::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_updateNow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "updateNow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_args[] = 
{
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_pBar,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_shapeInParent,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_pToPane,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_arg_updateNow,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "redockBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_redockBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_args, // the arguments
  0, //arguments count
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_arg_shapeInParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shapeInParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_args[] = 
{
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_arg_pBar,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_arg_shapeInParent,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_redockBar_INLRBarInfo_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "redockBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_redockBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_args, // the arguments
  0, //arguments count
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect__Z_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_redockBar_INLRBarInfo_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_shapeInParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shapeInParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_pToPane = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pToPane", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDockPane::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_args[] = 
{
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_pBar,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_shapeInParent,
  &FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_arg_pToPane,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "redockBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_redockBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_args, // the arguments
  0, //arguments count
  FrameLayout_methods_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_refreshNow_Z_V_arg_recalcLayout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recalcLayout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_refreshNow_Z_V_args[] = 
{
  &FrameLayout_methods_refreshNow_Z_V_arg_recalcLayout,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_refreshNow_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_refreshNow_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_refreshNow", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_refreshNow_Z_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_refreshNow_Z_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_refreshNow_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_refreshNow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_refreshNow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_refreshNow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_refreshNow", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_refreshNow__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_refreshNow__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_refreshNow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_removeBar_INLRBarInfo__V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_removeBar_INLRBarInfo__V_args[] = 
{
  &FrameLayout_methods_removeBar_INLRBarInfo__V_arg_pBar,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_removeBar_INLRBarInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_removeBar_INLRBarInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_removeBar", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_removeBar_INLRBarInfo__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_removeBar_INLRBarInfo__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_removeBar_INLRBarInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_pBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBarInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_newStatem = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newStatem", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_updateNow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "updateNow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_args[] = 
{
  &FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_pBar,
  &FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_newStatem,
  &FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_arg_updateNow,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_setBarState_INLRBarInfo_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBarState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setBarState", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_setBarState_INLRBarInfo_IZ_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_setBarState_INLRBarInfo_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setFrameClient_INLRWindow__V_arg_pFrameClient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pFrameClient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_setFrameClient_INLRWindow__V_args[] = 
{
  &FrameLayout_methods_setFrameClient_INLRWindow__V_arg_pFrameClient,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_setFrameClient_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_setFrameClient_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFrameClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setFrameClient", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_setFrameClient_INLRWindow__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_setFrameClient_INLRWindow__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_setFrameClient_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIIII_V_arg_top = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "top", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIIII_V_arg_bottom = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bottom", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIIII_V_arg_left = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "left", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIIII_V_arg_right = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "right", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIIII_V_arg_paneMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "paneMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_setMargins_IIIII_V_args[] = 
{
  &FrameLayout_methods_setMargins_IIIII_V_arg_top,
  &FrameLayout_methods_setMargins_IIIII_V_arg_bottom,
  &FrameLayout_methods_setMargins_IIIII_V_arg_left,
  &FrameLayout_methods_setMargins_IIIII_V_arg_right,
  &FrameLayout_methods_setMargins_IIIII_V_arg_paneMask,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_setMargins_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_setMargins_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setMargins", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_setMargins_IIIII_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_setMargins_IIIII_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_setMargins_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIII_V_arg_top = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "top", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIII_V_arg_bottom = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bottom", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIII_V_arg_left = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "left", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setMargins_IIII_V_arg_right = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "right", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_setMargins_IIII_V_args[] = 
{
  &FrameLayout_methods_setMargins_IIII_V_arg_top,
  &FrameLayout_methods_setMargins_IIII_V_arg_bottom,
  &FrameLayout_methods_setMargins_IIII_V_arg_left,
  &FrameLayout_methods_setMargins_IIII_V_arg_right,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_setMargins_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_setMargins_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setMargins", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_setMargins_IIII_V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_setMargins_IIII_V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_setMargins_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FrameLayout_methods_setPaneBackground_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FrameLayout_methods_setPaneBackground_INLRColour__V_args[] = 
{
  &FrameLayout_methods_setPaneBackground_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* FrameLayout_methods_setPaneBackground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FrameLayout_method_setPaneBackground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPaneBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_setPaneBackground", // alternative name of method
  -1, // altlabelHashCode
  FrameLayout_methods_setPaneBackground_INLRColour__V_args, // the arguments
  0, //arguments count
  FrameLayout_methods_setPaneBackground_INLRColour__V_exceptions, // the declared exceptions
  FrameLayout_MetainfoWrapper::FrameLayout_method_setPaneBackground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FrameLayout_methods[] = 
{
  &FrameLayout_method_FrameLayout_INLRWindow_INLRWindow_Z_LRFrameLayout_,
  &FrameLayout_method_FrameLayout_INLRWindow__LRFrameLayout_,
  &FrameLayout_method_FrameLayout_INLRWindow_INLRWindow__LRFrameLayout_,
  &FrameLayout_method_GetClass__L_acdk_lang_RClass_,
  &FrameLayout_method_activate__V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString_Z_V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo__V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_I_V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_II_V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_III_V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIII_V,
  &FrameLayout_method_addBar_INLRWindow_INLRDimInfo_IIIIINLRString__V,
  &FrameLayout_method_addPlugin_INLRString__Z,
  &FrameLayout_method_addPlugins_I_V,
  &FrameLayout_method_applyBarProperties_INLRBarInfo__V,
  &FrameLayout_method_deactivate__V,
  &FrameLayout_method_destroyBarWindows__V,
  &FrameLayout_method_enableFloating_Z_V,
  &FrameLayout_method_enableFloating__V,
  &FrameLayout_method_findBarByName_INLRString__LRBarInfo_,
  &FrameLayout_method_findBarByWindow_INLRWindow__LRBarInfo_,
  &FrameLayout_method_getClientHeight__I,
  &FrameLayout_method_getClientRect__LRRect_,
  &FrameLayout_method_getClientWidth__I,
  &FrameLayout_method_getFrameClient__LRWindow_,
  &FrameLayout_method_getPane_I_LRDockPane_,
  &FrameLayout_method_getPanesArray__LRDockPaneArray_,
  &FrameLayout_method_getParentFrame__LRWindow_,
  &FrameLayout_method_hasTopPlugin__Z,
  &FrameLayout_method_hideBarWindows__V,
  &FrameLayout_method_inverseVisibility_INLRBarInfo__V,
  &FrameLayout_method_popAllPlugins__V,
  &FrameLayout_method_popPlugin__V,
  &FrameLayout_method_pushDefaultPlugins__V,
  &FrameLayout_method_recalcLayout_Z_V,
  &FrameLayout_method_recalcLayout__V,
  &FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane_Z_Z,
  &FrameLayout_method_redockBar_INLRBarInfo_INLRRect__Z,
  &FrameLayout_method_redockBar_INLRBarInfo_INLRRect_INLRDockPane__Z,
  &FrameLayout_method_refreshNow_Z_V,
  &FrameLayout_method_refreshNow__V,
  &FrameLayout_method_removeBar_INLRBarInfo__V,
  &FrameLayout_method_setBarState_INLRBarInfo_IZ_V,
  &FrameLayout_method_setFrameClient_INLRWindow__V,
  &FrameLayout_method_setMargins_IIIII_V,
  &FrameLayout_method_setMargins_IIII_V,
  &FrameLayout_method_setPaneBackground_INLRColour__V,
  0
};


struct FrameLayout_MetaInfoInitializer
{  FrameLayout_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FrameLayout::clazzInfo();
    ci->fields =  _FrameLayout_fields;
    ci->methods =  _FrameLayout_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FrameLayout_MetaInfoInitializer FrameLayout_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 


//static
::acdk::lang::RObject
DynamicToolBar_create_array(int length)
{
  return new ObjectArrayImpl<RDynamicToolBar>(length);
}

//static
::acdk::lang::RObject
DynamicToolBar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DynamicToolBar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DynamicToolBar(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DynamicToolBar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DynamicToolBar::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DynamicToolBar_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_orientation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "orientation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_rowsOrColumns = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rowsOrColumns", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_id,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_pos,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_size,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_style,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_orientation,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__arg_rowsOrColumns,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_0_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_I_LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_1_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_I_LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_id,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_2_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_id,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_pos,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_3_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_id,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_pos,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_size,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_4_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_orientation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "orientation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__args[] = 
{
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_parent,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_id,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_pos,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_size,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_style,
  &DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__arg_orientation,
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DynamicToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DynamicToolBar::clazzInfo(), // return type
  "_5_DynamicToolBar", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DynamicToolBar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DynamicToolBar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DynamicToolBar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DynamicToolBar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DynamicToolBar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DynamicToolBar_MetainfoWrapper::DynamicToolBar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DynamicToolBar_methods[] = 
{
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_III_LRDynamicToolBar_,
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_I_LRDynamicToolBar_,
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint__LRDynamicToolBar_,
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize__LRDynamicToolBar_,
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRDynamicToolBar_,
  &DynamicToolBar_method_DynamicToolBar_INLRWindow_IINLRPoint_INLRSize_II_LRDynamicToolBar_,
  &DynamicToolBar_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DynamicToolBar_MetaInfoInitializer
{  DynamicToolBar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DynamicToolBar::clazzInfo();
    ci->fields =  _DynamicToolBar_fields;
    ci->methods =  _DynamicToolBar_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DynamicToolBar_MetaInfoInitializer DynamicToolBar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 

using namespace acdk::wx;

//static
::acdk::lang::RObject
StyledTextCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RStyledTextCtrl>(length);
}

//static
::acdk::lang::RObject
StyledTextCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StyledTextCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StyledTextCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RPoint>(args[2], dc), ::acdk::lang::dmi::castTo< RSize>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_addText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::addText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->addText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_appendText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::appendText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->appendText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompActive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompActive();
    else
      ret = This->autoCompActive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompCancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompCancel();
    else
        This->autoCompCancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompComplete__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompComplete();
    else
        This->autoCompComplete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetAutoHide__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetAutoHide();
    else
      ret = This->autoCompGetAutoHide();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetCancelAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetCancelAtStart();
    else
      ret = This->autoCompGetCancelAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetChooseSingle__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetChooseSingle();
    else
      ret = This->autoCompGetChooseSingle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetDropRestOfWord__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetDropRestOfWord();
    else
      ret = This->autoCompGetDropRestOfWord();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetIgnoreCase__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetIgnoreCase();
    else
      ret = This->autoCompGetIgnoreCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetSeparator__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetSeparator();
    else
      ret = This->autoCompGetSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompGetTypeSeparator__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompGetTypeSeparator();
    else
      ret = This->autoCompGetTypeSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompPosStart__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::autoCompPosStart();
    else
      ret = This->autoCompPosStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSelect_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSelect(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->autoCompSelect(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetAutoHide_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetAutoHide(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->autoCompSetAutoHide(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetCancelAtStart_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetCancelAtStart(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->autoCompSetCancelAtStart(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetChooseSingle_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetChooseSingle(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->autoCompSetChooseSingle(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetDropRestOfWord_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetDropRestOfWord(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->autoCompSetDropRestOfWord(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetFillUps_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetFillUps(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->autoCompSetFillUps(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetIgnoreCase_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetIgnoreCase(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->autoCompSetIgnoreCase(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetSeparator_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetSeparator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->autoCompSetSeparator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompSetTypeSeparator_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompSetTypeSeparator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->autoCompSetTypeSeparator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompShow_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->autoCompShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_autoCompStops_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::autoCompStops(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->autoCompStops(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_backTab__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::backTab();
    else
        This->backTab();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_beginUndoAction__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::beginUndoAction();
    else
        This->beginUndoAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_braceBadLight_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::braceBadLight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->braceBadLight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_braceHighlight_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::braceHighlight(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->braceHighlight(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_braceMatch_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::braceMatch(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->braceMatch(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipActive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::callTipActive();
    else
      ret = This->callTipActive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipCancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipCancel();
    else
        This->callTipCancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipPosAtStart__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::callTipPosAtStart();
    else
      ret = This->callTipPosAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipSetBackground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipSetBackground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->callTipSetBackground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipSetForeground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipSetForeground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->callTipSetForeground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipSetForegroundHighlight_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipSetForegroundHighlight(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->callTipSetForegroundHighlight(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipSetHighlight_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipSetHighlight(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->callTipSetHighlight(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_callTipShow_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::callTipShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->callTipShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_canPaste__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::canPaste();
    else
      ret = This->canPaste();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_canRedo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::canRedo();
    else
      ret = This->canRedo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_canUndo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::canUndo();
    else
      ret = This->canUndo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cancel();
    else
        This->cancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charLeft__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charLeft();
    else
        This->charLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charLeftExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charLeftExtend();
    else
        This->charLeftExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charLeftRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charLeftRectExtend();
    else
        This->charLeftRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charRight__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charRight();
    else
        This->charRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charRightExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charRightExtend();
    else
        This->charRightExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_charRightRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::charRightRectExtend();
    else
        This->charRightRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_chooseCaretX__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::chooseCaretX();
    else
        This->chooseCaretX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_clearAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::clearAll();
    else
        This->clearAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_clearDocumentStyle__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::clearDocumentStyle();
    else
        This->clearDocumentStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_clearRegisteredImages__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::clearRegisteredImages();
    else
        This->clearRegisteredImages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cmdKeyAssign_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cmdKeyAssign(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->cmdKeyAssign(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cmdKeyClear_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cmdKeyClear(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->cmdKeyClear(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cmdKeyClearAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cmdKeyClearAll();
    else
        This->cmdKeyClearAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cmdKeyExecute_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cmdKeyExecute(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->cmdKeyExecute(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_colourise_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::colourise(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->colourise(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_convertEOLs_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::convertEOLs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->convertEOLs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_copy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::copy();
    else
        This->copy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_copyRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::copyRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->copyRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_copyText_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::copyText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->copyText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_cut__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::cut();
    else
        This->cut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_delLineLeft__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::delLineLeft();
    else
        This->delLineLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_delLineRight__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::delLineRight();
    else
        This->delLineRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_delWordLeft__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::delWordLeft();
    else
        This->delWordLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_delWordRight__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::delWordRight();
    else
        This->delWordRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_deleteBack__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::deleteBack();
    else
        This->deleteBack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_deleteBackNotLine__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::deleteBackNotLine();
    else
        This->deleteBackNotLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_docLineFromVisible_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::docLineFromVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->docLineFromVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_documentEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::documentEnd();
    else
        This->documentEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_documentEndExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::documentEndExtend();
    else
        This->documentEndExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_documentStart__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::documentStart();
    else
        This->documentStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_documentStartExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::documentStartExtend();
    else
        This->documentStartExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_editToggleOvertype__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::editToggleOvertype();
    else
        This->editToggleOvertype();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_emptyUndoBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::emptyUndoBuffer();
    else
        This->emptyUndoBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_endUndoAction__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::endUndoAction();
    else
        This->endUndoAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_ensureCaretVisible__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::ensureCaretVisible();
    else
        This->ensureCaretVisible();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_ensureVisible_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::ensureVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_ensureVisibleEnforcePolicy_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::ensureVisibleEnforcePolicy(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureVisibleEnforcePolicy(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_findText_IIINLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::findText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
      ret = This->findText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_findText_IIINLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::findText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
      ret = This->findText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_formFeed__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::formFeed();
    else
        This->formFeed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::formatRange(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RDC>(args[3], dc), ::acdk::lang::dmi::castTo< RDC>(args[4], dc), ::acdk::lang::dmi::castTo< RRect>(args[5], dc), ::acdk::lang::dmi::castTo< RRect>(args[6], dc));
    else
      ret = This->formatRange(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RDC>(args[3], dc), ::acdk::lang::dmi::castTo< RDC>(args[4], dc), ::acdk::lang::dmi::castTo< RRect>(args[5], dc), ::acdk::lang::dmi::castTo< RRect>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getAnchor__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getAnchor();
    else
      ret = This->getAnchor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getBackSpaceUnIndents__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getBackSpaceUnIndents();
    else
      ret = This->getBackSpaceUnIndents();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getBufferedDraw__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getBufferedDraw();
    else
      ret = This->getBufferedDraw();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCaretForeground__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getCaretForeground();
    else
        ret = (::acdk::lang::RObject)This->getCaretForeground();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCaretLineVisible__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCaretLineVisible();
    else
      ret = This->getCaretLineVisible();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCaretPeriod__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCaretPeriod();
    else
      ret = This->getCaretPeriod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCaretWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCaretWidth();
    else
      ret = This->getCaretWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCharAt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCodePage__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCodePage();
    else
      ret = This->getCodePage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getColumn_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getControlCharSymbol__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getControlCharSymbol();
    else
      ret = This->getControlCharSymbol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCurLine_OUTI_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getCurLine(::acdk::lang::dmi::castToIntRef(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getCurLine(::acdk::lang::dmi::castToIntRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCurLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getCurLine();
    else
        ret = (::acdk::lang::RObject)This->getCurLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCurrentLine__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCurrentLine();
    else
      ret = This->getCurrentLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getCurrentPos__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getCurrentPos();
    else
      ret = This->getCurrentPos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEOLMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getEOLMode();
    else
      ret = This->getEOLMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEdgeColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getEdgeColour();
    else
        ret = (::acdk::lang::RObject)This->getEdgeColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEdgeColumn__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getEdgeColumn();
    else
      ret = This->getEdgeColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEdgeMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getEdgeMode();
    else
      ret = This->getEdgeMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEndAtLastLine__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getEndAtLastLine();
    else
      ret = This->getEndAtLastLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getEndStyled__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getEndStyled();
    else
      ret = This->getEndStyled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getFirstVisibleLine__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getFirstVisibleLine();
    else
      ret = This->getFirstVisibleLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getFoldExpanded_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getFoldExpanded(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getFoldExpanded(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getFoldLevel_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getFoldLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getFoldLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getFoldParent_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getFoldParent(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getFoldParent(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getHighlightGuide__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getHighlightGuide();
    else
      ret = This->getHighlightGuide();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getIndent__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getIndent();
    else
      ret = This->getIndent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getIndentationGuides__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getIndentationGuides();
    else
      ret = This->getIndentationGuides();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLastChild_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLastChild(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getLastChild(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLastKeydownProcessed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLastKeydownProcessed();
    else
      ret = This->getLastKeydownProcessed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLayoutCache__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLayoutCache();
    else
      ret = This->getLayoutCache();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLexer__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLexer();
    else
      ret = This->getLexer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLine_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineCount();
    else
      ret = This->getLineCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineEndPosition_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineEndPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getLineEndPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineIndentPosition_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineIndentPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getLineIndentPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineIndentation_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineIndentation(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getLineIndentation(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineState_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineState(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getLineState(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getLineVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getLineVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getLineVisible(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginLeft__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginLeft();
    else
      ret = This->getMarginLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginMask_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginMask(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getMarginMask(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginRight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginRight();
    else
      ret = This->getMarginRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginSensitive_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginSensitive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getMarginSensitive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getMarginType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMarginWidth_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMarginWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getMarginWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMaxLineState__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMaxLineState();
    else
      ret = This->getMaxLineState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getModEventMask__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getModEventMask();
    else
      ret = This->getModEventMask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getModify__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getModify();
    else
      ret = This->getModify();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMouseDownCaptures__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMouseDownCaptures();
    else
      ret = This->getMouseDownCaptures();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getMouseDwellTime__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getMouseDwellTime();
    else
      ret = This->getMouseDwellTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getOvertype__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getOvertype();
    else
      ret = This->getOvertype();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getPrintColourMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getPrintColourMode();
    else
      ret = This->getPrintColourMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getPrintMagnification__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getPrintMagnification();
    else
      ret = This->getPrintMagnification();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getPrintWrapMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getPrintWrapMode();
    else
      ret = This->getPrintWrapMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getReadOnly();
    else
      ret = This->getReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getScrollWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getScrollWidth();
    else
      ret = This->getScrollWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getSearchFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getSearchFlags();
    else
      ret = This->getSearchFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getSelectedText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getSelectedText();
    else
        ret = (::acdk::lang::RObject)This->getSelectedText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getSelection_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::getSelection(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    else
        This->getSelection(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getSelectionEnd__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getSelectionEnd();
    else
      ret = This->getSelectionEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getSelectionStart__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getSelectionStart();
    else
      ret = This->getSelectionStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getStatus__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getStatus();
    else
      ret = This->getStatus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getStyleAt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getStyleAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getStyleAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getStyleBits__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getStyleBits();
    else
      ret = This->getStyleBits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTabIndents__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTabIndents();
    else
      ret = This->getTabIndents();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTabWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTabWidth();
    else
      ret = This->getTabWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTargetEnd__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTargetEnd();
    else
      ret = This->getTargetEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTargetStart__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTargetStart();
    else
      ret = This->getTargetStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getText();
    else
        ret = (::acdk::lang::RObject)This->getText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTextLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTextLength();
    else
      ret = This->getTextLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTextRange_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::getTextRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getTextRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getTwoPhaseDraw__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getTwoPhaseDraw();
    else
      ret = This->getTwoPhaseDraw();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getUndoCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getUndoCollection();
    else
      ret = This->getUndoCollection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getUseHorizontalScrollBar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getUseHorizontalScrollBar();
    else
      ret = This->getUseHorizontalScrollBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getUseTabs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getUseTabs();
    else
      ret = This->getUseTabs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getUseVerticalScrollBar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getUseVerticalScrollBar();
    else
      ret = This->getUseVerticalScrollBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getViewEOL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getViewEOL();
    else
      ret = This->getViewEOL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getViewWhiteSpace__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getViewWhiteSpace();
    else
      ret = This->getViewWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getWrapMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getWrapMode();
    else
      ret = This->getWrapMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getXOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getXOffset();
    else
      ret = This->getXOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_getZoom__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::getZoom();
    else
      ret = This->getZoom();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_gotoLine_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::gotoLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->gotoLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_gotoPos_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::gotoPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->gotoPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_hideLines_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::hideLines(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->hideLines(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_hideSelection_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::hideSelection(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->hideSelection(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_home__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::home();
    else
        This->home();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeDisplay__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeDisplay();
    else
        This->homeDisplay();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeDisplayExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeDisplayExtend();
    else
        This->homeDisplayExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeExtend();
    else
        This->homeExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeRectExtend();
    else
        This->homeRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeWrap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeWrap();
    else
        This->homeWrap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_homeWrapExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::homeWrapExtend();
    else
        This->homeWrapExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_indicatorGetForeground_I_LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::indicatorGetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->indicatorGetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_indicatorGetStyle_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::indicatorGetStyle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->indicatorGetStyle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_indicatorSetForeground_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::indicatorSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->indicatorSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_indicatorSetStyle_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::indicatorSetStyle(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->indicatorSetStyle(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_initFromProps_INL_acdk_cfgscript_RProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::initFromProps(::acdk::lang::dmi::castTo< ::acdk::cfgscript::RProps>(args[0], dc));
    else
        This->initFromProps(::acdk::lang::dmi::castTo< ::acdk::cfgscript::RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_initFromTextFile_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::initFromTextFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->initFromTextFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_insertText_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::insertText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->insertText(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineCopy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineCopy();
    else
        This->lineCopy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineCut__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineCut();
    else
        This->lineCut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineDelete__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineDelete();
    else
        This->lineDelete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineDown();
    else
        This->lineDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineDownRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineDownRectExtend();
    else
        This->lineDownRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineDuplicate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineDuplicate();
    else
        This->lineDuplicate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEnd();
    else
        This->lineEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndDisplay__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndDisplay();
    else
        This->lineEndDisplay();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndDisplayExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndDisplayExtend();
    else
        This->lineEndDisplayExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndExtend();
    else
        This->lineEndExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndRectExtend();
    else
        This->lineEndRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndWrap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndWrap();
    else
        This->lineEndWrap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineEndWrapExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineEndWrapExtend();
    else
        This->lineEndWrapExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineFromPosition_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::lineFromPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->lineFromPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineLength_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::lineLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->lineLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineScroll_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineScroll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->lineScroll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineScrollDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineScrollDown();
    else
        This->lineScrollDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineScrollUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineScrollUp();
    else
        This->lineScrollUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineTranspose__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineTranspose();
    else
        This->lineTranspose();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineUp();
    else
        This->lineUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineUpExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineUpExtend();
    else
        This->lineUpExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lineUpRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lineUpRectExtend();
    else
        This->lineUpRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_linesJoin__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::linesJoin();
    else
        This->linesJoin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_linesOnScreen__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::linesOnScreen();
    else
      ret = This->linesOnScreen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_linesSplit_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::linesSplit(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->linesSplit(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_loadConfig_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl::loadConfig(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_loadFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::loadFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_loadStdConfig__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl::loadStdConfig();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_lowerCase__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::lowerCase();
    else
        This->lowerCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerAdd_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::markerAdd(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->markerAdd(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerDefine_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerDefine(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->markerDefine(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerDefineBitmap_IINLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerDefineBitmap(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RBitmap>(args[1], dc));
    else
        This->markerDefineBitmap(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RBitmap>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerDelete_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerDelete(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->markerDelete(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerDeleteAll_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerDeleteAll(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->markerDeleteAll(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerDeleteHandle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerDeleteHandle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->markerDeleteHandle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerGet_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::markerGet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->markerGet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerLineFromHandle_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::markerLineFromHandle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->markerLineFromHandle(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerNext_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::markerNext(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->markerNext(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerPrevious_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::markerPrevious(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->markerPrevious(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerSetBackground_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerSetBackground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->markerSetBackground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_markerSetForeground_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::markerSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->markerSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_moveCaretInsideView__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::moveCaretInsideView();
    else
        This->moveCaretInsideView();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_newLine__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::newLine();
    else
        This->newLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageDown();
    else
        This->pageDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageDownExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageDownExtend();
    else
        This->pageDownExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageDownRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageDownRectExtend();
    else
        This->pageDownRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageUp();
    else
        This->pageUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageUpExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageUpExtend();
    else
        This->pageUpExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pageUpRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::pageUpRectExtend();
    else
        This->pageUpRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_paraDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::paraDown();
    else
        This->paraDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_paraDownExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::paraDownExtend();
    else
        This->paraDownExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_paraUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::paraUp();
    else
        This->paraUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_paraUpExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::paraUpExtend();
    else
        This->paraUpExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_paste__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::paste();
    else
        This->paste();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_pointFromPosition_I_LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextCtrl::pointFromPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->pointFromPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_positionAfter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::positionAfter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->positionAfter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_positionBefore_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::positionBefore(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->positionBefore(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_positionFromLine_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::positionFromLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->positionFromLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_positionFromPoint_INLRPoint__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::positionFromPoint(::acdk::lang::dmi::castTo< RPoint>(args[0], dc));
    else
      ret = This->positionFromPoint(::acdk::lang::dmi::castTo< RPoint>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_positionFromPointClose_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::positionFromPointClose(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->positionFromPointClose(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_redo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::redo();
    else
        This->redo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_registerImage_IINLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::registerImage(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RBitmap>(args[1], dc));
    else
        This->registerImage(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RBitmap>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_replaceSelection_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::replaceSelection(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->replaceSelection(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_replaceTarget_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::replaceTarget(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->replaceTarget(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_replaceTargetRE_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::replaceTargetRE(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->replaceTargetRE(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_saveFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::saveFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->saveFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_scrollToColumn_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::scrollToColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->scrollToColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_scrollToLine_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::scrollToLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->scrollToLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_searchAnchor__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::searchAnchor();
    else
        This->searchAnchor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_searchInTarget_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::searchInTarget(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->searchInTarget(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_searchNext_IINLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::searchNext(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->searchNext(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_searchPrev_IINLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::searchPrev(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->searchPrev(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_selectAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::selectAll();
    else
        This->selectAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_selectionIsRectangle__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::selectionIsRectangle();
    else
      ret = This->selectionIsRectangle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setAnchor_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setAnchor(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setAnchor(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setBackSpaceUnIndents_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setBackSpaceUnIndents(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setBackSpaceUnIndents(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setBufferedDraw_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setBufferedDraw(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setBufferedDraw(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCaretForeground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCaretForeground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->setCaretForeground(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCaretLineVisible_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCaretLineVisible(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setCaretLineVisible(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCaretPeriod_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCaretPeriod(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setCaretPeriod(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCaretWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCaretWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setCaretWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCharsDefault__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCharsDefault();
    else
        This->setCharsDefault();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCodePage_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCodePage(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setCodePage(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setControlCharSymbol_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setControlCharSymbol(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setControlCharSymbol(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setCurrentPos_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setCurrentPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setCurrentPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setEOLMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setEOLMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setEOLMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setEdgeColour_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setEdgeColour(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    else
        This->setEdgeColour(::acdk::lang::dmi::castTo< RColour>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setEdgeColumn_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setEdgeColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setEdgeColumn(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setEdgeMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setEdgeMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setEdgeMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setEndAtLastLine_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setEndAtLastLine(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setEndAtLastLine(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setFoldExpanded_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setFoldExpanded(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->setFoldExpanded(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setFoldFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setFoldFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFoldFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setFoldLevel_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setFoldLevel(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setFoldLevel(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setFoldMarginColour_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setFoldMarginColour(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setFoldMarginColour(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setFoldMarginHiColour_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setFoldMarginHiColour(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setFoldMarginHiColour(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setHighlightGuide_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setHighlightGuide(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setHighlightGuide(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setHotspotActiveBackground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setHotspotActiveBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setHotspotActiveBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setHotspotActiveForeground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setHotspotActiveForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setHotspotActiveForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setHotspotActiveUnderline_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setHotspotActiveUnderline(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setHotspotActiveUnderline(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setHotspotSingleLine_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setHotspotSingleLine(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setHotspotSingleLine(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setIndent_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setIndent(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setIndent(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setIndentationGuides_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setIndentationGuides(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setIndentationGuides(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setKeyWords_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setKeyWords(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->setKeyWords(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLastKeydownProcessed_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLastKeydownProcessed(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setLastKeydownProcessed(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLayoutCache_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLayoutCache(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLayoutCache(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLexer_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLexer(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLexer(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLexerLanguage_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLexerLanguage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setLexerLanguage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLineIndentation_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLineIndentation(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setLineIndentation(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setLineState_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setLineState(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setLineState(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginLeft_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginLeft(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMarginLeft(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginMask_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginMask(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setMarginMask(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginRight_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginRight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMarginRight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginSensitive_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginSensitive(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->setMarginSensitive(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginType_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginType(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setMarginType(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMarginWidth_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMarginWidth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setMarginWidth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMargins_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setMargins(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setModEventMask_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setModEventMask(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setModEventMask(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMouseDownCaptures_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMouseDownCaptures(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setMouseDownCaptures(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setMouseDwellTime_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setMouseDwellTime(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMouseDwellTime(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setOvertype_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setOvertype(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setOvertype(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setPrintColourMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setPrintColourMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPrintColourMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setPrintMagnification_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setPrintMagnification(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPrintMagnification(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setPrintWrapMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setPrintWrapMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPrintWrapMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setProperty_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->setProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setReadOnly_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setReadOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setReadOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSavePoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSavePoint();
    else
        This->setSavePoint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setScrollWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setScrollWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setScrollWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSearchFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSearchFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSearchFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelBackground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setSelBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelForeground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setSelForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelection_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelection(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setSelection(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelectionEnd_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelectionEnd(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSelectionEnd(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelectionMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelectionMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSelectionMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setSelectionStart_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setSelectionStart(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSelectionStart(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setStatus_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setStatus(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setStatus(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setStyleBits_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setStyleBits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setStyleBits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setStyling_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setStyling(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setStyling(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setTabIndents_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setTabIndents(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setTabIndents(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setTabWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setTabWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setTabWidth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setTargetEnd_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setTargetEnd(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setTargetEnd(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setTargetStart_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setTargetStart(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setTargetStart(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setTwoPhaseDraw_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setTwoPhaseDraw(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setTwoPhaseDraw(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setUndoCollection_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setUndoCollection(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUndoCollection(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setUseAntiAliasing_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setUseAntiAliasing(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUseAntiAliasing(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setUseHorizontalScrollBar_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setUseHorizontalScrollBar(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUseHorizontalScrollBar(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setUseTabs_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setUseTabs(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUseTabs(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setUseVerticalScrollBar_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setUseVerticalScrollBar(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUseVerticalScrollBar(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setViewEOL_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setViewEOL(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setViewEOL(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setViewWhiteSpace_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setViewWhiteSpace(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setViewWhiteSpace(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setVisiblePolicy_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setVisiblePolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setVisiblePolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setWhitespaceBackground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setWhitespaceBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setWhitespaceBackground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setWhitespaceChars_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setWhitespaceChars(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setWhitespaceChars(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setWhitespaceForeground_ZINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setWhitespaceForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->setWhitespaceForeground(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setWordChars_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setWordChars(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setWordChars(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setWrapMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setWrapMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setWrapMode(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setXCaretPolicy_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setXCaretPolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setXCaretPolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setXOffset_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setXOffset(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setXOffset(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setYCaretPolicy_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setYCaretPolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setYCaretPolicy(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_setZoom_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::setZoom(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setZoom(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_showLines_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::showLines(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->showLines(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_startRecord__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::startRecord();
    else
        This->startRecord();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_startStyling_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::startStyling(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->startStyling(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_stopRecord__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::stopRecord();
    else
        This->stopRecord();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_stutteredPageDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::stutteredPageDown();
    else
        This->stutteredPageDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_stutteredPageDownExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::stutteredPageDownExtend();
    else
        This->stutteredPageDownExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_stutteredPageUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::stutteredPageUp();
    else
        This->stutteredPageUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_stutteredPageUpExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::stutteredPageUpExtend();
    else
        This->stutteredPageUpExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleClearAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleClearAll();
    else
        This->styleClearAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleResetDefault__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleResetDefault();
    else
        This->styleResetDefault();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetBackground_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetBackground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->styleSetBackground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetBold_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetBold(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetBold(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetCase_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetCase(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->styleSetCase(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetChangeable_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetChangeable(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetChangeable(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetCharacterSet_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetCharacterSet(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->styleSetCharacterSet(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetEOLFilled_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetEOLFilled(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetEOLFilled(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetFaceName_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetFaceName(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->styleSetFaceName(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetFont_IINLRFont__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetFont(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RFont>(args[1], dc));
    else
        This->styleSetFont(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RFont>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetFontAttr_IIINLRString_ZZZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetFontAttr(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    else
        This->styleSetFontAttr(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetForeground_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    else
        This->styleSetForeground(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RColour>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetHotSpot_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetHotSpot(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetHotSpot(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetItalic_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetItalic(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetItalic(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetSize_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetSize(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->styleSetSize(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetSpec_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetSpec(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->styleSetSpec(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetUnderline_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetUnderline(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetUnderline(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_styleSetVisible_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::styleSetVisible(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->styleSetVisible(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_tab__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::tab();
    else
        This->tab();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_targetFromSelection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::targetFromSelection();
    else
        This->targetFromSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_textHeight_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::textHeight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->textHeight(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_textWidth_IINLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::textWidth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->textWidth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_toggleFold_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::toggleFold(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->toggleFold(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_undo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::undo();
    else
        This->undo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_upperCase__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::upperCase();
    else
        This->upperCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_usePopUp_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::usePopUp(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->usePopUp(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_userListShow_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::userListShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->userListShow(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_vCHome__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::vCHome();
    else
        This->vCHome();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_vCHomeExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::vCHomeExtend();
    else
        This->vCHomeExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_vCHomeRectExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::vCHomeRectExtend();
    else
        This->vCHomeRectExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_vCHomeWrap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::vCHomeWrap();
    else
        This->vCHomeWrap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_vCHomeWrapExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::vCHomeWrapExtend();
    else
        This->vCHomeWrapExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_visibleFromDocLine_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::visibleFromDocLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->visibleFromDocLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordEndPosition_IZ_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::wordEndPosition(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->wordEndPosition(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordLeft__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordLeft();
    else
        This->wordLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordLeftEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordLeftEnd();
    else
        This->wordLeftEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordLeftEndExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordLeftEndExtend();
    else
        This->wordLeftEndExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordLeftExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordLeftExtend();
    else
        This->wordLeftExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordPartLeft__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordPartLeft();
    else
        This->wordPartLeft();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordPartLeftExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordPartLeftExtend();
    else
        This->wordPartLeftExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordPartRight__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordPartRight();
    else
        This->wordPartRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordPartRightExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordPartRightExtend();
    else
        This->wordPartRightExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordRight__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordRight();
    else
        This->wordRight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordRightEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordRightEnd();
    else
        This->wordRightEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordRightEndExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordRightEndExtend();
    else
        This->wordRightEndExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordRightExtend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::wordRightExtend();
    else
        This->wordRightExtend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_wordStartPosition_IZ_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextCtrl::wordStartPosition(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->wordStartPosition(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_zoomIn__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::zoomIn();
    else
        This->zoomIn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextCtrl_method_zoomOut__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextCtrl* This = dmi_cast<StyledTextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextCtrl::zoomOut();
    else
        This->zoomOut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextCtrl_fields__globalProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextCtrl::_globalProps, flags);
    else
      StyledTextCtrl::_globalProps = ::acdk::lang::dmi::castTo< acdk::cfgscript::RProps>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextCtrl_fields__globalProps = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_globalProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(),
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_fields__globalProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StyledTextCtrl_fields[] = 
{
  &StyledTextCtrl_fields__globalProps,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6x_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__args[] = 
{
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_parent,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_id,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_pos,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_size,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_style,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextCtrl::clazzInfo(), // return type
  "_0_StyledTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__args[] = 
{
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__arg_parent,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextCtrl::clazzInfo(), // return type
  "_1_StyledTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__args[] = 
{
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_parent,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_id,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextCtrl::clazzInfo(), // return type
  "_2_StyledTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__args[] = 
{
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_parent,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_id,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_pos,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextCtrl::clazzInfo(), // return type
  "_3_StyledTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__args[] = 
{
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_parent,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_id,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_pos,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_size,
  &StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextCtrl::clazzInfo(), // return type
  "_4_StyledTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_addText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_addText_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_addText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_addText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_addText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_addText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_addText_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_addText_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_addText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_appendText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_appendText_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_appendText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_appendText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_appendText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3V_appendText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_appendText_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_appendText_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_appendText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompActive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompActive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompActive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1H_autoCompActive", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompActive__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompActive__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompActive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompCancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompCancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompCancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompCancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1G_autoCompCancel", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompCancel__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompCancel__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompCancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompComplete__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompComplete__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompComplete__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompComplete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1J_autoCompComplete", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompComplete__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompComplete__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompComplete__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetAutoHide__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetAutoHide__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetAutoHide__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetAutoHide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1X_autoCompGetAutoHide", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetAutoHide__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetAutoHide__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetAutoHide__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetCancelAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetCancelAtStart__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetCancelAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetCancelAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_autoCompGetCancelAtStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetCancelAtStart__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetCancelAtStart__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetCancelAtStart__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetChooseSingle__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetChooseSingle__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetChooseSingle__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetChooseSingle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1S_autoCompGetChooseSingle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetChooseSingle__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetChooseSingle__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetChooseSingle__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetDropRestOfWord__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetDropRestOfWord__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetDropRestOfWord__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetDropRestOfWord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1Z_autoCompGetDropRestOfWord", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetDropRestOfWord__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetDropRestOfWord__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetDropRestOfWord__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetIgnoreCase__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetIgnoreCase__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetIgnoreCase__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetIgnoreCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1U_autoCompGetIgnoreCase", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetIgnoreCase__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetIgnoreCase__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetIgnoreCase__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetSeparator__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetSeparator__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetSeparator__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1M_autoCompGetSeparator", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetSeparator__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetSeparator__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetSeparator__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompGetTypeSeparator__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompGetTypeSeparator__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompGetTypeSeparator__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompGetTypeSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_22_autoCompGetTypeSeparator", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompGetTypeSeparator__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompGetTypeSeparator__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompGetTypeSeparator__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompPosStart__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompPosStart__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompPosStart__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompPosStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1I_autoCompPosStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompPosStart__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompPosStart__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompPosStart__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSelect_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSelect_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSelect_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSelect_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSelect_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1N_autoCompSelect", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSelect_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSelect_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSelect_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_arg_autoHide = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "autoHide", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_arg_autoHide,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetAutoHide_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetAutoHide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1W_autoCompSetAutoHide", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetAutoHide_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetAutoHide_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_arg_cancel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cancel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_arg_cancel,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetCancelAtStart_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetCancelAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1O_autoCompSetCancelAtStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetCancelAtStart_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetCancelAtStart_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_arg_chooseSingle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "chooseSingle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_arg_chooseSingle,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetChooseSingle_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetChooseSingle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1R_autoCompSetChooseSingle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetChooseSingle_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetChooseSingle_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_arg_dropRestOfWord = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dropRestOfWord", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_arg_dropRestOfWord,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetDropRestOfWord_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetDropRestOfWord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Y_autoCompSetDropRestOfWord", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetDropRestOfWord_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetDropRestOfWord_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_arg_characterSet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "characterSet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_arg_characterSet,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetFillUps_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetFillUps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Q_autoCompSetFillUps", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetFillUps_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetFillUps_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_arg_ignoreCase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ignoreCase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_arg_ignoreCase,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetIgnoreCase_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetIgnoreCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1T_autoCompSetIgnoreCase", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetIgnoreCase_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetIgnoreCase_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetSeparator_I_V_arg_separatorCharacter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "separatorCharacter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetSeparator_I_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetSeparator_I_V_arg_separatorCharacter,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetSeparator_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetSeparator_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1L_autoCompSetSeparator", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetSeparator_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetSeparator_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetSeparator_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_arg_separatorCharacter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "separatorCharacter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_args[] = 
{
  &StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_arg_separatorCharacter,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompSetTypeSeparator_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompSetTypeSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_23_autoCompSetTypeSeparator", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompSetTypeSeparator_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompSetTypeSeparator_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompShow_IINLRString__V_arg_lenEntered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lenEntered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompShow_IINLRString__V_arg_itemList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "itemList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompShow_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_autoCompShow_IINLRString__V_arg_lenEntered,
  &StyledTextCtrl_methods_autoCompShow_IINLRString__V_arg_itemList,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompShow_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompShow_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1F_autoCompShow", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompShow_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompShow_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompShow_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_autoCompStops_INLRString__V_arg_characterSet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "characterSet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_autoCompStops_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_autoCompStops_INLRString__V_arg_characterSet,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_autoCompStops_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_autoCompStops_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "autoCompStops", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1K_autoCompStops", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_autoCompStops_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_autoCompStops_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_autoCompStops_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_backTab__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_backTab__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_backTab__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "backTab", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4u_backTab", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_backTab__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_backTab__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_backTab__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_beginUndoAction__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_beginUndoAction__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_beginUndoAction__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beginUndoAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_beginUndoAction", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_beginUndoAction__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_beginUndoAction__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_beginUndoAction__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_braceBadLight_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_braceBadLight_I_V_args[] = 
{
  &StyledTextCtrl_methods_braceBadLight_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_braceBadLight_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_braceBadLight_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "braceBadLight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_50_braceBadLight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_braceBadLight_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_braceBadLight_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_braceBadLight_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_braceHighlight_II_V_arg_pos1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_braceHighlight_II_V_arg_pos2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_braceHighlight_II_V_args[] = 
{
  &StyledTextCtrl_methods_braceHighlight_II_V_arg_pos1,
  &StyledTextCtrl_methods_braceHighlight_II_V_arg_pos2,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_braceHighlight_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_braceHighlight_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "braceHighlight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4Z_braceHighlight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_braceHighlight_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_braceHighlight_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_braceHighlight_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_braceMatch_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_braceMatch_I_I_args[] = 
{
  &StyledTextCtrl_methods_braceMatch_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_braceMatch_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_braceMatch_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "braceMatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_51_braceMatch", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_braceMatch_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_braceMatch_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_braceMatch_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipActive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipActive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipActive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3g_callTipActive", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipActive__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipActive__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipActive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipCancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipCancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipCancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipCancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3f_callTipCancel", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipCancel__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipCancel__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipCancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipPosAtStart__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipPosAtStart__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipPosAtStart__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipPosAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3h_callTipPosAtStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipPosAtStart__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipPosAtStart__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipPosAtStart__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipSetBackground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipSetBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3j_callTipSetBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipSetBackground_INLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipSetBackground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipSetForeground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipSetForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3k_callTipSetForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipSetForeground_INLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipSetForeground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipSetForegroundHighlight_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipSetForegroundHighlight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3l_callTipSetForegroundHighlight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipSetForegroundHighlight_INLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipSetForegroundHighlight_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipSetHighlight_II_V_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipSetHighlight_II_V_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipSetHighlight_II_V_args[] = 
{
  &StyledTextCtrl_methods_callTipSetHighlight_II_V_arg_startPos,
  &StyledTextCtrl_methods_callTipSetHighlight_II_V_arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipSetHighlight_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipSetHighlight_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipSetHighlight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3i_callTipSetHighlight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipSetHighlight_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipSetHighlight_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipSetHighlight_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipShow_IINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_callTipShow_IINLRString__V_arg_definition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "definition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_callTipShow_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_callTipShow_IINLRString__V_arg_pos,
  &StyledTextCtrl_methods_callTipShow_IINLRString__V_arg_definition,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_callTipShow_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_callTipShow_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callTipShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3e_callTipShow", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_callTipShow_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_callTipShow_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_callTipShow_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_canPaste__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_canPaste__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_canPaste__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canPaste", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2Q_canPaste", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_canPaste__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_canPaste__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_canPaste__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_canRedo__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_canRedo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_canRedo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRedo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_canRedo", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_canRedo__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_canRedo__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_canRedo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_canUndo__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_canUndo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_canUndo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canUndo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2R_canUndo", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_canUndo__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_canUndo__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_canUndo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4r_cancel", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cancel__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cancel__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charLeft__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charLeft__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charLeft__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_46_charLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charLeft__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charLeft__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charLeft__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charLeftExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charLeftExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charLeftExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charLeftExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_47_charLeftExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charLeftExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charLeftExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charLeftExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charLeftRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charLeftRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charLeftRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charLeftRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5T_charLeftRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charLeftRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charLeftRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charLeftRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charRight__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charRight__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charRight__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_48_charRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charRight__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charRight__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charRight__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charRightExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charRightExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charRightExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charRightExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_49_charRightExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charRightExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charRightExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charRightExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_charRightRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_charRightRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_charRightRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charRightRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5U_charRightRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_charRightRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_charRightRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_charRightRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_chooseCaretX__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_chooseCaretX__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_chooseCaretX__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "chooseCaretX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5z_chooseCaretX", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_chooseCaretX__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_chooseCaretX__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_chooseCaretX__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2X_clear", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_clear__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_clear__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_clearAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_clearAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_clearAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_clearAll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_clearAll__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_clearAll__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_clearAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_clearDocumentStyle__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_clearDocumentStyle__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_clearDocumentStyle__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearDocumentStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_clearDocumentStyle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_clearDocumentStyle__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_clearDocumentStyle__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_clearDocumentStyle__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_clearRegisteredImages__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_clearRegisteredImages__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_clearRegisteredImages__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearRegisteredImages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_21_clearRegisteredImages", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_clearRegisteredImages__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_clearRegisteredImages__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_clearRegisteredImages__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_modifiers = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "modifiers", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cmdKeyAssign_III_V_args[] = 
{
  &StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_key,
  &StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_modifiers,
  &StyledTextCtrl_methods_cmdKeyAssign_III_V_arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cmdKeyAssign_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cmdKeyAssign_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cmdKeyAssign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_cmdKeyAssign", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cmdKeyAssign_III_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cmdKeyAssign_III_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cmdKeyAssign_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyClear_II_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyClear_II_V_arg_modifiers = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "modifiers", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cmdKeyClear_II_V_args[] = 
{
  &StyledTextCtrl_methods_cmdKeyClear_II_V_arg_key,
  &StyledTextCtrl_methods_cmdKeyClear_II_V_arg_modifiers,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cmdKeyClear_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cmdKeyClear_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cmdKeyClear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_cmdKeyClear", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cmdKeyClear_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cmdKeyClear_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cmdKeyClear_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cmdKeyClearAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cmdKeyClearAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cmdKeyClearAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cmdKeyClearAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_cmdKeyClearAll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cmdKeyClearAll__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cmdKeyClearAll__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cmdKeyClearAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_cmdKeyExecute_I_V_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cmdKeyExecute_I_V_args[] = 
{
  &StyledTextCtrl_methods_cmdKeyExecute_I_V_arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cmdKeyExecute_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cmdKeyExecute_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cmdKeyExecute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6m_cmdKeyExecute", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cmdKeyExecute_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cmdKeyExecute_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cmdKeyExecute_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_colourise_II_V_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_colourise_II_V_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_colourise_II_V_args[] = 
{
  &StyledTextCtrl_methods_colourise_II_V_arg_startPos,
  &StyledTextCtrl_methods_colourise_II_V_arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_colourise_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_colourise_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "colourise", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6e_colourise", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_colourise_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_colourise_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_colourise_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_convertEOLs_I_V_arg_eolMode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "eolMode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_convertEOLs_I_V_args[] = 
{
  &StyledTextCtrl_methods_convertEOLs_I_V_arg_eolMode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_convertEOLs_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_convertEOLs_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertEOLs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_convertEOLs", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_convertEOLs_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_convertEOLs_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_convertEOLs_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_copy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_copy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_copy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2V_copy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_copy__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_copy__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_copy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_copyRange_II_V_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_copyRange_II_V_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_copyRange_II_V_args[] = 
{
  &StyledTextCtrl_methods_copyRange_II_V_arg_startPos,
  &StyledTextCtrl_methods_copyRange_II_V_arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_copyRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_copyRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5O_copyRange", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_copyRange_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_copyRange_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_copyRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_copyText_IINLRString__V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_copyText_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_copyText_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_copyText_IINLRString__V_arg_length,
  &StyledTextCtrl_methods_copyText_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_copyText_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_copyText_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5P_copyText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_copyText_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_copyText_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_copyText_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_cut__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_cut__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_cut__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2U_cut", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_cut__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_cut__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_cut__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_delLineLeft__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_delLineLeft__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_delLineLeft__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "delLineLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5v_delLineLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_delLineLeft__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_delLineLeft__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_delLineLeft__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_delLineRight__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_delLineRight__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_delLineRight__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "delLineRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5w_delLineRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_delLineRight__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_delLineRight__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_delLineRight__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_delWordLeft__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_delWordLeft__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_delWordLeft__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "delWordLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4B_delWordLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_delWordLeft__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_delWordLeft__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_delWordLeft__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_delWordRight__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_delWordRight__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_delWordRight__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "delWordRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4C_delWordRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_delWordRight__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_delWordRight__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_delWordRight__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_deleteBack__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_deleteBack__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_deleteBack__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4s_deleteBack", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_deleteBack__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_deleteBack__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_deleteBack__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_deleteBackNotLine__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_deleteBackNotLine__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_deleteBackNotLine__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteBackNotLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4L_deleteBackNotLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_deleteBackNotLine__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_deleteBackNotLine__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_deleteBackNotLine__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_docLineFromVisible_I_I_arg_lineDisplay = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineDisplay", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_docLineFromVisible_I_I_args[] = 
{
  &StyledTextCtrl_methods_docLineFromVisible_I_I_arg_lineDisplay,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_docLineFromVisible_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_docLineFromVisible_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "docLineFromVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3n_docLineFromVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_docLineFromVisible_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_docLineFromVisible_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_docLineFromVisible_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_documentEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_documentEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_documentEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "documentEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4k_documentEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_documentEnd__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_documentEnd__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_documentEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_documentEndExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_documentEndExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_documentEndExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "documentEndExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4l_documentEndExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_documentEndExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_documentEndExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_documentEndExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_documentStart__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_documentStart__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_documentStart__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "documentStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4i_documentStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_documentStart__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_documentStart__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_documentStart__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_documentStartExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_documentStartExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_documentStartExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "documentStartExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4j_documentStartExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_documentStartExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_documentStartExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_documentStartExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_editToggleOvertype__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_editToggleOvertype__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_editToggleOvertype__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "editToggleOvertype", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4q_editToggleOvertype", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_editToggleOvertype__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_editToggleOvertype__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_editToggleOvertype__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_emptyUndoBuffer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_emptyUndoBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_emptyUndoBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "emptyUndoBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2S_emptyUndoBuffer", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_emptyUndoBuffer__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_emptyUndoBuffer__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_emptyUndoBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_endUndoAction__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_endUndoAction__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_endUndoAction__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endUndoAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_endUndoAction", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_endUndoAction__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_endUndoAction__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_endUndoAction__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_ensureCaretVisible__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_ensureCaretVisible__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_ensureCaretVisible__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCaretVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2N_ensureCaretVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_ensureCaretVisible__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_ensureCaretVisible__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_ensureCaretVisible__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_ensureVisible_I_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_ensureVisible_I_V_args[] = 
{
  &StyledTextCtrl_methods_ensureVisible_I_V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_ensureVisible_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_ensureVisible_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3y_ensureVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_ensureVisible_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_ensureVisible_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_ensureVisible_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_args[] = 
{
  &StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_ensureVisibleEnforcePolicy_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureVisibleEnforcePolicy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3A_ensureVisibleEnforcePolicy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_ensureVisibleEnforcePolicy_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_ensureVisibleEnforcePolicy_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_minPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_maxPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_findText_IIINLRString_I_I_args[] = 
{
  &StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_minPos,
  &StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_maxPos,
  &StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_text,
  &StyledTextCtrl_methods_findText_IIINLRString_I_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_findText_IIINLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_findText_IIINLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2v_findText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_findText_IIINLRString_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_findText_IIINLRString_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_findText_IIINLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString__I_arg_minPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString__I_arg_maxPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_findText_IIINLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_findText_IIINLRString__I_args[] = 
{
  &StyledTextCtrl_methods_findText_IIINLRString__I_arg_minPos,
  &StyledTextCtrl_methods_findText_IIINLRString__I_arg_maxPos,
  &StyledTextCtrl_methods_findText_IIINLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_findText_IIINLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_findText_IIINLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "findText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2w_findText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_findText_IIINLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_findText_IIINLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_findText_IIINLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_formFeed__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_formFeed__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_formFeed__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "formFeed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4w_formFeed", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_formFeed__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_formFeed__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_formFeed__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_doDraw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "doDraw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_draw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "draw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_renderRect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "renderRect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_pageRect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pageRect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_args[] = 
{
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_doDraw,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_startPos,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_endPos,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_draw,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_target,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_renderRect,
  &StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_arg_pageRect,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "formatRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2x_formatRange", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getAnchor__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getAnchor__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getAnchor__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAnchor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getAnchor", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getAnchor__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getAnchor__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getAnchor__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getBackSpaceUnIndents__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getBackSpaceUnIndents__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getBackSpaceUnIndents__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBackSpaceUnIndents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3E_getBackSpaceUnIndents", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getBackSpaceUnIndents__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getBackSpaceUnIndents__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getBackSpaceUnIndents__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getBufferedDraw__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getBufferedDraw__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getBufferedDraw__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBufferedDraw", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_getBufferedDraw", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getBufferedDraw__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getBufferedDraw__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getBufferedDraw__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCaretForeground__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCaretForeground__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCaretForeground__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCaretForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_2k_getCaretForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCaretForeground__LRColour__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCaretForeground__LRColour__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCaretForeground__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCaretLineVisible__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCaretLineVisible__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCaretLineVisible__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCaretLineVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1C_getCaretLineVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCaretLineVisible__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCaretLineVisible__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCaretLineVisible__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCaretPeriod__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCaretPeriod__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCaretPeriod__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCaretPeriod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1m_getCaretPeriod", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCaretPeriod__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCaretPeriod__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCaretPeriod__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCaretWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCaretWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCaretWidth__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCaretWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_34_getCaretWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCaretWidth__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCaretWidth__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCaretWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getCharAt_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCharAt_I_I_args[] = 
{
  &StyledTextCtrl_methods_getCharAt_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCharAt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCharAt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getCharAt", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCharAt_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCharAt_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCharAt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCodePage__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCodePage__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCodePage__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodePage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2j_getCodePage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCodePage__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCodePage__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCodePage__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getColumn_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getColumn_I_I_args[] = 
{
  &StyledTextCtrl_methods_getColumn_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getColumn_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getColumn_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2b_getColumn", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getColumn_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getColumn_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getColumn_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getControlCharSymbol__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getControlCharSymbol__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getControlCharSymbol__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getControlCharSymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5p_getControlCharSymbol", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getControlCharSymbol__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getControlCharSymbol__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getControlCharSymbol__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getCurLine_OUTI_LRString__arg_linePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "linePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCurLine_OUTI_LRString__args[] = 
{
  &StyledTextCtrl_methods_getCurLine_OUTI_LRString__arg_linePos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCurLine_OUTI_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCurLine_OUTI_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_x_getCurLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCurLine_OUTI_LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCurLine_OUTI_LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCurLine_OUTI_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCurLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCurLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCurLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getCurLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCurLine__LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCurLine__LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCurLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCurrentLine__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCurrentLine__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCurrentLine__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6i_getCurrentLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCurrentLine__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCurrentLine__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCurrentLine__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getCurrentPos__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getCurrentPos__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getCurrentPos__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getCurrentPos", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getCurrentPos__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getCurrentPos__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getCurrentPos__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEOLMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEOLMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEOLMode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEOLMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getEOLMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEOLMode__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEOLMode__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEOLMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEdgeColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEdgeColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEdgeColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEdgeColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_59_getEdgeColour", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEdgeColour__LRColour__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEdgeColour__LRColour__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEdgeColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEdgeColumn__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEdgeColumn__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEdgeColumn__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEdgeColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_55_getEdgeColumn", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEdgeColumn__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEdgeColumn__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEdgeColumn__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEdgeMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEdgeMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEdgeMode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEdgeMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_57_getEdgeMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEdgeMode__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEdgeMode__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEdgeMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEndAtLastLine__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEndAtLastLine__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEndAtLastLine__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEndAtLastLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3R_getEndAtLastLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEndAtLastLine__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEndAtLastLine__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEndAtLastLine__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getEndStyled__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getEndStyled__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getEndStyled__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEndStyled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getEndStyled", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getEndStyled__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getEndStyled__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getEndStyled__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getFirstVisibleLine__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getFirstVisibleLine__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getFirstVisibleLine__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstVisibleLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2y_getFirstVisibleLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getFirstVisibleLine__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getFirstVisibleLine__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getFirstVisibleLine__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getFoldExpanded_I_Z_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getFoldExpanded_I_Z_args[] = 
{
  &StyledTextCtrl_methods_getFoldExpanded_I_Z_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getFoldExpanded_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getFoldExpanded_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFoldExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3w_getFoldExpanded", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getFoldExpanded_I_Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getFoldExpanded_I_Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getFoldExpanded_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getFoldLevel_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getFoldLevel_I_I_args[] = 
{
  &StyledTextCtrl_methods_getFoldLevel_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getFoldLevel_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getFoldLevel_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFoldLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3p_getFoldLevel", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getFoldLevel_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getFoldLevel_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getFoldLevel_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getFoldParent_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getFoldParent_I_I_args[] = 
{
  &StyledTextCtrl_methods_getFoldParent_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getFoldParent_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getFoldParent_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFoldParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3r_getFoldParent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getFoldParent_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getFoldParent_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getFoldParent_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getHighlightGuide__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getHighlightGuide__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getHighlightGuide__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHighlightGuide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2h_getHighlightGuide", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getHighlightGuide__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getHighlightGuide__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getHighlightGuide__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getIndent__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getIndent__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getIndent__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_25_getIndent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getIndent__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getIndent__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getIndent__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getIndentationGuides__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getIndentationGuides__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getIndentationGuides__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndentationGuides", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2f_getIndentationGuides", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getIndentationGuides__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getIndentationGuides__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getIndentationGuides__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLastChild_II_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLastChild_II_I_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLastChild_II_I_args[] = 
{
  &StyledTextCtrl_methods_getLastChild_II_I_arg_line,
  &StyledTextCtrl_methods_getLastChild_II_I_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLastChild_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLastChild_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3q_getLastChild", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLastChild_II_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLastChild_II_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLastChild_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLastKeydownProcessed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLastKeydownProcessed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLastKeydownProcessed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastKeydownProcessed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6s_getLastKeydownProcessed", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLastKeydownProcessed__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLastKeydownProcessed__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLastKeydownProcessed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLayoutCache__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLayoutCache__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLayoutCache__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLayoutCache", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3M_getLayoutCache", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLayoutCache__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLayoutCache__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLayoutCache__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getLength", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLength__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLength__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLexer__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLexer__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLexer__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLexer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6d_getLexer", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLexer__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLexer__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLexer__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLine_I_LRString__arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLine_I_LRString__args[] = 
{
  &StyledTextCtrl_methods_getLine_I_LRString__arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLine_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLine_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2z_getLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLine_I_LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLine_I_LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLine_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2A_getLineCount", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineCount__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineCount__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLineEndPosition_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineEndPosition_I_I_args[] = 
{
  &StyledTextCtrl_methods_getLineEndPosition_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineEndPosition_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineEndPosition_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineEndPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2i_getLineEndPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineEndPosition_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineEndPosition_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineEndPosition_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLineIndentPosition_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineIndentPosition_I_I_args[] = 
{
  &StyledTextCtrl_methods_getLineIndentPosition_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineIndentPosition_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineIndentPosition_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineIndentPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2a_getLineIndentPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineIndentPosition_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineIndentPosition_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineIndentPosition_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLineIndentation_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineIndentation_I_I_args[] = 
{
  &StyledTextCtrl_methods_getLineIndentation_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineIndentation_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineIndentation_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineIndentation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_29_getLineIndentation", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineIndentation_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineIndentation_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineIndentation_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLineState_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineState_I_I_args[] = 
{
  &StyledTextCtrl_methods_getLineState_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineState_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineState_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_getLineState", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineState_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineState_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineState_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getLineVisible_I_Z_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getLineVisible_I_Z_args[] = 
{
  &StyledTextCtrl_methods_getLineVisible_I_Z_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getLineVisible_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getLineVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3u_getLineVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getLineVisible_I_Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getLineVisible_I_Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getLineVisible_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginLeft__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginLeft__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginLeft__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2C_getMarginLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginLeft__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginLeft__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginLeft__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getMarginMask_I_I_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginMask_I_I_args[] = 
{
  &StyledTextCtrl_methods_getMarginMask_I_I_arg_margin,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginMask_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginMask_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginMask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_Z_getMarginMask", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginMask_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginMask_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginMask_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginRight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginRight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginRight__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2E_getMarginRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginRight__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginRight__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginRight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getMarginSensitive_I_Z_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginSensitive_I_Z_args[] = 
{
  &StyledTextCtrl_methods_getMarginSensitive_I_Z_arg_margin,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginSensitive_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginSensitive_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_11_getMarginSensitive", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginSensitive_I_Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginSensitive_I_Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginSensitive_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getMarginType_I_I_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginType_I_I_args[] = 
{
  &StyledTextCtrl_methods_getMarginType_I_I_arg_margin,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginType_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_V_getMarginType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginType_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginType_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginType_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getMarginWidth_I_I_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMarginWidth_I_I_args[] = 
{
  &StyledTextCtrl_methods_getMarginWidth_I_I_arg_margin,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMarginWidth_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMarginWidth_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMarginWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_X_getMarginWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMarginWidth_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMarginWidth_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMarginWidth_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMaxLineState__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMaxLineState__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMaxLineState__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxLineState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1B_getMaxLineState", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMaxLineState__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMaxLineState__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMaxLineState__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getModEventMask__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getModEventMask__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getModEventMask__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModEventMask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5j_getModEventMask", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getModEventMask__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getModEventMask__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getModEventMask__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getModify__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getModify__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getModify__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModify", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2F_getModify", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getModify__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getModify__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getModify__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMouseDownCaptures__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMouseDownCaptures__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMouseDownCaptures__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMouseDownCaptures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5n_getMouseDownCaptures", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMouseDownCaptures__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMouseDownCaptures__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMouseDownCaptures__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getMouseDwellTime__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getMouseDwellTime__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getMouseDwellTime__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMouseDwellTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3G_getMouseDwellTime", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getMouseDwellTime__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getMouseDwellTime__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getMouseDwellTime__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getOvertype__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getOvertype__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getOvertype__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOvertype", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_32_getOvertype", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getOvertype__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getOvertype__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getOvertype__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getPrintColourMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getPrintColourMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getPrintColourMode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrintColourMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2u_getPrintColourMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getPrintColourMode__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getPrintColourMode__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getPrintColourMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getPrintMagnification__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getPrintMagnification__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getPrintMagnification__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrintMagnification", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2s_getPrintMagnification", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getPrintMagnification__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getPrintMagnification__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getPrintMagnification__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getPrintWrapMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getPrintWrapMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getPrintWrapMode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrintWrapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5D_getPrintWrapMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getPrintWrapMode__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getPrintWrapMode__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getPrintWrapMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getReadOnly__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2l_getReadOnly", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getReadOnly__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getReadOnly__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getReadOnly__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getScrollWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getScrollWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getScrollWidth__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3O_getScrollWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getScrollWidth__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getScrollWidth__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getScrollWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getSearchFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getSearchFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getSearchFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSearchFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3d_getSearchFlags", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getSearchFlags__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getSearchFlags__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getSearchFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getSelectedText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getSelectedText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getSelectedText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelectedText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2H_getSelectedText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getSelectedText__LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getSelectedText__LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getSelectedText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getSelection_OUTIOUTI_V_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getSelection_OUTIOUTI_V_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getSelection_OUTIOUTI_V_args[] = 
{
  &StyledTextCtrl_methods_getSelection_OUTIOUTI_V_arg_startPos,
  &StyledTextCtrl_methods_getSelection_OUTIOUTI_V_arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getSelection_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getSelection_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6o_getSelection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getSelection_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getSelection_OUTIOUTI_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getSelection_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getSelectionEnd__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getSelectionEnd__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getSelectionEnd__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelectionEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2q_getSelectionEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getSelectionEnd__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getSelectionEnd__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getSelectionEnd__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getSelectionStart__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getSelectionStart__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getSelectionStart__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelectionStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2o_getSelectionStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getSelectionStart__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getSelectionStart__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getSelectionStart__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getStatus__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getStatus__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getStatus__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5l_getStatus", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getStatus__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getStatus__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getStatus__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getStyleAt_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getStyleAt_I_I_args[] = 
{
  &StyledTextCtrl_methods_getStyleAt_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getStyleAt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getStyleAt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyleAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getStyleAt", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getStyleAt_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getStyleAt_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getStyleAt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getStyleBits__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getStyleBits__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getStyleBits__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyleBits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1y_getStyleBits", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getStyleBits__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getStyleBits__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getStyleBits__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTabIndents__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTabIndents__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTabIndents__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTabIndents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3C_getTabIndents", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTabIndents__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTabIndents__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTabIndents__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTabWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTabWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTabWidth__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTabWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_I_getTabWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTabWidth__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTabWidth__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTabWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTargetEnd__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTargetEnd__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTargetEnd__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_38_getTargetEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTargetEnd__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTargetEnd__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTargetEnd__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTargetStart__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTargetStart__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTargetStart__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_36_getTargetStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTargetStart__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTargetStart__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTargetStart__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2Z_getText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getText__LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getText__LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTextLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTextLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTextLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_30_getTextLength", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTextLength__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTextLength__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTextLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getTextRange_II_LRString__arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_getTextRange_II_LRString__arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTextRange_II_LRString__args[] = 
{
  &StyledTextCtrl_methods_getTextRange_II_LRString__arg_startPos,
  &StyledTextCtrl_methods_getTextRange_II_LRString__arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTextRange_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTextRange_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2I_getTextRange", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTextRange_II_LRString__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTextRange_II_LRString__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTextRange_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getTwoPhaseDraw__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getTwoPhaseDraw__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getTwoPhaseDraw__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTwoPhaseDraw", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3W_getTwoPhaseDraw", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getTwoPhaseDraw__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getTwoPhaseDraw__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getTwoPhaseDraw__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getUndoCollection__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getUndoCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getUndoCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUndoCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_getUndoCollection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getUndoCollection__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getUndoCollection__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getUndoCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getUseHorizontalScrollBar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getUseHorizontalScrollBar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getUseHorizontalScrollBar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUseHorizontalScrollBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2d_getUseHorizontalScrollBar", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getUseHorizontalScrollBar__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getUseHorizontalScrollBar__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getUseHorizontalScrollBar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getUseTabs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getUseTabs__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getUseTabs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUseTabs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_27_getUseTabs", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getUseTabs__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getUseTabs__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getUseTabs__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getUseVerticalScrollBar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getUseVerticalScrollBar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getUseVerticalScrollBar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUseVerticalScrollBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3U_getUseVerticalScrollBar", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getUseVerticalScrollBar__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getUseVerticalScrollBar__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getUseVerticalScrollBar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getViewEOL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getViewEOL__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getViewEOL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getViewEOL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_52_getViewEOL", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getViewEOL__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getViewEOL__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getViewEOL__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getViewWhiteSpace__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getViewWhiteSpace__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getViewWhiteSpace__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getViewWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getViewWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getViewWhiteSpace__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getViewWhiteSpace__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getViewWhiteSpace__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getWrapMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getWrapMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getWrapMode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWrapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3K_getWrapMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getWrapMode__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getWrapMode__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getWrapMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getXOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getXOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getXOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getXOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5y_getXOffset", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getXOffset__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getXOffset__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getXOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_getZoom__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_getZoom__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_getZoom__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getZoom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5i_getZoom", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_getZoom__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_getZoom__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_getZoom__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_gotoLine_I_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_gotoLine_I_V_args[] = 
{
  &StyledTextCtrl_methods_gotoLine_I_V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_gotoLine_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_gotoLine_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "gotoLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_gotoLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_gotoLine_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_gotoLine_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_gotoLine_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_gotoPos_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_gotoPos_I_V_args[] = 
{
  &StyledTextCtrl_methods_gotoPos_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_gotoPos_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_gotoPos_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "gotoPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_gotoPos", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_gotoPos_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_gotoPos_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_gotoPos_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_hideLines_II_V_arg_lineStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_hideLines_II_V_arg_lineEnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineEnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_hideLines_II_V_args[] = 
{
  &StyledTextCtrl_methods_hideLines_II_V_arg_lineStart,
  &StyledTextCtrl_methods_hideLines_II_V_arg_lineEnd,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_hideLines_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_hideLines_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hideLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3t_hideLines", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_hideLines_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_hideLines_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_hideLines_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_hideSelection_Z_V_arg_hide = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hide", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_hideSelection_Z_V_args[] = 
{
  &StyledTextCtrl_methods_hideSelection_Z_V_arg_hide,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_hideSelection_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_hideSelection_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hideSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2J_hideSelection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_hideSelection_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_hideSelection_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_hideSelection_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_home__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_home__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_home__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "home", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4e_home", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_home__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_home__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_home__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeDisplay__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeDisplay__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeDisplay__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeDisplay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4M_homeDisplay", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeDisplay__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeDisplay__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeDisplay__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeDisplayExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeDisplayExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeDisplayExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeDisplayExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4N_homeDisplayExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeDisplayExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeDisplayExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeDisplayExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4f_homeExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5V_homeRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeWrap__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeWrap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeWrap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeWrap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4Q_homeWrap", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeWrap__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeWrap__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeWrap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_homeWrapExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_homeWrapExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_homeWrapExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "homeWrapExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4R_homeWrapExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_homeWrapExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_homeWrapExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_homeWrapExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__arg_indic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__args[] = 
{
  &StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__arg_indic,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_indicatorGetForeground_I_LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indicatorGetForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_1u_indicatorGetForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_indicatorGetForeground_I_LRColour__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_indicatorGetForeground_I_LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorGetStyle_I_I_arg_indic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_indicatorGetStyle_I_I_args[] = 
{
  &StyledTextCtrl_methods_indicatorGetStyle_I_I_arg_indic,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_indicatorGetStyle_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_indicatorGetStyle_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indicatorGetStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1s_indicatorGetStyle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_indicatorGetStyle_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_indicatorGetStyle_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_indicatorGetStyle_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_arg_indic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_arg_indic,
  &StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_indicatorSetForeground_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indicatorSetForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_indicatorSetForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_indicatorSetForeground_IINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_indicatorSetForeground_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorSetStyle_II_V_arg_indic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_indicatorSetStyle_II_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_indicatorSetStyle_II_V_args[] = 
{
  &StyledTextCtrl_methods_indicatorSetStyle_II_V_arg_indic,
  &StyledTextCtrl_methods_indicatorSetStyle_II_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_indicatorSetStyle_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_indicatorSetStyle_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indicatorSetStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_indicatorSetStyle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_indicatorSetStyle_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_indicatorSetStyle_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_indicatorSetStyle_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::cfgscript::RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_args[] = 
{
  &StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_initFromProps_INL_acdk_cfgscript_RProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initFromProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_initFromProps", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_initFromProps_INL_acdk_cfgscript_RProps__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_initFromProps_INL_acdk_cfgscript_RProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_initFromTextFile_INLRString__V_arg_fileName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_initFromTextFile_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_initFromTextFile_INLRString__V_arg_fileName,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_initFromTextFile_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_initFromTextFile_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initFromTextFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_initFromTextFile", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_initFromTextFile_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_initFromTextFile_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_initFromTextFile_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_insertText_IINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_insertText_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_insertText_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_insertText_IINLRString__V_arg_pos,
  &StyledTextCtrl_methods_insertText_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_insertText_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_insertText_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_insertText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_insertText_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_insertText_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_insertText_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineCopy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineCopy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineCopy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineCopy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4W_lineCopy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineCopy__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineCopy__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineCopy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineCut__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineCut__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineCut__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineCut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4D_lineCut", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineCut__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineCut__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineCut__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineDelete__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineDelete__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineDelete__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineDelete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4E_lineDelete", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineDelete__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineDelete__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineDelete__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_43_lineDown", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineDown__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineDown__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineDownRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineDownRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineDownRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineDownRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5R_lineDownRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineDownRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineDownRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineDownRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineDuplicate__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineDuplicate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineDuplicate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineDuplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4G_lineDuplicate", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineDuplicate__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineDuplicate__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineDuplicate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4g_lineEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEnd__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEnd__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndDisplay__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndDisplay__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndDisplay__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndDisplay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4O_lineEndDisplay", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndDisplay__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndDisplay__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndDisplay__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndDisplayExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndDisplayExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndDisplayExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndDisplayExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4P_lineEndDisplayExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndDisplayExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndDisplayExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndDisplayExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4h_lineEndExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5X_lineEndRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndWrap__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndWrap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndWrap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndWrap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4S_lineEndWrap", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndWrap__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndWrap__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndWrap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineEndWrapExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineEndWrapExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineEndWrapExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineEndWrapExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4T_lineEndWrapExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineEndWrapExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineEndWrapExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineEndWrapExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_lineFromPosition_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineFromPosition_I_I_args[] = 
{
  &StyledTextCtrl_methods_lineFromPosition_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineFromPosition_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineFromPosition_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineFromPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2K_lineFromPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineFromPosition_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineFromPosition_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineFromPosition_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_lineLength_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineLength_I_I_args[] = 
{
  &StyledTextCtrl_methods_lineLength_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineLength_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineLength_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4Y_lineLength", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineLength_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineLength_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineLength_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_lineScroll_II_V_arg_columns = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columns", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_lineScroll_II_V_arg_lines = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lines", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineScroll_II_V_args[] = 
{
  &StyledTextCtrl_methods_lineScroll_II_V_arg_columns,
  &StyledTextCtrl_methods_lineScroll_II_V_arg_lines,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineScroll_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineScroll_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineScroll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2M_lineScroll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineScroll_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineScroll_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineScroll_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineScrollDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineScrollDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineScrollDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineScrollDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4J_lineScrollDown", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineScrollDown__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineScrollDown__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineScrollDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineScrollUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineScrollUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineScrollUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineScrollUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4K_lineScrollUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineScrollUp__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineScrollUp__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineScrollUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineTranspose__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineTranspose__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineTranspose__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineTranspose", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4F_lineTranspose", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineTranspose__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineTranspose__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineTranspose__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_44_lineUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineUp__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineUp__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineUpExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineUpExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineUpExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineUpExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_45_lineUpExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineUpExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineUpExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineUpExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lineUpRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lineUpRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lineUpRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineUpRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5S_lineUpRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lineUpRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lineUpRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lineUpRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_linesJoin__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_linesJoin__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_linesJoin__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "linesJoin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3Z_linesJoin", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_linesJoin__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_linesJoin__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_linesJoin__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_linesOnScreen__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_linesOnScreen__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_linesOnScreen__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "linesOnScreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5e_linesOnScreen", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_linesOnScreen__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_linesOnScreen__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_linesOnScreen__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_linesSplit_I_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_linesSplit_I_V_args[] = 
{
  &StyledTextCtrl_methods_linesSplit_I_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_linesSplit_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_linesSplit_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "linesSplit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_40_linesSplit", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_linesSplit_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_linesSplit_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_linesSplit_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_loadConfig_INLRString__V_arg_csfFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "csfFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_loadConfig_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_loadConfig_INLRString__V_arg_csfFile,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_loadConfig_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_loadConfig_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadConfig", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_loadConfig", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_loadConfig_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_loadConfig_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_loadConfig_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_loadFile_INLRString__Z_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_loadFile_INLRString__Z_args[] = 
{
  &StyledTextCtrl_methods_loadFile_INLRString__Z_arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_loadFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_loadFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6v_loadFile", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_loadFile_INLRString__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_loadFile_INLRString__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_loadFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_loadStdConfig__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_loadStdConfig__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_loadStdConfig__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadStdConfig", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_loadStdConfig", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_loadStdConfig__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_loadStdConfig__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_loadStdConfig__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_lowerCase__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_lowerCase__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_lowerCase__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4H_lowerCase", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_lowerCase__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_lowerCase__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_lowerCase__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerAdd_II_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerAdd_II_I_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerAdd_II_I_args[] = 
{
  &StyledTextCtrl_methods_markerAdd_II_I_arg_line,
  &StyledTextCtrl_methods_markerAdd_II_I_arg_markerNumber,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerAdd_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerAdd_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerAdd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_N_markerAdd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerAdd_II_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerAdd_II_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerAdd_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDefine_II_V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDefine_II_V_arg_markerSymbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerSymbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerDefine_II_V_args[] = 
{
  &StyledTextCtrl_methods_markerDefine_II_V_arg_markerNumber,
  &StyledTextCtrl_methods_markerDefine_II_V_arg_markerSymbol,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerDefine_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerDefine_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_markerDefine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerDefine_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerDefine_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerDefine_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_args[] = 
{
  &StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_arg_markerNumber,
  &StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerDefineBitmap_IINLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerDefineBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_T_markerDefineBitmap", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerDefineBitmap_IINLRBitmap__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerDefineBitmap_IINLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDelete_II_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDelete_II_V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerDelete_II_V_args[] = 
{
  &StyledTextCtrl_methods_markerDelete_II_V_arg_line,
  &StyledTextCtrl_methods_markerDelete_II_V_arg_markerNumber,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerDelete_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerDelete_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerDelete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O_markerDelete", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerDelete_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerDelete_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerDelete_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDeleteAll_I_V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerDeleteAll_I_V_args[] = 
{
  &StyledTextCtrl_methods_markerDeleteAll_I_V_arg_markerNumber,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerDeleteAll_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerDeleteAll_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerDeleteAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_P_markerDeleteAll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerDeleteAll_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerDeleteAll_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerDeleteAll_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerDeleteHandle_I_V_arg_handle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "handle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerDeleteHandle_I_V_args[] = 
{
  &StyledTextCtrl_methods_markerDeleteHandle_I_V_arg_handle,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerDeleteHandle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerDeleteHandle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerDeleteHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_markerDeleteHandle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerDeleteHandle_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerDeleteHandle_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerDeleteHandle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerGet_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerGet_I_I_args[] = 
{
  &StyledTextCtrl_methods_markerGet_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerGet_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerGet_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerGet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_Q_markerGet", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerGet_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerGet_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerGet_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerLineFromHandle_I_I_arg_handle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "handle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerLineFromHandle_I_I_args[] = 
{
  &StyledTextCtrl_methods_markerLineFromHandle_I_I_arg_handle,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerLineFromHandle_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerLineFromHandle_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerLineFromHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_markerLineFromHandle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerLineFromHandle_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerLineFromHandle_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerLineFromHandle_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerNext_II_I_arg_lineStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerNext_II_I_arg_markerMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerNext_II_I_args[] = 
{
  &StyledTextCtrl_methods_markerNext_II_I_arg_lineStart,
  &StyledTextCtrl_methods_markerNext_II_I_arg_markerMask,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerNext_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerNext_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_R_markerNext", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerNext_II_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerNext_II_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerNext_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerPrevious_II_I_arg_lineStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerPrevious_II_I_arg_markerMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerPrevious_II_I_args[] = 
{
  &StyledTextCtrl_methods_markerPrevious_II_I_arg_lineStart,
  &StyledTextCtrl_methods_markerPrevious_II_I_arg_markerMask,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerPrevious_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerPrevious_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerPrevious", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_markerPrevious", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerPrevious_II_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerPrevious_II_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerPrevious_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_arg_markerNumber,
  &StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerSetBackground_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerSetBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_markerSetBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerSetBackground_IINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerSetBackground_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_arg_markerNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "markerNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_arg_markerNumber,
  &StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_markerSetForeground_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markerSetForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_markerSetForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_markerSetForeground_IINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_markerSetForeground_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_moveCaretInsideView__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_moveCaretInsideView__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_moveCaretInsideView__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveCaretInsideView", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4X_moveCaretInsideView", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_moveCaretInsideView__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_moveCaretInsideView__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_moveCaretInsideView__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_newLine__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_newLine__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_newLine__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4v_newLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_newLine__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_newLine__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_newLine__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4o_pageDown", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageDown__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageDown__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageDownExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageDownExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageDownExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageDownExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4p_pageDownExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageDownExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageDownExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageDownExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageDownRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageDownRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageDownRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageDownRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5Z_pageDownRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageDownRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageDownRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageDownRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4m_pageUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageUp__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageUp__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageUpExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageUpExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageUpExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageUpExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4n_pageUpExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageUpExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageUpExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageUpExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pageUpRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pageUpRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pageUpRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageUpRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5Y_pageUpRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pageUpRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pageUpRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pageUpRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_paraDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_paraDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_paraDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paraDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5I_paraDown", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_paraDown__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_paraDown__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_paraDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_paraDownExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_paraDownExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_paraDownExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paraDownExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5J_paraDownExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_paraDownExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_paraDownExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_paraDownExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_paraUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_paraUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_paraUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paraUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5K_paraUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_paraUp__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_paraUp__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_paraUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_paraUpExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_paraUpExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_paraUpExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paraUpExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5L_paraUpExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_paraUpExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_paraUpExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_paraUpExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_paste__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_paste__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_paste__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paste", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2W_paste", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_paste__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_paste__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_paste__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_pointFromPosition_I_LRPoint__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_pointFromPosition_I_LRPoint__args[] = 
{
  &StyledTextCtrl_methods_pointFromPosition_I_LRPoint__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_pointFromPosition_I_LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_pointFromPosition_I_LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pointFromPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_6p_pointFromPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_pointFromPosition_I_LRPoint__args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_pointFromPosition_I_LRPoint__exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_pointFromPosition_I_LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionAfter_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_positionAfter_I_I_args[] = 
{
  &StyledTextCtrl_methods_positionAfter_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_positionAfter_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_positionAfter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionAfter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5N_positionAfter", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_positionAfter_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_positionAfter_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_positionAfter_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionBefore_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_positionBefore_I_I_args[] = 
{
  &StyledTextCtrl_methods_positionBefore_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_positionBefore_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_positionBefore_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionBefore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5M_positionBefore", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_positionBefore_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_positionBefore_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_positionBefore_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionFromLine_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_positionFromLine_I_I_args[] = 
{
  &StyledTextCtrl_methods_positionFromLine_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_positionFromLine_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_positionFromLine_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionFromLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2L_positionFromLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_positionFromLine_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_positionFromLine_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_positionFromLine_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_args[] = 
{
  &StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_positionFromPoint_INLRPoint__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionFromPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_positionFromPoint", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_positionFromPoint_INLRPoint__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_positionFromPoint_INLRPoint__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionFromPointClose_II_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_positionFromPointClose_II_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_positionFromPointClose_II_I_args[] = 
{
  &StyledTextCtrl_methods_positionFromPointClose_II_I_arg_x,
  &StyledTextCtrl_methods_positionFromPointClose_II_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_positionFromPointClose_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_positionFromPointClose_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionFromPointClose", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_positionFromPointClose", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_positionFromPointClose_II_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_positionFromPointClose_II_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_positionFromPointClose_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_redo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_redo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_redo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "redo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_redo", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_redo__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_redo__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_redo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_registerImage_IINLRBitmap__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_registerImage_IINLRBitmap__V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_registerImage_IINLRBitmap__V_args[] = 
{
  &StyledTextCtrl_methods_registerImage_IINLRBitmap__V_arg_type,
  &StyledTextCtrl_methods_registerImage_IINLRBitmap__V_arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_registerImage_IINLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_registerImage_IINLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_20_registerImage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_registerImage_IINLRBitmap__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_registerImage_IINLRBitmap__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_registerImage_IINLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_replaceSelection_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_replaceSelection_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_replaceSelection_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_replaceSelection_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_replaceSelection_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2O_replaceSelection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_replaceSelection_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_replaceSelection_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_replaceSelection_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_replaceTarget_INLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_replaceTarget_INLRString__I_args[] = 
{
  &StyledTextCtrl_methods_replaceTarget_INLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_replaceTarget_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_replaceTarget_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_39_replaceTarget", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_replaceTarget_INLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_replaceTarget_INLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_replaceTarget_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_replaceTargetRE_INLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_replaceTargetRE_INLRString__I_args[] = 
{
  &StyledTextCtrl_methods_replaceTargetRE_INLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_replaceTargetRE_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_replaceTargetRE_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceTargetRE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3a_replaceTargetRE", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_replaceTargetRE_INLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_replaceTargetRE_INLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_replaceTargetRE_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_saveFile_INLRString__Z_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_saveFile_INLRString__Z_args[] = 
{
  &StyledTextCtrl_methods_saveFile_INLRString__Z_arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_saveFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_saveFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "saveFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6u_saveFile", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_saveFile_INLRString__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_saveFile_INLRString__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_saveFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_scrollToColumn_I_V_arg_column = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "column", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_scrollToColumn_I_V_args[] = 
{
  &StyledTextCtrl_methods_scrollToColumn_I_V_arg_column,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_scrollToColumn_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_scrollToColumn_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollToColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6r_scrollToColumn", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_scrollToColumn_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_scrollToColumn_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_scrollToColumn_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_scrollToLine_I_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_scrollToLine_I_V_args[] = 
{
  &StyledTextCtrl_methods_scrollToLine_I_V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_scrollToLine_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_scrollToLine_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollToLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6q_scrollToLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_scrollToLine_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_scrollToLine_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_scrollToLine_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_searchAnchor__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_searchAnchor__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_searchAnchor__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "searchAnchor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5b_searchAnchor", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_searchAnchor__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_searchAnchor__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_searchAnchor__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_searchInTarget_INLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_searchInTarget_INLRString__I_args[] = 
{
  &StyledTextCtrl_methods_searchInTarget_INLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_searchInTarget_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_searchInTarget_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "searchInTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3b_searchInTarget", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_searchInTarget_INLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_searchInTarget_INLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_searchInTarget_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_searchNext_IINLRString__I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_searchNext_IINLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_searchNext_IINLRString__I_args[] = 
{
  &StyledTextCtrl_methods_searchNext_IINLRString__I_arg_flags,
  &StyledTextCtrl_methods_searchNext_IINLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_searchNext_IINLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_searchNext_IINLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "searchNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5c_searchNext", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_searchNext_IINLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_searchNext_IINLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_searchNext_IINLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_searchPrev_IINLRString__I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_searchPrev_IINLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_searchPrev_IINLRString__I_args[] = 
{
  &StyledTextCtrl_methods_searchPrev_IINLRString__I_arg_flags,
  &StyledTextCtrl_methods_searchPrev_IINLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_searchPrev_IINLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_searchPrev_IINLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "searchPrev", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5d_searchPrev", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_searchPrev_IINLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_searchPrev_IINLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_searchPrev_IINLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_selectAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_selectAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_selectAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_selectAll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_selectAll__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_selectAll__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_selectAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_selectionIsRectangle__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_selectionIsRectangle__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_selectionIsRectangle__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectionIsRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5g_selectionIsRectangle", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_selectionIsRectangle__Z_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_selectionIsRectangle__Z_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_selectionIsRectangle__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setAnchor_I_V_arg_posAnchor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "posAnchor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setAnchor_I_V_args[] = 
{
  &StyledTextCtrl_methods_setAnchor_I_V_arg_posAnchor,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setAnchor_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setAnchor_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAnchor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setAnchor", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setAnchor_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setAnchor_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setAnchor_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_arg_bsUnIndents = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bsUnIndents", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_arg_bsUnIndents,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setBackSpaceUnIndents_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackSpaceUnIndents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3D_setBackSpaceUnIndents", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setBackSpaceUnIndents_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setBackSpaceUnIndents_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setBufferedDraw_Z_V_arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setBufferedDraw_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setBufferedDraw_Z_V_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setBufferedDraw_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setBufferedDraw_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBufferedDraw", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_setBufferedDraw", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setBufferedDraw_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setBufferedDraw_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setBufferedDraw_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCaretForeground_INLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCaretForeground_INLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setCaretForeground_INLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCaretForeground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCaretForeground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCaretForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1h_setCaretForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCaretForeground_INLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCaretForeground_INLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCaretForeground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCaretLineVisible_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCaretLineVisible_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setCaretLineVisible_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCaretLineVisible_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCaretLineVisible_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCaretLineVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1D_setCaretLineVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCaretLineVisible_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCaretLineVisible_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCaretLineVisible_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCaretPeriod_I_V_arg_milliseconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "milliseconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCaretPeriod_I_V_args[] = 
{
  &StyledTextCtrl_methods_setCaretPeriod_I_V_arg_milliseconds,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCaretPeriod_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCaretPeriod_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCaretPeriod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1n_setCaretPeriod", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCaretPeriod_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCaretPeriod_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCaretPeriod_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCaretWidth_I_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCaretWidth_I_V_args[] = 
{
  &StyledTextCtrl_methods_setCaretWidth_I_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCaretWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCaretWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCaretWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_33_setCaretWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCaretWidth_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCaretWidth_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCaretWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCharsDefault__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCharsDefault__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCharsDefault__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCharsDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_69_setCharsDefault", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCharsDefault__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCharsDefault__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCharsDefault__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCodePage_I_V_arg_codePage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "codePage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCodePage_I_V_args[] = 
{
  &StyledTextCtrl_methods_setCodePage_I_V_arg_codePage,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCodePage_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCodePage_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCodePage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setCodePage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCodePage_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCodePage_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCodePage_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setControlCharSymbol_I_V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setControlCharSymbol_I_V_args[] = 
{
  &StyledTextCtrl_methods_setControlCharSymbol_I_V_arg_symbol,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setControlCharSymbol_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setControlCharSymbol_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setControlCharSymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5o_setControlCharSymbol", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setControlCharSymbol_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setControlCharSymbol_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setControlCharSymbol_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setCurrentPos_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setCurrentPos_I_V_args[] = 
{
  &StyledTextCtrl_methods_setCurrentPos_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setCurrentPos_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setCurrentPos_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurrentPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2m_setCurrentPos", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setCurrentPos_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setCurrentPos_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setCurrentPos_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setEOLMode_I_V_arg_eolMode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "eolMode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setEOLMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setEOLMode_I_V_arg_eolMode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setEOLMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setEOLMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEOLMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setEOLMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setEOLMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setEOLMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setEOLMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setEdgeColour_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setEdgeColour_INLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setEdgeColour_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setEdgeColour_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setEdgeColour_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEdgeColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5a_setEdgeColour", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setEdgeColour_INLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setEdgeColour_INLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setEdgeColour_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setEdgeColumn_I_V_arg_column = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "column", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setEdgeColumn_I_V_args[] = 
{
  &StyledTextCtrl_methods_setEdgeColumn_I_V_arg_column,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setEdgeColumn_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setEdgeColumn_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEdgeColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_56_setEdgeColumn", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setEdgeColumn_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setEdgeColumn_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setEdgeColumn_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setEdgeMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setEdgeMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setEdgeMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setEdgeMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setEdgeMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEdgeMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_58_setEdgeMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setEdgeMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setEdgeMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setEdgeMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setEndAtLastLine_Z_V_arg_endAtLastLine = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endAtLastLine", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setEndAtLastLine_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setEndAtLastLine_Z_V_arg_endAtLastLine,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setEndAtLastLine_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setEndAtLastLine_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEndAtLastLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3Q_setEndAtLastLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setEndAtLastLine_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setEndAtLastLine_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setEndAtLastLine_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldExpanded_IZ_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldExpanded_IZ_V_arg_expanded = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expanded", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setFoldExpanded_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_setFoldExpanded_IZ_V_arg_line,
  &StyledTextCtrl_methods_setFoldExpanded_IZ_V_arg_expanded,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setFoldExpanded_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setFoldExpanded_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3v_setFoldExpanded", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setFoldExpanded_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setFoldExpanded_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setFoldExpanded_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldFlags_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setFoldFlags_I_V_args[] = 
{
  &StyledTextCtrl_methods_setFoldFlags_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setFoldFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setFoldFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3z_setFoldFlags", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setFoldFlags_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setFoldFlags_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setFoldFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldLevel_II_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldLevel_II_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setFoldLevel_II_V_args[] = 
{
  &StyledTextCtrl_methods_setFoldLevel_II_V_arg_line,
  &StyledTextCtrl_methods_setFoldLevel_II_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setFoldLevel_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setFoldLevel_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3o_setFoldLevel", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setFoldLevel_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setFoldLevel_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setFoldLevel_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setFoldMarginColour_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldMarginColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_41_setFoldMarginColour", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setFoldMarginColour_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setFoldMarginColour_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setFoldMarginHiColour_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldMarginHiColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_42_setFoldMarginHiColour", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setFoldMarginHiColour_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setFoldMarginHiColour_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHighlightGuide_I_V_arg_column = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "column", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setHighlightGuide_I_V_args[] = 
{
  &StyledTextCtrl_methods_setHighlightGuide_I_V_arg_column,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setHighlightGuide_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setHighlightGuide_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHighlightGuide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2g_setHighlightGuide", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setHighlightGuide_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setHighlightGuide_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setHighlightGuide_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setHotspotActiveBackground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHotspotActiveBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5F_setHotspotActiveBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setHotspotActiveBackground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setHotspotActiveBackground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setHotspotActiveForeground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHotspotActiveForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5E_setHotspotActiveForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setHotspotActiveForeground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setHotspotActiveForeground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_arg_underline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "underline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_arg_underline,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setHotspotActiveUnderline_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHotspotActiveUnderline", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5G_setHotspotActiveUnderline", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setHotspotActiveUnderline_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setHotspotActiveUnderline_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setHotspotSingleLine_Z_V_arg_singleLine = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "singleLine", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setHotspotSingleLine_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setHotspotSingleLine_Z_V_arg_singleLine,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setHotspotSingleLine_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setHotspotSingleLine_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHotspotSingleLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5H_setHotspotSingleLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setHotspotSingleLine_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setHotspotSingleLine_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setHotspotSingleLine_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setIndent_I_V_arg_indentSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indentSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setIndent_I_V_args[] = 
{
  &StyledTextCtrl_methods_setIndent_I_V_arg_indentSize,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setIndent_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setIndent_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_24_setIndent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setIndent_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setIndent_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setIndent_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setIndentationGuides_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setIndentationGuides_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setIndentationGuides_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setIndentationGuides_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setIndentationGuides_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIndentationGuides", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2e_setIndentationGuides", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setIndentationGuides_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setIndentationGuides_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setIndentationGuides_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setKeyWords_IINLRString__V_arg_keywordSet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "keywordSet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setKeyWords_IINLRString__V_arg_keyWords = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyWords", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setKeyWords_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setKeyWords_IINLRString__V_arg_keywordSet,
  &StyledTextCtrl_methods_setKeyWords_IINLRString__V_arg_keyWords,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setKeyWords_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setKeyWords_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setKeyWords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6g_setKeyWords", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setKeyWords_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setKeyWords_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setKeyWords_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLastKeydownProcessed_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLastKeydownProcessed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6t_setLastKeydownProcessed", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLastKeydownProcessed_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLastKeydownProcessed_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLayoutCache_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLayoutCache_I_V_args[] = 
{
  &StyledTextCtrl_methods_setLayoutCache_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLayoutCache_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLayoutCache_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLayoutCache", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3L_setLayoutCache", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLayoutCache_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLayoutCache_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLayoutCache_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLexer_I_V_arg_lexer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lexer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLexer_I_V_args[] = 
{
  &StyledTextCtrl_methods_setLexer_I_V_arg_lexer,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLexer_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLexer_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLexer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6c_setLexer", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLexer_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLexer_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLexer_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLexerLanguage_INLRString__V_arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLexerLanguage_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setLexerLanguage_INLRString__V_arg_language,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLexerLanguage_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLexerLanguage_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLexerLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6h_setLexerLanguage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLexerLanguage_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLexerLanguage_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLexerLanguage_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLineIndentation_II_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLineIndentation_II_V_arg_indentSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indentSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLineIndentation_II_V_args[] = 
{
  &StyledTextCtrl_methods_setLineIndentation_II_V_arg_line,
  &StyledTextCtrl_methods_setLineIndentation_II_V_arg_indentSize,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLineIndentation_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLineIndentation_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLineIndentation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_28_setLineIndentation", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLineIndentation_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLineIndentation_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLineIndentation_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLineState_II_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setLineState_II_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setLineState_II_V_args[] = 
{
  &StyledTextCtrl_methods_setLineState_II_V_arg_line,
  &StyledTextCtrl_methods_setLineState_II_V_arg_state,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setLineState_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setLineState_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLineState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1z_setLineState", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setLineState_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setLineState_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setLineState_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginLeft_I_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginLeft_I_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginLeft_I_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginLeft_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginLeft_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2B_setMarginLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginLeft_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginLeft_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginLeft_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginMask_II_V_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginMask_II_V_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginMask_II_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginMask_II_V_arg_margin,
  &StyledTextCtrl_methods_setMarginMask_II_V_arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginMask_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginMask_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginMask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Y_setMarginMask", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginMask_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginMask_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginMask_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginRight_I_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginRight_I_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginRight_I_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginRight_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginRight_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2D_setMarginRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginRight_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginRight_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginRight_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginSensitive_IZ_V_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginSensitive_IZ_V_arg_sensitive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sensitive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginSensitive_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginSensitive_IZ_V_arg_margin,
  &StyledTextCtrl_methods_setMarginSensitive_IZ_V_arg_sensitive,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginSensitive_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginSensitive_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_10_setMarginSensitive", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginSensitive_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginSensitive_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginSensitive_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginType_II_V_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginType_II_V_arg_marginType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "marginType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginType_II_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginType_II_V_arg_margin,
  &StyledTextCtrl_methods_setMarginType_II_V_arg_marginType,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginType_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginType_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_U_setMarginType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginType_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginType_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginType_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginWidth_II_V_arg_margin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "margin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMarginWidth_II_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMarginWidth_II_V_args[] = 
{
  &StyledTextCtrl_methods_setMarginWidth_II_V_arg_margin,
  &StyledTextCtrl_methods_setMarginWidth_II_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMarginWidth_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMarginWidth_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMarginWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_W_setMarginWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMarginWidth_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMarginWidth_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMarginWidth_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMargins_II_V_arg_left = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "left", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMargins_II_V_arg_right = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "right", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMargins_II_V_args[] = 
{
  &StyledTextCtrl_methods_setMargins_II_V_arg_left,
  &StyledTextCtrl_methods_setMargins_II_V_arg_right,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMargins_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMargins_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6n_setMargins", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMargins_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMargins_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMargins_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setModEventMask_I_V_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setModEventMask_I_V_args[] = 
{
  &StyledTextCtrl_methods_setModEventMask_I_V_arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setModEventMask_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setModEventMask_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setModEventMask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_54_setModEventMask", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setModEventMask_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setModEventMask_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setModEventMask_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMouseDownCaptures_Z_V_arg_captures = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "captures", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMouseDownCaptures_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setMouseDownCaptures_Z_V_arg_captures,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMouseDownCaptures_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMouseDownCaptures_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMouseDownCaptures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5m_setMouseDownCaptures", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMouseDownCaptures_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMouseDownCaptures_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMouseDownCaptures_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setMouseDwellTime_I_V_arg_periodMilliseconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "periodMilliseconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setMouseDwellTime_I_V_args[] = 
{
  &StyledTextCtrl_methods_setMouseDwellTime_I_V_arg_periodMilliseconds,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setMouseDwellTime_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setMouseDwellTime_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMouseDwellTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3F_setMouseDwellTime", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setMouseDwellTime_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setMouseDwellTime_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setMouseDwellTime_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setOvertype_Z_V_arg_overtype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "overtype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setOvertype_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setOvertype_Z_V_arg_overtype,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setOvertype_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setOvertype_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOvertype", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_31_setOvertype", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setOvertype_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setOvertype_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setOvertype_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setPrintColourMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setPrintColourMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setPrintColourMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setPrintColourMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setPrintColourMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPrintColourMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2t_setPrintColourMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setPrintColourMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setPrintColourMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setPrintColourMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setPrintMagnification_I_V_arg_magnification = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "magnification", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setPrintMagnification_I_V_args[] = 
{
  &StyledTextCtrl_methods_setPrintMagnification_I_V_arg_magnification,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setPrintMagnification_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setPrintMagnification_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPrintMagnification", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2r_setPrintMagnification", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setPrintMagnification_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setPrintMagnification_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setPrintMagnification_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setPrintWrapMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setPrintWrapMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setPrintWrapMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setPrintWrapMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setPrintWrapMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPrintWrapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5C_setPrintWrapMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setPrintWrapMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setPrintWrapMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setPrintWrapMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_arg_key,
  &StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setProperty_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6f_setProperty", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setProperty_INLRString_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setProperty_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setReadOnly_Z_V_arg_readOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setReadOnly_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setReadOnly_Z_V_arg_readOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setReadOnly_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setReadOnly_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2P_setReadOnly", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setReadOnly_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setReadOnly_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setReadOnly_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSavePoint__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSavePoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSavePoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSavePoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setSavePoint", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSavePoint__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSavePoint__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSavePoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setScrollWidth_I_V_arg_pixels = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixels", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setScrollWidth_I_V_args[] = 
{
  &StyledTextCtrl_methods_setScrollWidth_I_V_arg_pixels,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setScrollWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setScrollWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3N_setScrollWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setScrollWidth_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setScrollWidth_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setScrollWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSearchFlags_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSearchFlags_I_V_args[] = 
{
  &StyledTextCtrl_methods_setSearchFlags_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSearchFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSearchFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSearchFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3c_setSearchFlags", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSearchFlags_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSearchFlags_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSearchFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelBackground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_setSelBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelBackground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelBackground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelForeground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_setSelForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelForeground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelForeground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelection_II_V_arg_startPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelection_II_V_arg_endPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelection_II_V_args[] = 
{
  &StyledTextCtrl_methods_setSelection_II_V_arg_startPos,
  &StyledTextCtrl_methods_setSelection_II_V_arg_endPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelection_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelection_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2G_setSelection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelection_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelection_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelection_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelectionEnd_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelectionEnd_I_V_args[] = 
{
  &StyledTextCtrl_methods_setSelectionEnd_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelectionEnd_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelectionEnd_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelectionEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2p_setSelectionEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelectionEnd_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelectionEnd_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelectionEnd_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelectionMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelectionMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setSelectionMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelectionMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelectionMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelectionMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5Q_setSelectionMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelectionMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelectionMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelectionMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setSelectionStart_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setSelectionStart_I_V_args[] = 
{
  &StyledTextCtrl_methods_setSelectionStart_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setSelectionStart_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setSelectionStart_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelectionStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2n_setSelectionStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setSelectionStart_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setSelectionStart_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setSelectionStart_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setStatus_I_V_arg_status = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "status", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setStatus_I_V_args[] = 
{
  &StyledTextCtrl_methods_setStatus_I_V_arg_status,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setStatus_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setStatus_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5k_setStatus", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setStatus_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setStatus_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setStatus_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setStyleBits_I_V_arg_bits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setStyleBits_I_V_args[] = 
{
  &StyledTextCtrl_methods_setStyleBits_I_V_arg_bits,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setStyleBits_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setStyleBits_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyleBits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_setStyleBits", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setStyleBits_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setStyleBits_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setStyleBits_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setStyling_II_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setStyling_II_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setStyling_II_V_args[] = 
{
  &StyledTextCtrl_methods_setStyling_II_V_arg_length,
  &StyledTextCtrl_methods_setStyling_II_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setStyling_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setStyling_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setStyling", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setStyling_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setStyling_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setStyling_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setTabIndents_Z_V_arg_tabIndents = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tabIndents", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setTabIndents_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setTabIndents_Z_V_arg_tabIndents,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setTabIndents_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setTabIndents_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTabIndents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3B_setTabIndents", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setTabIndents_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setTabIndents_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setTabIndents_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setTabWidth_I_V_arg_tabWidth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tabWidth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setTabWidth_I_V_args[] = 
{
  &StyledTextCtrl_methods_setTabWidth_I_V_arg_tabWidth,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setTabWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setTabWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTabWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_setTabWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setTabWidth_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setTabWidth_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setTabWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setTargetEnd_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setTargetEnd_I_V_args[] = 
{
  &StyledTextCtrl_methods_setTargetEnd_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setTargetEnd_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setTargetEnd_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTargetEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_37_setTargetEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setTargetEnd_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setTargetEnd_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setTargetEnd_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setTargetStart_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setTargetStart_I_V_args[] = 
{
  &StyledTextCtrl_methods_setTargetStart_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setTargetStart_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setTargetStart_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTargetStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_35_setTargetStart", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setTargetStart_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setTargetStart_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setTargetStart_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setText_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2Y_setText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setText_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setText_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_arg_twoPhase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "twoPhase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_arg_twoPhase,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setTwoPhaseDraw_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTwoPhaseDraw", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3X_setTwoPhaseDraw", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setTwoPhaseDraw_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setTwoPhaseDraw_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setUndoCollection_Z_V_arg_collectUndo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "collectUndo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setUndoCollection_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setUndoCollection_Z_V_arg_collectUndo,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setUndoCollection_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setUndoCollection_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUndoCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setUndoCollection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setUndoCollection_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setUndoCollection_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setUndoCollection_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setUseAntiAliasing_Z_V_arg_useAA = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useAA", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setUseAntiAliasing_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setUseAntiAliasing_Z_V_arg_useAA,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setUseAntiAliasing_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setUseAntiAliasing_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUseAntiAliasing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6w_setUseAntiAliasing", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setUseAntiAliasing_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setUseAntiAliasing_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setUseAntiAliasing_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setUseHorizontalScrollBar_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUseHorizontalScrollBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2c_setUseHorizontalScrollBar", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setUseHorizontalScrollBar_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setUseHorizontalScrollBar_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setUseTabs_Z_V_arg_useTabs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useTabs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setUseTabs_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setUseTabs_Z_V_arg_useTabs,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setUseTabs_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setUseTabs_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUseTabs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_26_setUseTabs", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setUseTabs_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setUseTabs_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setUseTabs_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setUseVerticalScrollBar_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUseVerticalScrollBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3T_setUseVerticalScrollBar", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setUseVerticalScrollBar_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setUseVerticalScrollBar_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setViewEOL_Z_V_arg_visible = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "visible", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setViewEOL_Z_V_args[] = 
{
  &StyledTextCtrl_methods_setViewEOL_Z_V_arg_visible,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setViewEOL_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setViewEOL_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setViewEOL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_53_setViewEOL", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setViewEOL_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setViewEOL_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setViewEOL_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setViewWhiteSpace_I_V_arg_viewWS = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "viewWS", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setViewWhiteSpace_I_V_args[] = 
{
  &StyledTextCtrl_methods_setViewWhiteSpace_I_V_arg_viewWS,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setViewWhiteSpace_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setViewWhiteSpace_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setViewWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setViewWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setViewWhiteSpace_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setViewWhiteSpace_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setViewWhiteSpace_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setVisiblePolicy_II_V_arg_visiblePolicy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "visiblePolicy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setVisiblePolicy_II_V_arg_visibleSlop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "visibleSlop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setVisiblePolicy_II_V_args[] = 
{
  &StyledTextCtrl_methods_setVisiblePolicy_II_V_arg_visiblePolicy,
  &StyledTextCtrl_methods_setVisiblePolicy_II_V_arg_visibleSlop,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setVisiblePolicy_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setVisiblePolicy_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setVisiblePolicy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5u_setVisiblePolicy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setVisiblePolicy_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setVisiblePolicy_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setVisiblePolicy_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setWhitespaceBackground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWhitespaceBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_setWhitespaceBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setWhitespaceBackground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setWhitespaceBackground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_arg_characters = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "characters", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_arg_characters,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setWhitespaceChars_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWhitespaceChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_68_setWhitespaceChars", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setWhitespaceChars_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setWhitespaceChars_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_arg_useSetting = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "useSetting", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_arg_useSetting,
  &StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setWhitespaceForeground_ZINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWhitespaceForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1v_setWhitespaceForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setWhitespaceForeground_ZINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setWhitespaceForeground_ZINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWordChars_INLRString__V_arg_characters = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "characters", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setWordChars_INLRString__V_args[] = 
{
  &StyledTextCtrl_methods_setWordChars_INLRString__V_arg_characters,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setWordChars_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setWordChars_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWordChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_setWordChars", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setWordChars_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setWordChars_INLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setWordChars_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setWrapMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setWrapMode_I_V_args[] = 
{
  &StyledTextCtrl_methods_setWrapMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setWrapMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setWrapMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWrapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3J_setWrapMode", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setWrapMode_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setWrapMode_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setWrapMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setXCaretPolicy_II_V_arg_caretPolicy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "caretPolicy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setXCaretPolicy_II_V_arg_caretSlop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "caretSlop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setXCaretPolicy_II_V_args[] = 
{
  &StyledTextCtrl_methods_setXCaretPolicy_II_V_arg_caretPolicy,
  &StyledTextCtrl_methods_setXCaretPolicy_II_V_arg_caretSlop,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setXCaretPolicy_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setXCaretPolicy_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setXCaretPolicy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5A_setXCaretPolicy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setXCaretPolicy_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setXCaretPolicy_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setXCaretPolicy_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setXOffset_I_V_arg_newOffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newOffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setXOffset_I_V_args[] = 
{
  &StyledTextCtrl_methods_setXOffset_I_V_arg_newOffset,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setXOffset_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setXOffset_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setXOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5x_setXOffset", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setXOffset_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setXOffset_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setXOffset_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setYCaretPolicy_II_V_arg_caretPolicy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "caretPolicy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setYCaretPolicy_II_V_arg_caretSlop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "caretSlop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setYCaretPolicy_II_V_args[] = 
{
  &StyledTextCtrl_methods_setYCaretPolicy_II_V_arg_caretPolicy,
  &StyledTextCtrl_methods_setYCaretPolicy_II_V_arg_caretSlop,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setYCaretPolicy_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setYCaretPolicy_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setYCaretPolicy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5B_setYCaretPolicy", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setYCaretPolicy_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setYCaretPolicy_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setYCaretPolicy_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_setZoom_I_V_arg_zoom = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "zoom", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_setZoom_I_V_args[] = 
{
  &StyledTextCtrl_methods_setZoom_I_V_arg_zoom,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_setZoom_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_setZoom_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setZoom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5h_setZoom", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_setZoom_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_setZoom_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_setZoom_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_showLines_II_V_arg_lineStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_showLines_II_V_arg_lineEnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineEnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_showLines_II_V_args[] = 
{
  &StyledTextCtrl_methods_showLines_II_V_arg_lineStart,
  &StyledTextCtrl_methods_showLines_II_V_arg_lineEnd,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_showLines_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_showLines_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3s_showLines", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_showLines_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_showLines_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_showLines_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_startRecord__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_startRecord__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_startRecord__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startRecord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6a_startRecord", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_startRecord__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_startRecord__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_startRecord__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_startStyling_II_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_startStyling_II_V_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_startStyling_II_V_args[] = 
{
  &StyledTextCtrl_methods_startStyling_II_V_arg_pos,
  &StyledTextCtrl_methods_startStyling_II_V_arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_startStyling_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_startStyling_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startStyling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_startStyling", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_startStyling_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_startStyling_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_startStyling_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_stopRecord__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_stopRecord__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_stopRecord__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stopRecord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6b_stopRecord", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_stopRecord__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_stopRecord__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_stopRecord__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_stutteredPageDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_stutteredPageDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_stutteredPageDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stutteredPageDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_62_stutteredPageDown", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_stutteredPageDown__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_stutteredPageDown__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_stutteredPageDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_stutteredPageDownExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_stutteredPageDownExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_stutteredPageDownExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stutteredPageDownExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_63_stutteredPageDownExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_stutteredPageDownExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_stutteredPageDownExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_stutteredPageDownExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_stutteredPageUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_stutteredPageUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_stutteredPageUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stutteredPageUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_60_stutteredPageUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_stutteredPageUp__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_stutteredPageUp__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_stutteredPageUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_stutteredPageUpExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_stutteredPageUpExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_stutteredPageUpExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stutteredPageUpExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_61_stutteredPageUpExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_stutteredPageUpExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_stutteredPageUpExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_stutteredPageUpExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleClearAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleClearAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleClearAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleClearAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_styleClearAll", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleClearAll__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleClearAll__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleClearAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleResetDefault__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleResetDefault__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleResetDefault__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleResetDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_styleResetDefault", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleResetDefault__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleResetDefault__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleResetDefault__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_arg_back = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "back", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_arg_style,
  &StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_arg_back,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetBackground_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_14_styleSetBackground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetBackground_IINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetBackground_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetBold_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetBold_IZ_V_arg_bold = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bold", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetBold_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetBold_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetBold_IZ_V_arg_bold,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetBold_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetBold_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetBold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_styleSetBold", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetBold_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetBold_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetBold_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetCase_II_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetCase_II_V_arg_caseMode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "caseMode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetCase_II_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetCase_II_V_arg_style,
  &StyledTextCtrl_methods_styleSetCase_II_V_arg_caseMode,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetCase_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetCase_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_styleSetCase", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetCase_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetCase_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetCase_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetChangeable_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetChangeable_IZ_V_arg_changeable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "changeable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetChangeable_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetChangeable_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetChangeable_IZ_V_arg_changeable,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetChangeable_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetChangeable_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetChangeable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1E_styleSetChangeable", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetChangeable_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetChangeable_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetChangeable_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetCharacterSet_II_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetCharacterSet_II_V_arg_characterSet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "characterSet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetCharacterSet_II_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetCharacterSet_II_V_arg_style,
  &StyledTextCtrl_methods_styleSetCharacterSet_II_V_arg_characterSet,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetCharacterSet_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetCharacterSet_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetCharacterSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_styleSetCharacterSet", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetCharacterSet_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetCharacterSet_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetCharacterSet_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_arg_filled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "filled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_arg_filled,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetEOLFilled_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetEOLFilled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_styleSetEOLFilled", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetEOLFilled_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetEOLFilled_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_arg_fontName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fontName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_arg_style,
  &StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_arg_fontName,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetFaceName_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetFaceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_18_styleSetFaceName", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetFaceName_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetFaceName_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFont_IINLRFont__V_arg_styleNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "styleNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFont_IINLRFont__V_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetFont_IINLRFont__V_args[] = 
{
  &StyledTextCtrl_methods_styleSetFont_IINLRFont__V_arg_styleNum,
  &StyledTextCtrl_methods_styleSetFont_IINLRFont__V_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetFont_IINLRFont__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetFont_IINLRFont__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6k_styleSetFont", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetFont_IINLRFont__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetFont_IINLRFont__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetFont_IINLRFont__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_styleNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "styleNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_faceName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "faceName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_bold = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bold", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_italic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "italic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_underline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "underline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_styleNum,
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_size,
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_faceName,
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_bold,
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_italic,
  &StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_arg_underline,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetFontAttr_IIINLRString_ZZZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetFontAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6l_styleSetFontAttr", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetFontAttr_IIINLRString_ZZZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetFontAttr_IIINLRString_ZZZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_arg_fore = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fore", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_args[] = 
{
  &StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_arg_style,
  &StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_arg_fore,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetForeground_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_styleSetForeground", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetForeground_IINLRColour__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetForeground_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetHotSpot_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetHotSpot_IZ_V_arg_hotspot = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hotspot", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetHotSpot_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetHotSpot_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetHotSpot_IZ_V_arg_hotspot,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetHotSpot_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetHotSpot_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetHotSpot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_styleSetHotSpot", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetHotSpot_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetHotSpot_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetHotSpot_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetItalic_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetItalic_IZ_V_arg_italic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "italic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetItalic_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetItalic_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetItalic_IZ_V_arg_italic,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetItalic_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetItalic_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetItalic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_16_styleSetItalic", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetItalic_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetItalic_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetItalic_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetSize_II_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetSize_II_V_arg_sizePoints = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sizePoints", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetSize_II_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetSize_II_V_arg_style,
  &StyledTextCtrl_methods_styleSetSize_II_V_arg_sizePoints,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetSize_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetSize_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_17_styleSetSize", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetSize_II_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetSize_II_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetSize_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetSpec_IINLRString__V_arg_styleNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "styleNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetSpec_IINLRString__V_arg_spec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "spec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetSpec_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_styleSetSpec_IINLRString__V_arg_styleNum,
  &StyledTextCtrl_methods_styleSetSpec_IINLRString__V_arg_spec,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetSpec_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetSpec_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetSpec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6j_styleSetSpec", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetSpec_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetSpec_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetSpec_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetUnderline_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetUnderline_IZ_V_arg_underline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "underline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetUnderline_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetUnderline_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetUnderline_IZ_V_arg_underline,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetUnderline_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetUnderline_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetUnderline", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_styleSetUnderline", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetUnderline_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetUnderline_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetUnderline_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetVisible_IZ_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_styleSetVisible_IZ_V_arg_visible = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "visible", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_styleSetVisible_IZ_V_args[] = 
{
  &StyledTextCtrl_methods_styleSetVisible_IZ_V_arg_style,
  &StyledTextCtrl_methods_styleSetVisible_IZ_V_arg_visible,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_styleSetVisible_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_styleSetVisible_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "styleSetVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_styleSetVisible", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_styleSetVisible_IZ_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_styleSetVisible_IZ_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_styleSetVisible_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_tab__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_tab__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_tab__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tab", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4t_tab", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_tab__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_tab__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_tab__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_targetFromSelection__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_targetFromSelection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_targetFromSelection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "targetFromSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3Y_targetFromSelection", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_targetFromSelection__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_targetFromSelection__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_targetFromSelection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_textHeight_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_textHeight_I_I_args[] = 
{
  &StyledTextCtrl_methods_textHeight_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_textHeight_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_textHeight_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "textHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3S_textHeight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_textHeight_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_textHeight_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_textHeight_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_textWidth_IINLRString__I_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_textWidth_IINLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_textWidth_IINLRString__I_args[] = 
{
  &StyledTextCtrl_methods_textWidth_IINLRString__I_arg_style,
  &StyledTextCtrl_methods_textWidth_IINLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_textWidth_IINLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_textWidth_IINLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "textWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3P_textWidth", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_textWidth_IINLRString__I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_textWidth_IINLRString__I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_textWidth_IINLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_toggleFold_I_V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_toggleFold_I_V_args[] = 
{
  &StyledTextCtrl_methods_toggleFold_I_V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_toggleFold_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_toggleFold_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggleFold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3x_toggleFold", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_toggleFold_I_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_toggleFold_I_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_toggleFold_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_undo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_undo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_undo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "undo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2T_undo", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_undo__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_undo__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_undo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_upperCase__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_upperCase__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_upperCase__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "upperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4I_upperCase", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_upperCase__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_upperCase__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_upperCase__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_usePopUp_Z_V_arg_allowPopUp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "allowPopUp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_usePopUp_Z_V_args[] = 
{
  &StyledTextCtrl_methods_usePopUp_Z_V_arg_allowPopUp,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_usePopUp_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_usePopUp_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usePopUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5f_usePopUp", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_usePopUp_Z_V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_usePopUp_Z_V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_usePopUp_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_userListShow_IINLRString__V_arg_listType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "listType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_userListShow_IINLRString__V_arg_itemList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "itemList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_userListShow_IINLRString__V_args[] = 
{
  &StyledTextCtrl_methods_userListShow_IINLRString__V_arg_listType,
  &StyledTextCtrl_methods_userListShow_IINLRString__V_arg_itemList,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_userListShow_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_userListShow_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "userListShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1V_userListShow", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_userListShow_IINLRString__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_userListShow_IINLRString__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_userListShow_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_vCHome__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_vCHome__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_vCHome__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "vCHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4x_vCHome", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_vCHome__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_vCHome__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_vCHome__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_vCHomeExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_vCHomeExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_vCHomeExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "vCHomeExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4y_vCHomeExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_vCHomeExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_vCHomeExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_vCHomeExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_vCHomeRectExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_vCHomeRectExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_vCHomeRectExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "vCHomeRectExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5W_vCHomeRectExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_vCHomeRectExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_vCHomeRectExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_vCHomeRectExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_vCHomeWrap__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_vCHomeWrap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_vCHomeWrap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "vCHomeWrap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4U_vCHomeWrap", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_vCHomeWrap__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_vCHomeWrap__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_vCHomeWrap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_vCHomeWrapExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_vCHomeWrapExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_vCHomeWrapExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "vCHomeWrapExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4V_vCHomeWrapExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_vCHomeWrapExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_vCHomeWrapExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_vCHomeWrapExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_visibleFromDocLine_I_I_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_visibleFromDocLine_I_I_args[] = 
{
  &StyledTextCtrl_methods_visibleFromDocLine_I_I_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_visibleFromDocLine_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_visibleFromDocLine_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "visibleFromDocLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3m_visibleFromDocLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_visibleFromDocLine_I_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_visibleFromDocLine_I_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_visibleFromDocLine_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_wordEndPosition_IZ_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_wordEndPosition_IZ_I_arg_onlyWordCharacters = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "onlyWordCharacters", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordEndPosition_IZ_I_args[] = 
{
  &StyledTextCtrl_methods_wordEndPosition_IZ_I_arg_pos,
  &StyledTextCtrl_methods_wordEndPosition_IZ_I_arg_onlyWordCharacters,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordEndPosition_IZ_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordEndPosition_IZ_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordEndPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3I_wordEndPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordEndPosition_IZ_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordEndPosition_IZ_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordEndPosition_IZ_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordLeft__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordLeft__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordLeft__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4a_wordLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordLeft__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordLeft__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordLeft__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordLeftEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordLeftEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordLeftEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordLeftEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_64_wordLeftEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordLeftEnd__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordLeftEnd__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordLeftEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordLeftEndExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordLeftEndExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordLeftEndExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordLeftEndExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_65_wordLeftEndExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordLeftEndExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordLeftEndExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordLeftEndExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordLeftExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordLeftExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordLeftExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordLeftExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4b_wordLeftExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordLeftExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordLeftExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordLeftExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordPartLeft__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordPartLeft__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordPartLeft__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordPartLeft", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5q_wordPartLeft", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordPartLeft__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordPartLeft__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordPartLeft__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordPartLeftExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordPartLeftExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordPartLeftExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordPartLeftExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5r_wordPartLeftExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordPartLeftExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordPartLeftExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordPartLeftExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordPartRight__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordPartRight__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordPartRight__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordPartRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5s_wordPartRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordPartRight__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordPartRight__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordPartRight__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordPartRightExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordPartRightExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordPartRightExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordPartRightExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5t_wordPartRightExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordPartRightExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordPartRightExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordPartRightExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordRight__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordRight__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordRight__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordRight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4c_wordRight", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordRight__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordRight__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordRight__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordRightEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordRightEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordRightEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordRightEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_66_wordRightEnd", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordRightEnd__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordRightEnd__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordRightEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordRightEndExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordRightEndExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordRightEndExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordRightEndExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_67_wordRightEndExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordRightEndExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordRightEndExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordRightEndExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordRightExtend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordRightExtend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordRightExtend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordRightExtend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4d_wordRightExtend", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordRightExtend__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordRightExtend__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordRightExtend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_wordStartPosition_IZ_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextCtrl_methods_wordStartPosition_IZ_I_arg_onlyWordCharacters = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "onlyWordCharacters", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_wordStartPosition_IZ_I_args[] = 
{
  &StyledTextCtrl_methods_wordStartPosition_IZ_I_arg_pos,
  &StyledTextCtrl_methods_wordStartPosition_IZ_I_arg_onlyWordCharacters,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_wordStartPosition_IZ_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_wordStartPosition_IZ_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordStartPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3H_wordStartPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_wordStartPosition_IZ_I_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_wordStartPosition_IZ_I_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_wordStartPosition_IZ_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_zoomIn__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_zoomIn__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_zoomIn__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "zoomIn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4z_zoomIn", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_zoomIn__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_zoomIn__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_zoomIn__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextCtrl_methods_zoomOut__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextCtrl_methods_zoomOut__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextCtrl_method_zoomOut__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "zoomOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4A_zoomOut", // alternative name of method
  -1, // altlabelHashCode
  StyledTextCtrl_methods_zoomOut__V_args, // the arguments
  0, //arguments count
  StyledTextCtrl_methods_zoomOut__V_exceptions, // the declared exceptions
  StyledTextCtrl_MetainfoWrapper::StyledTextCtrl_method_zoomOut__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StyledTextCtrl_methods[] = 
{
  &StyledTextCtrl_method_GetClass__L_acdk_lang_RClass_,
  &StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRStyledTextCtrl_,
  &StyledTextCtrl_method_StyledTextCtrl_INLRWindow_I_LRStyledTextCtrl_,
  &StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint__LRStyledTextCtrl_,
  &StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize__LRStyledTextCtrl_,
  &StyledTextCtrl_method_StyledTextCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRStyledTextCtrl_,
  &StyledTextCtrl_method_addText_INLRString__V,
  &StyledTextCtrl_method_appendText_INLRString__V,
  &StyledTextCtrl_method_autoCompActive__Z,
  &StyledTextCtrl_method_autoCompCancel__V,
  &StyledTextCtrl_method_autoCompComplete__V,
  &StyledTextCtrl_method_autoCompGetAutoHide__Z,
  &StyledTextCtrl_method_autoCompGetCancelAtStart__Z,
  &StyledTextCtrl_method_autoCompGetChooseSingle__Z,
  &StyledTextCtrl_method_autoCompGetDropRestOfWord__Z,
  &StyledTextCtrl_method_autoCompGetIgnoreCase__Z,
  &StyledTextCtrl_method_autoCompGetSeparator__I,
  &StyledTextCtrl_method_autoCompGetTypeSeparator__I,
  &StyledTextCtrl_method_autoCompPosStart__I,
  &StyledTextCtrl_method_autoCompSelect_INLRString__V,
  &StyledTextCtrl_method_autoCompSetAutoHide_Z_V,
  &StyledTextCtrl_method_autoCompSetCancelAtStart_Z_V,
  &StyledTextCtrl_method_autoCompSetChooseSingle_Z_V,
  &StyledTextCtrl_method_autoCompSetDropRestOfWord_Z_V,
  &StyledTextCtrl_method_autoCompSetFillUps_INLRString__V,
  &StyledTextCtrl_method_autoCompSetIgnoreCase_Z_V,
  &StyledTextCtrl_method_autoCompSetSeparator_I_V,
  &StyledTextCtrl_method_autoCompSetTypeSeparator_I_V,
  &StyledTextCtrl_method_autoCompShow_IINLRString__V,
  &StyledTextCtrl_method_autoCompStops_INLRString__V,
  &StyledTextCtrl_method_backTab__V,
  &StyledTextCtrl_method_beginUndoAction__V,
  &StyledTextCtrl_method_braceBadLight_I_V,
  &StyledTextCtrl_method_braceHighlight_II_V,
  &StyledTextCtrl_method_braceMatch_I_I,
  &StyledTextCtrl_method_callTipActive__Z,
  &StyledTextCtrl_method_callTipCancel__V,
  &StyledTextCtrl_method_callTipPosAtStart__I,
  &StyledTextCtrl_method_callTipSetBackground_INLRColour__V,
  &StyledTextCtrl_method_callTipSetForeground_INLRColour__V,
  &StyledTextCtrl_method_callTipSetForegroundHighlight_INLRColour__V,
  &StyledTextCtrl_method_callTipSetHighlight_II_V,
  &StyledTextCtrl_method_callTipShow_IINLRString__V,
  &StyledTextCtrl_method_canPaste__Z,
  &StyledTextCtrl_method_canRedo__Z,
  &StyledTextCtrl_method_canUndo__Z,
  &StyledTextCtrl_method_cancel__V,
  &StyledTextCtrl_method_charLeft__V,
  &StyledTextCtrl_method_charLeftExtend__V,
  &StyledTextCtrl_method_charLeftRectExtend__V,
  &StyledTextCtrl_method_charRight__V,
  &StyledTextCtrl_method_charRightExtend__V,
  &StyledTextCtrl_method_charRightRectExtend__V,
  &StyledTextCtrl_method_chooseCaretX__V,
  &StyledTextCtrl_method_clear__V,
  &StyledTextCtrl_method_clearAll__V,
  &StyledTextCtrl_method_clearDocumentStyle__V,
  &StyledTextCtrl_method_clearRegisteredImages__V,
  &StyledTextCtrl_method_cmdKeyAssign_III_V,
  &StyledTextCtrl_method_cmdKeyClear_II_V,
  &StyledTextCtrl_method_cmdKeyClearAll__V,
  &StyledTextCtrl_method_cmdKeyExecute_I_V,
  &StyledTextCtrl_method_colourise_II_V,
  &StyledTextCtrl_method_convertEOLs_I_V,
  &StyledTextCtrl_method_copy__V,
  &StyledTextCtrl_method_copyRange_II_V,
  &StyledTextCtrl_method_copyText_IINLRString__V,
  &StyledTextCtrl_method_cut__V,
  &StyledTextCtrl_method_delLineLeft__V,
  &StyledTextCtrl_method_delLineRight__V,
  &StyledTextCtrl_method_delWordLeft__V,
  &StyledTextCtrl_method_delWordRight__V,
  &StyledTextCtrl_method_deleteBack__V,
  &StyledTextCtrl_method_deleteBackNotLine__V,
  &StyledTextCtrl_method_docLineFromVisible_I_I,
  &StyledTextCtrl_method_documentEnd__V,
  &StyledTextCtrl_method_documentEndExtend__V,
  &StyledTextCtrl_method_documentStart__V,
  &StyledTextCtrl_method_documentStartExtend__V,
  &StyledTextCtrl_method_editToggleOvertype__V,
  &StyledTextCtrl_method_emptyUndoBuffer__V,
  &StyledTextCtrl_method_endUndoAction__V,
  &StyledTextCtrl_method_ensureCaretVisible__V,
  &StyledTextCtrl_method_ensureVisible_I_V,
  &StyledTextCtrl_method_ensureVisibleEnforcePolicy_I_V,
  &StyledTextCtrl_method_findText_IIINLRString_I_I,
  &StyledTextCtrl_method_findText_IIINLRString__I,
  &StyledTextCtrl_method_formFeed__V,
  &StyledTextCtrl_method_formatRange_ZIIINLRDC_INLRDC_INLRRect_INLRRect__I,
  &StyledTextCtrl_method_getAnchor__I,
  &StyledTextCtrl_method_getBackSpaceUnIndents__Z,
  &StyledTextCtrl_method_getBufferedDraw__Z,
  &StyledTextCtrl_method_getCaretForeground__LRColour_,
  &StyledTextCtrl_method_getCaretLineVisible__Z,
  &StyledTextCtrl_method_getCaretPeriod__I,
  &StyledTextCtrl_method_getCaretWidth__I,
  &StyledTextCtrl_method_getCharAt_I_I,
  &StyledTextCtrl_method_getCodePage__I,
  &StyledTextCtrl_method_getColumn_I_I,
  &StyledTextCtrl_method_getControlCharSymbol__I,
  &StyledTextCtrl_method_getCurLine_OUTI_LRString_,
  &StyledTextCtrl_method_getCurLine__LRString_,
  &StyledTextCtrl_method_getCurrentLine__I,
  &StyledTextCtrl_method_getCurrentPos__I,
  &StyledTextCtrl_method_getEOLMode__I,
  &StyledTextCtrl_method_getEdgeColour__LRColour_,
  &StyledTextCtrl_method_getEdgeColumn__I,
  &StyledTextCtrl_method_getEdgeMode__I,
  &StyledTextCtrl_method_getEndAtLastLine__I,
  &StyledTextCtrl_method_getEndStyled__I,
  &StyledTextCtrl_method_getFirstVisibleLine__I,
  &StyledTextCtrl_method_getFoldExpanded_I_Z,
  &StyledTextCtrl_method_getFoldLevel_I_I,
  &StyledTextCtrl_method_getFoldParent_I_I,
  &StyledTextCtrl_method_getHighlightGuide__I,
  &StyledTextCtrl_method_getIndent__I,
  &StyledTextCtrl_method_getIndentationGuides__Z,
  &StyledTextCtrl_method_getLastChild_II_I,
  &StyledTextCtrl_method_getLastKeydownProcessed__Z,
  &StyledTextCtrl_method_getLayoutCache__I,
  &StyledTextCtrl_method_getLength__I,
  &StyledTextCtrl_method_getLexer__I,
  &StyledTextCtrl_method_getLine_I_LRString_,
  &StyledTextCtrl_method_getLineCount__I,
  &StyledTextCtrl_method_getLineEndPosition_I_I,
  &StyledTextCtrl_method_getLineIndentPosition_I_I,
  &StyledTextCtrl_method_getLineIndentation_I_I,
  &StyledTextCtrl_method_getLineState_I_I,
  &StyledTextCtrl_method_getLineVisible_I_Z,
  &StyledTextCtrl_method_getMarginLeft__I,
  &StyledTextCtrl_method_getMarginMask_I_I,
  &StyledTextCtrl_method_getMarginRight__I,
  &StyledTextCtrl_method_getMarginSensitive_I_Z,
  &StyledTextCtrl_method_getMarginType_I_I,
  &StyledTextCtrl_method_getMarginWidth_I_I,
  &StyledTextCtrl_method_getMaxLineState__I,
  &StyledTextCtrl_method_getModEventMask__I,
  &StyledTextCtrl_method_getModify__Z,
  &StyledTextCtrl_method_getMouseDownCaptures__Z,
  &StyledTextCtrl_method_getMouseDwellTime__I,
  &StyledTextCtrl_method_getOvertype__Z,
  &StyledTextCtrl_method_getPrintColourMode__I,
  &StyledTextCtrl_method_getPrintMagnification__I,
  &StyledTextCtrl_method_getPrintWrapMode__I,
  &StyledTextCtrl_method_getReadOnly__Z,
  &StyledTextCtrl_method_getScrollWidth__I,
  &StyledTextCtrl_method_getSearchFlags__I,
  &StyledTextCtrl_method_getSelectedText__LRString_,
  &StyledTextCtrl_method_getSelection_OUTIOUTI_V,
  &StyledTextCtrl_method_getSelectionEnd__I,
  &StyledTextCtrl_method_getSelectionStart__I,
  &StyledTextCtrl_method_getStatus__I,
  &StyledTextCtrl_method_getStyleAt_I_I,
  &StyledTextCtrl_method_getStyleBits__I,
  &StyledTextCtrl_method_getTabIndents__Z,
  &StyledTextCtrl_method_getTabWidth__I,
  &StyledTextCtrl_method_getTargetEnd__I,
  &StyledTextCtrl_method_getTargetStart__I,
  &StyledTextCtrl_method_getText__LRString_,
  &StyledTextCtrl_method_getTextLength__I,
  &StyledTextCtrl_method_getTextRange_II_LRString_,
  &StyledTextCtrl_method_getTwoPhaseDraw__Z,
  &StyledTextCtrl_method_getUndoCollection__Z,
  &StyledTextCtrl_method_getUseHorizontalScrollBar__Z,
  &StyledTextCtrl_method_getUseTabs__Z,
  &StyledTextCtrl_method_getUseVerticalScrollBar__Z,
  &StyledTextCtrl_method_getViewEOL__Z,
  &StyledTextCtrl_method_getViewWhiteSpace__I,
  &StyledTextCtrl_method_getWrapMode__I,
  &StyledTextCtrl_method_getXOffset__I,
  &StyledTextCtrl_method_getZoom__I,
  &StyledTextCtrl_method_gotoLine_I_V,
  &StyledTextCtrl_method_gotoPos_I_V,
  &StyledTextCtrl_method_hideLines_II_V,
  &StyledTextCtrl_method_hideSelection_Z_V,
  &StyledTextCtrl_method_home__V,
  &StyledTextCtrl_method_homeDisplay__V,
  &StyledTextCtrl_method_homeDisplayExtend__V,
  &StyledTextCtrl_method_homeExtend__V,
  &StyledTextCtrl_method_homeRectExtend__V,
  &StyledTextCtrl_method_homeWrap__V,
  &StyledTextCtrl_method_homeWrapExtend__V,
  &StyledTextCtrl_method_indicatorGetForeground_I_LRColour_,
  &StyledTextCtrl_method_indicatorGetStyle_I_I,
  &StyledTextCtrl_method_indicatorSetForeground_IINLRColour__V,
  &StyledTextCtrl_method_indicatorSetStyle_II_V,
  &StyledTextCtrl_method_initFromProps_INL_acdk_cfgscript_RProps__V,
  &StyledTextCtrl_method_initFromTextFile_INLRString__V,
  &StyledTextCtrl_method_insertText_IINLRString__V,
  &StyledTextCtrl_method_lineCopy__V,
  &StyledTextCtrl_method_lineCut__V,
  &StyledTextCtrl_method_lineDelete__V,
  &StyledTextCtrl_method_lineDown__V,
  &StyledTextCtrl_method_lineDownRectExtend__V,
  &StyledTextCtrl_method_lineDuplicate__V,
  &StyledTextCtrl_method_lineEnd__V,
  &StyledTextCtrl_method_lineEndDisplay__V,
  &StyledTextCtrl_method_lineEndDisplayExtend__V,
  &StyledTextCtrl_method_lineEndExtend__V,
  &StyledTextCtrl_method_lineEndRectExtend__V,
  &StyledTextCtrl_method_lineEndWrap__V,
  &StyledTextCtrl_method_lineEndWrapExtend__V,
  &StyledTextCtrl_method_lineFromPosition_I_I,
  &StyledTextCtrl_method_lineLength_I_I,
  &StyledTextCtrl_method_lineScroll_II_V,
  &StyledTextCtrl_method_lineScrollDown__V,
  &StyledTextCtrl_method_lineScrollUp__V,
  &StyledTextCtrl_method_lineTranspose__V,
  &StyledTextCtrl_method_lineUp__V,
  &StyledTextCtrl_method_lineUpExtend__V,
  &StyledTextCtrl_method_lineUpRectExtend__V,
  &StyledTextCtrl_method_linesJoin__V,
  &StyledTextCtrl_method_linesOnScreen__I,
  &StyledTextCtrl_method_linesSplit_I_V,
  &StyledTextCtrl_method_loadConfig_INLRString__V,
  &StyledTextCtrl_method_loadFile_INLRString__Z,
  &StyledTextCtrl_method_loadStdConfig__V,
  &StyledTextCtrl_method_lowerCase__V,
  &StyledTextCtrl_method_markerAdd_II_I,
  &StyledTextCtrl_method_markerDefine_II_V,
  &StyledTextCtrl_method_markerDefineBitmap_IINLRBitmap__V,
  &StyledTextCtrl_method_markerDelete_II_V,
  &StyledTextCtrl_method_markerDeleteAll_I_V,
  &StyledTextCtrl_method_markerDeleteHandle_I_V,
  &StyledTextCtrl_method_markerGet_I_I,
  &StyledTextCtrl_method_markerLineFromHandle_I_I,
  &StyledTextCtrl_method_markerNext_II_I,
  &StyledTextCtrl_method_markerPrevious_II_I,
  &StyledTextCtrl_method_markerSetBackground_IINLRColour__V,
  &StyledTextCtrl_method_markerSetForeground_IINLRColour__V,
  &StyledTextCtrl_method_moveCaretInsideView__V,
  &StyledTextCtrl_method_newLine__V,
  &StyledTextCtrl_method_pageDown__V,
  &StyledTextCtrl_method_pageDownExtend__V,
  &StyledTextCtrl_method_pageDownRectExtend__V,
  &StyledTextCtrl_method_pageUp__V,
  &StyledTextCtrl_method_pageUpExtend__V,
  &StyledTextCtrl_method_pageUpRectExtend__V,
  &StyledTextCtrl_method_paraDown__V,
  &StyledTextCtrl_method_paraDownExtend__V,
  &StyledTextCtrl_method_paraUp__V,
  &StyledTextCtrl_method_paraUpExtend__V,
  &StyledTextCtrl_method_paste__V,
  &StyledTextCtrl_method_pointFromPosition_I_LRPoint_,
  &StyledTextCtrl_method_positionAfter_I_I,
  &StyledTextCtrl_method_positionBefore_I_I,
  &StyledTextCtrl_method_positionFromLine_I_I,
  &StyledTextCtrl_method_positionFromPoint_INLRPoint__I,
  &StyledTextCtrl_method_positionFromPointClose_II_I,
  &StyledTextCtrl_method_redo__V,
  &StyledTextCtrl_method_registerImage_IINLRBitmap__V,
  &StyledTextCtrl_method_replaceSelection_INLRString__V,
  &StyledTextCtrl_method_replaceTarget_INLRString__I,
  &StyledTextCtrl_method_replaceTargetRE_INLRString__I,
  &StyledTextCtrl_method_saveFile_INLRString__Z,
  &StyledTextCtrl_method_scrollToColumn_I_V,
  &StyledTextCtrl_method_scrollToLine_I_V,
  &StyledTextCtrl_method_searchAnchor__V,
  &StyledTextCtrl_method_searchInTarget_INLRString__I,
  &StyledTextCtrl_method_searchNext_IINLRString__I,
  &StyledTextCtrl_method_searchPrev_IINLRString__I,
  &StyledTextCtrl_method_selectAll__V,
  &StyledTextCtrl_method_selectionIsRectangle__Z,
  &StyledTextCtrl_method_setAnchor_I_V,
  &StyledTextCtrl_method_setBackSpaceUnIndents_Z_V,
  &StyledTextCtrl_method_setBufferedDraw_Z_V,
  &StyledTextCtrl_method_setCaretForeground_INLRColour__V,
  &StyledTextCtrl_method_setCaretLineVisible_Z_V,
  &StyledTextCtrl_method_setCaretPeriod_I_V,
  &StyledTextCtrl_method_setCaretWidth_I_V,
  &StyledTextCtrl_method_setCharsDefault__V,
  &StyledTextCtrl_method_setCodePage_I_V,
  &StyledTextCtrl_method_setControlCharSymbol_I_V,
  &StyledTextCtrl_method_setCurrentPos_I_V,
  &StyledTextCtrl_method_setEOLMode_I_V,
  &StyledTextCtrl_method_setEdgeColour_INLRColour__V,
  &StyledTextCtrl_method_setEdgeColumn_I_V,
  &StyledTextCtrl_method_setEdgeMode_I_V,
  &StyledTextCtrl_method_setEndAtLastLine_Z_V,
  &StyledTextCtrl_method_setFoldExpanded_IZ_V,
  &StyledTextCtrl_method_setFoldFlags_I_V,
  &StyledTextCtrl_method_setFoldLevel_II_V,
  &StyledTextCtrl_method_setFoldMarginColour_ZINLRColour__V,
  &StyledTextCtrl_method_setFoldMarginHiColour_ZINLRColour__V,
  &StyledTextCtrl_method_setHighlightGuide_I_V,
  &StyledTextCtrl_method_setHotspotActiveBackground_ZINLRColour__V,
  &StyledTextCtrl_method_setHotspotActiveForeground_ZINLRColour__V,
  &StyledTextCtrl_method_setHotspotActiveUnderline_Z_V,
  &StyledTextCtrl_method_setHotspotSingleLine_Z_V,
  &StyledTextCtrl_method_setIndent_I_V,
  &StyledTextCtrl_method_setIndentationGuides_Z_V,
  &StyledTextCtrl_method_setKeyWords_IINLRString__V,
  &StyledTextCtrl_method_setLastKeydownProcessed_Z_V,
  &StyledTextCtrl_method_setLayoutCache_I_V,
  &StyledTextCtrl_method_setLexer_I_V,
  &StyledTextCtrl_method_setLexerLanguage_INLRString__V,
  &StyledTextCtrl_method_setLineIndentation_II_V,
  &StyledTextCtrl_method_setLineState_II_V,
  &StyledTextCtrl_method_setMarginLeft_I_V,
  &StyledTextCtrl_method_setMarginMask_II_V,
  &StyledTextCtrl_method_setMarginRight_I_V,
  &StyledTextCtrl_method_setMarginSensitive_IZ_V,
  &StyledTextCtrl_method_setMarginType_II_V,
  &StyledTextCtrl_method_setMarginWidth_II_V,
  &StyledTextCtrl_method_setMargins_II_V,
  &StyledTextCtrl_method_setModEventMask_I_V,
  &StyledTextCtrl_method_setMouseDownCaptures_Z_V,
  &StyledTextCtrl_method_setMouseDwellTime_I_V,
  &StyledTextCtrl_method_setOvertype_Z_V,
  &StyledTextCtrl_method_setPrintColourMode_I_V,
  &StyledTextCtrl_method_setPrintMagnification_I_V,
  &StyledTextCtrl_method_setPrintWrapMode_I_V,
  &StyledTextCtrl_method_setProperty_INLRString_INLRString__V,
  &StyledTextCtrl_method_setReadOnly_Z_V,
  &StyledTextCtrl_method_setSavePoint__V,
  &StyledTextCtrl_method_setScrollWidth_I_V,
  &StyledTextCtrl_method_setSearchFlags_I_V,
  &StyledTextCtrl_method_setSelBackground_ZINLRColour__V,
  &StyledTextCtrl_method_setSelForeground_ZINLRColour__V,
  &StyledTextCtrl_method_setSelection_II_V,
  &StyledTextCtrl_method_setSelectionEnd_I_V,
  &StyledTextCtrl_method_setSelectionMode_I_V,
  &StyledTextCtrl_method_setSelectionStart_I_V,
  &StyledTextCtrl_method_setStatus_I_V,
  &StyledTextCtrl_method_setStyleBits_I_V,
  &StyledTextCtrl_method_setStyling_II_V,
  &StyledTextCtrl_method_setTabIndents_Z_V,
  &StyledTextCtrl_method_setTabWidth_I_V,
  &StyledTextCtrl_method_setTargetEnd_I_V,
  &StyledTextCtrl_method_setTargetStart_I_V,
  &StyledTextCtrl_method_setText_INLRString__V,
  &StyledTextCtrl_method_setTwoPhaseDraw_Z_V,
  &StyledTextCtrl_method_setUndoCollection_Z_V,
  &StyledTextCtrl_method_setUseAntiAliasing_Z_V,
  &StyledTextCtrl_method_setUseHorizontalScrollBar_Z_V,
  &StyledTextCtrl_method_setUseTabs_Z_V,
  &StyledTextCtrl_method_setUseVerticalScrollBar_Z_V,
  &StyledTextCtrl_method_setViewEOL_Z_V,
  &StyledTextCtrl_method_setViewWhiteSpace_I_V,
  &StyledTextCtrl_method_setVisiblePolicy_II_V,
  &StyledTextCtrl_method_setWhitespaceBackground_ZINLRColour__V,
  &StyledTextCtrl_method_setWhitespaceChars_INLRString__V,
  &StyledTextCtrl_method_setWhitespaceForeground_ZINLRColour__V,
  &StyledTextCtrl_method_setWordChars_INLRString__V,
  &StyledTextCtrl_method_setWrapMode_I_V,
  &StyledTextCtrl_method_setXCaretPolicy_II_V,
  &StyledTextCtrl_method_setXOffset_I_V,
  &StyledTextCtrl_method_setYCaretPolicy_II_V,
  &StyledTextCtrl_method_setZoom_I_V,
  &StyledTextCtrl_method_showLines_II_V,
  &StyledTextCtrl_method_startRecord__V,
  &StyledTextCtrl_method_startStyling_II_V,
  &StyledTextCtrl_method_stopRecord__V,
  &StyledTextCtrl_method_stutteredPageDown__V,
  &StyledTextCtrl_method_stutteredPageDownExtend__V,
  &StyledTextCtrl_method_stutteredPageUp__V,
  &StyledTextCtrl_method_stutteredPageUpExtend__V,
  &StyledTextCtrl_method_styleClearAll__V,
  &StyledTextCtrl_method_styleResetDefault__V,
  &StyledTextCtrl_method_styleSetBackground_IINLRColour__V,
  &StyledTextCtrl_method_styleSetBold_IZ_V,
  &StyledTextCtrl_method_styleSetCase_II_V,
  &StyledTextCtrl_method_styleSetChangeable_IZ_V,
  &StyledTextCtrl_method_styleSetCharacterSet_II_V,
  &StyledTextCtrl_method_styleSetEOLFilled_IZ_V,
  &StyledTextCtrl_method_styleSetFaceName_IINLRString__V,
  &StyledTextCtrl_method_styleSetFont_IINLRFont__V,
  &StyledTextCtrl_method_styleSetFontAttr_IIINLRString_ZZZ_V,
  &StyledTextCtrl_method_styleSetForeground_IINLRColour__V,
  &StyledTextCtrl_method_styleSetHotSpot_IZ_V,
  &StyledTextCtrl_method_styleSetItalic_IZ_V,
  &StyledTextCtrl_method_styleSetSize_II_V,
  &StyledTextCtrl_method_styleSetSpec_IINLRString__V,
  &StyledTextCtrl_method_styleSetUnderline_IZ_V,
  &StyledTextCtrl_method_styleSetVisible_IZ_V,
  &StyledTextCtrl_method_tab__V,
  &StyledTextCtrl_method_targetFromSelection__V,
  &StyledTextCtrl_method_textHeight_I_I,
  &StyledTextCtrl_method_textWidth_IINLRString__I,
  &StyledTextCtrl_method_toggleFold_I_V,
  &StyledTextCtrl_method_undo__V,
  &StyledTextCtrl_method_upperCase__V,
  &StyledTextCtrl_method_usePopUp_Z_V,
  &StyledTextCtrl_method_userListShow_IINLRString__V,
  &StyledTextCtrl_method_vCHome__V,
  &StyledTextCtrl_method_vCHomeExtend__V,
  &StyledTextCtrl_method_vCHomeRectExtend__V,
  &StyledTextCtrl_method_vCHomeWrap__V,
  &StyledTextCtrl_method_vCHomeWrapExtend__V,
  &StyledTextCtrl_method_visibleFromDocLine_I_I,
  &StyledTextCtrl_method_wordEndPosition_IZ_I,
  &StyledTextCtrl_method_wordLeft__V,
  &StyledTextCtrl_method_wordLeftEnd__V,
  &StyledTextCtrl_method_wordLeftEndExtend__V,
  &StyledTextCtrl_method_wordLeftExtend__V,
  &StyledTextCtrl_method_wordPartLeft__V,
  &StyledTextCtrl_method_wordPartLeftExtend__V,
  &StyledTextCtrl_method_wordPartRight__V,
  &StyledTextCtrl_method_wordPartRightExtend__V,
  &StyledTextCtrl_method_wordRight__V,
  &StyledTextCtrl_method_wordRightEnd__V,
  &StyledTextCtrl_method_wordRightEndExtend__V,
  &StyledTextCtrl_method_wordRightExtend__V,
  &StyledTextCtrl_method_wordStartPosition_IZ_I,
  &StyledTextCtrl_method_zoomIn__V,
  &StyledTextCtrl_method_zoomOut__V,
  0
};


struct StyledTextCtrl_MetaInfoInitializer
{  StyledTextCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StyledTextCtrl::clazzInfo();
    ci->fields =  _StyledTextCtrl_fields;
    ci->methods =  _StyledTextCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StyledTextCtrl_MetaInfoInitializer StyledTextCtrl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


namespace acdk { 
namespace wx { 
namespace ide { 

using namespace acdk::wx;

//static
::acdk::lang::RObject
StyledTextEvent_create_array(int length)
{
  return new ObjectArrayImpl<RStyledTextEvent>(length);
}

//static
::acdk::lang::RObject
StyledTextEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StyledTextEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StyledTextEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_StyledTextEvent_II_LRStyledTextEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextEvent(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_StyledTextEvent__LRStyledTextEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_StyledTextEvent_I_LRStyledTextEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StyledTextEvent(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getAlt__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getAlt();
    else
      ret = This->getAlt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getControl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getControl();
    else
      ret = This->getControl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getDragAllowMove__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getDragAllowMove();
    else
      ret = This->getDragAllowMove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getDragText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextEvent::getDragText();
    else
        ret = (::acdk::lang::RObject)This->getDragText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getFoldLevelNow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getFoldLevelNow();
    else
      ret = This->getFoldLevelNow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getFoldLevelPrev__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getFoldLevelPrev();
    else
      ret = This->getFoldLevelPrev();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getKey__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getKey();
    else
      ret = This->getKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getLParam__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getLParam();
    else
      ret = This->getLParam();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getLine__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getLine();
    else
      ret = This->getLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getLinesAdded__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getLinesAdded();
    else
      ret = This->getLinesAdded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getListType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getListType();
    else
      ret = This->getListType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getMargin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getMargin();
    else
      ret = This->getMargin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getMessage__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getMessage();
    else
      ret = This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getModificationType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getModificationType();
    else
      ret = This->getModificationType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getModifiers__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getModifiers();
    else
      ret = This->getModifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getPosition();
    else
      ret = This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getShift__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getShift();
    else
      ret = This->getShift();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StyledTextEvent::getText();
    else
        ret = (::acdk::lang::RObject)This->getText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getWParam__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getWParam();
    else
      ret = This->getWParam();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getX();
    else
      ret = This->getX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_getY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StyledTextEvent::getY();
    else
      ret = This->getY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setDragAllowMove_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setDragAllowMove(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setDragAllowMove(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setDragText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setDragText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setDragText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setFoldLevelNow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setFoldLevelNow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFoldLevelNow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setFoldLevelPrev_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setFoldLevelPrev(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFoldLevelPrev(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setKey_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setLParam_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setLParam(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLParam(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setLength_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setLine_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setLinesAdded_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setLinesAdded(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLinesAdded(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setListType_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setListType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setListType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setMargin_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setMargin(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMargin(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setMessage_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setMessage(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMessage(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setModificationType_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setModificationType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setModificationType(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setModifiers_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setModifiers(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setModifiers(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setPosition_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setText(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setWParam_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setWParam(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setWParam(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setX_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setX(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setX(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StyledTextEvent_method_setY_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StyledTextEvent* This = dmi_cast<StyledTextEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StyledTextEvent::setY(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setY(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciCalltipClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciCalltipClick, flags);
    else
      StyledTextEvent::EvtSciCalltipClick = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciChange_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciChange, flags);
    else
      StyledTextEvent::EvtSciChange = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciCharadded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciCharadded, flags);
    else
      StyledTextEvent::EvtSciCharadded = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciDoDrop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciDoDrop, flags);
    else
      StyledTextEvent::EvtSciDoDrop = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciDoubleclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciDoubleclick, flags);
    else
      StyledTextEvent::EvtSciDoubleclick = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciDragOver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciDragOver, flags);
    else
      StyledTextEvent::EvtSciDragOver = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciDwellend_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciDwellend, flags);
    else
      StyledTextEvent::EvtSciDwellend = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciDwellstart_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciDwellstart, flags);
    else
      StyledTextEvent::EvtSciDwellstart = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciHotspotClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciHotspotClick, flags);
    else
      StyledTextEvent::EvtSciHotspotClick = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciHotspotDclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciHotspotDclick, flags);
    else
      StyledTextEvent::EvtSciHotspotDclick = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciKey, flags);
    else
      StyledTextEvent::EvtSciKey = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciMacrorecord_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciMacrorecord, flags);
    else
      StyledTextEvent::EvtSciMacrorecord = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciMarginclick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciMarginclick, flags);
    else
      StyledTextEvent::EvtSciMarginclick = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciModified_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciModified, flags);
    else
      StyledTextEvent::EvtSciModified = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciNeedshown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciNeedshown, flags);
    else
      StyledTextEvent::EvtSciNeedshown = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciPainted_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciPainted, flags);
    else
      StyledTextEvent::EvtSciPainted = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciRomodifyattempt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciRomodifyattempt, flags);
    else
      StyledTextEvent::EvtSciRomodifyattempt = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciSavepointleft_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciSavepointleft, flags);
    else
      StyledTextEvent::EvtSciSavepointleft = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciSavepointreached_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciSavepointreached, flags);
    else
      StyledTextEvent::EvtSciSavepointreached = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciStartDrag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciStartDrag, flags);
    else
      StyledTextEvent::EvtSciStartDrag = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciStyleneeded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciStyleneeded, flags);
    else
      StyledTextEvent::EvtSciStyleneeded = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciUpdateui_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciUpdateui, flags);
    else
      StyledTextEvent::EvtSciUpdateui = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciUridropped_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciUridropped, flags);
    else
      StyledTextEvent::EvtSciUridropped = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciUserlistselection_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciUserlistselection, flags);
    else
      StyledTextEvent::EvtSciUserlistselection = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StyledTextEvent_fields_EvtSciZoom_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(StyledTextEvent::EvtSciZoom, flags);
    else
      StyledTextEvent::EvtSciZoom = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciCalltipClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciCalltipClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciCalltipClick_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciCalltipClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciChange = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciChange", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciChange_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciChange // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciCharadded = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciCharadded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciCharadded_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciCharadded // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciDoDrop = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciDoDrop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciDoDrop_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciDoDrop // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciDoubleclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciDoubleclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciDoubleclick_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciDoubleclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciDragOver = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciDragOver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciDragOver_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciDragOver // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciDwellend = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciDwellend", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciDwellend_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciDwellend // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciDwellstart = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciDwellstart", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciDwellstart_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciDwellstart // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciHotspotClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciHotspotClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciHotspotClick_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciHotspotClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciHotspotDclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciHotspotDclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciHotspotDclick_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciHotspotDclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciKey = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciKey_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciKey // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciMacrorecord = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciMacrorecord", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciMacrorecord_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciMacrorecord // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciMarginclick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciMarginclick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciMarginclick_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciMarginclick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciModified = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciModified", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciModified_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciModified // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciNeedshown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciNeedshown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciNeedshown_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciNeedshown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciPainted = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciPainted", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciPainted_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciPainted // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciRomodifyattempt = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciRomodifyattempt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciRomodifyattempt_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciRomodifyattempt // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciSavepointleft = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciSavepointleft", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciSavepointleft_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciSavepointleft // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciSavepointreached = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciSavepointreached", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciSavepointreached_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciSavepointreached // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciStartDrag = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciStartDrag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciStartDrag_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciStartDrag // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciStyleneeded = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciStyleneeded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciStyleneeded_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciStyleneeded // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciUpdateui = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciUpdateui", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciUpdateui_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciUpdateui // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciUridropped = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciUridropped", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciUridropped_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciUridropped // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciUserlistselection = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciUserlistselection", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciUserlistselection_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciUserlistselection // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StyledTextEvent_fields_EvtSciZoom = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtSciZoom", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_fields_EvtSciZoom_accessor, // read/write access to this fields
  (void*)&StyledTextEvent::EvtSciZoom // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StyledTextEvent_fields[] = 
{
  &StyledTextEvent_fields_EvtSciCalltipClick,
  &StyledTextEvent_fields_EvtSciChange,
  &StyledTextEvent_fields_EvtSciCharadded,
  &StyledTextEvent_fields_EvtSciDoDrop,
  &StyledTextEvent_fields_EvtSciDoubleclick,
  &StyledTextEvent_fields_EvtSciDragOver,
  &StyledTextEvent_fields_EvtSciDwellend,
  &StyledTextEvent_fields_EvtSciDwellstart,
  &StyledTextEvent_fields_EvtSciHotspotClick,
  &StyledTextEvent_fields_EvtSciHotspotDclick,
  &StyledTextEvent_fields_EvtSciKey,
  &StyledTextEvent_fields_EvtSciMacrorecord,
  &StyledTextEvent_fields_EvtSciMarginclick,
  &StyledTextEvent_fields_EvtSciModified,
  &StyledTextEvent_fields_EvtSciNeedshown,
  &StyledTextEvent_fields_EvtSciPainted,
  &StyledTextEvent_fields_EvtSciRomodifyattempt,
  &StyledTextEvent_fields_EvtSciSavepointleft,
  &StyledTextEvent_fields_EvtSciSavepointreached,
  &StyledTextEvent_fields_EvtSciStartDrag,
  &StyledTextEvent_fields_EvtSciStyleneeded,
  &StyledTextEvent_fields_EvtSciUpdateui,
  &StyledTextEvent_fields_EvtSciUridropped,
  &StyledTextEvent_fields_EvtSciUserlistselection,
  &StyledTextEvent_fields_EvtSciZoom,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_I_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__args[] = 
{
  &StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__arg_eventType,
  &StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_StyledTextEvent_II_LRStyledTextEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextEvent::clazzInfo(), // return type
  "_0_StyledTextEvent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_StyledTextEvent_II_LRStyledTextEvent__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_StyledTextEvent_II_LRStyledTextEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_StyledTextEvent__LRStyledTextEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_StyledTextEvent__LRStyledTextEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_StyledTextEvent__LRStyledTextEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextEvent::clazzInfo(), // return type
  "_1_StyledTextEvent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_StyledTextEvent__LRStyledTextEvent__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_StyledTextEvent__LRStyledTextEvent__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_StyledTextEvent__LRStyledTextEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__args[] = 
{
  &StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__arg_eventType,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_StyledTextEvent_I_LRStyledTextEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StyledTextEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StyledTextEvent::clazzInfo(), // return type
  "_2_StyledTextEvent", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_StyledTextEvent_I_LRStyledTextEvent__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_StyledTextEvent_I_LRStyledTextEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getAlt__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getAlt__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getAlt__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAlt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_getAlt", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getAlt__Z_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getAlt__Z_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getAlt__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getControl__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getControl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getControl__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_getControl", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getControl__Z_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getControl__Z_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getControl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getDragAllowMove__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getDragAllowMove__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getDragAllowMove__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDragAllowMove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_getDragAllowMove", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getDragAllowMove__Z_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getDragAllowMove__Z_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getDragAllowMove__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getDragText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getDragText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getDragText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDragText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_D_getDragText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getDragText__LRString__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getDragText__LRString__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getDragText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getFoldLevelNow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getFoldLevelNow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getFoldLevelNow__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFoldLevelNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_u_getFoldLevelNow", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getFoldLevelNow__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getFoldLevelNow__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getFoldLevelNow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getFoldLevelPrev__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getFoldLevelPrev__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getFoldLevelPrev__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFoldLevelPrev", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_v_getFoldLevelPrev", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getFoldLevelPrev__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getFoldLevelPrev__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getFoldLevelPrev__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getKey__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getKey__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getKey__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getKey", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getKey__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getKey__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getKey__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getLParam__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getLParam__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getLParam__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLParam", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getLParam", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getLParam__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getLParam__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getLParam__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getLength__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_getLength", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getLength__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getLength__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getLine__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getLine__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getLine__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_getLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getLine__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getLine__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getLine__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getLinesAdded__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getLinesAdded__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getLinesAdded__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLinesAdded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getLinesAdded", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getLinesAdded__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getLinesAdded__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getLinesAdded__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getListType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getListType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getListType__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getListType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getListType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getListType__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getListType__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getListType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getMargin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getMargin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getMargin__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMargin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_w_getMargin", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getMargin__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getMargin__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getMargin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getMessage__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getMessage__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getMessage__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getMessage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getMessage__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getMessage__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getMessage__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getModificationType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getModificationType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getModificationType__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModificationType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getModificationType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getModificationType__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getModificationType__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getModificationType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getModifiers__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getModifiers__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getModifiers__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getModifiers", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getModifiers__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getModifiers__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getModifiers__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getPosition__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getPosition__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getShift__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getShift__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getShift__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_getShift", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getShift__Z_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getShift__Z_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getShift__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getText__LRString__args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getText__LRString__exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getWParam__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getWParam__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getWParam__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWParam", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_y_getWParam", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getWParam__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getWParam__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getWParam__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getX", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getX__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getX__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_getY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_getY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_getY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_C_getY", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_getY__I_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_getY__I_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_getY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setDragAllowMove_Z_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setDragAllowMove_Z_V_args[] = 
{
  &StyledTextEvent_methods_setDragAllowMove_Z_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setDragAllowMove_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setDragAllowMove_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDragAllowMove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setDragAllowMove", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setDragAllowMove_Z_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setDragAllowMove_Z_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setDragAllowMove_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setDragText_INLRString__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setDragText_INLRString__V_args[] = 
{
  &StyledTextEvent_methods_setDragText_INLRString__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setDragText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setDragText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDragText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setDragText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setDragText_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setDragText_INLRString__V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setDragText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setFoldLevelNow_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setFoldLevelNow_I_V_args[] = 
{
  &StyledTextEvent_methods_setFoldLevelNow_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setFoldLevelNow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setFoldLevelNow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldLevelNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setFoldLevelNow", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setFoldLevelNow_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setFoldLevelNow_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setFoldLevelNow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setFoldLevelPrev_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setFoldLevelPrev_I_V_args[] = 
{
  &StyledTextEvent_methods_setFoldLevelPrev_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setFoldLevelPrev_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setFoldLevelPrev_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFoldLevelPrev", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setFoldLevelPrev", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setFoldLevelPrev_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setFoldLevelPrev_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setFoldLevelPrev_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setKey_I_V_arg_k = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "k", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setKey_I_V_args[] = 
{
  &StyledTextEvent_methods_setKey_I_V_arg_k,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setKey_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setKey_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setKey", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setKey_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setKey_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setKey_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setLParam_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setLParam_I_V_args[] = 
{
  &StyledTextEvent_methods_setLParam_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setLParam_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setLParam_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLParam", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setLParam", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setLParam_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setLParam_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setLParam_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setLength_I_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setLength_I_V_args[] = 
{
  &StyledTextEvent_methods_setLength_I_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setLength_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setLength_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setLength", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setLength_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setLength_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setLength_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setLine_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setLine_I_V_args[] = 
{
  &StyledTextEvent_methods_setLine_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setLine_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setLine_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setLine", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setLine_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setLine_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setLine_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setLinesAdded_I_V_arg_num = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "num", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setLinesAdded_I_V_args[] = 
{
  &StyledTextEvent_methods_setLinesAdded_I_V_arg_num,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setLinesAdded_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setLinesAdded_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLinesAdded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setLinesAdded", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setLinesAdded_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setLinesAdded_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setLinesAdded_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setListType_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setListType_I_V_args[] = 
{
  &StyledTextEvent_methods_setListType_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setListType_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setListType_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setListType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setListType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setListType_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setListType_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setListType_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setMargin_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setMargin_I_V_args[] = 
{
  &StyledTextEvent_methods_setMargin_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setMargin_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setMargin_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setMargin", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setMargin_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setMargin_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setMargin_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setMessage_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setMessage_I_V_args[] = 
{
  &StyledTextEvent_methods_setMessage_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setMessage_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setMessage_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setMessage", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setMessage_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setMessage_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setMessage_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setModificationType_I_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setModificationType_I_V_args[] = 
{
  &StyledTextEvent_methods_setModificationType_I_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setModificationType_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setModificationType_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setModificationType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setModificationType", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setModificationType_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setModificationType_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setModificationType_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setModifiers_I_V_arg_m = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "m", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setModifiers_I_V_args[] = 
{
  &StyledTextEvent_methods_setModifiers_I_V_arg_m,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setModifiers_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setModifiers_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setModifiers", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setModifiers_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setModifiers_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setModifiers_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setPosition_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setPosition_I_V_args[] = 
{
  &StyledTextEvent_methods_setPosition_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setPosition_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setPosition_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setPosition", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setPosition_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setPosition_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setPosition_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setText_INLRString__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setText_INLRString__V_args[] = 
{
  &StyledTextEvent_methods_setText_INLRString__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setText", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setText_INLRString__V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setText_INLRString__V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setWParam_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setWParam_I_V_args[] = 
{
  &StyledTextEvent_methods_setWParam_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setWParam_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setWParam_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWParam", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setWParam", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setWParam_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setWParam_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setWParam_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setX_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setX_I_V_args[] = 
{
  &StyledTextEvent_methods_setX_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setX_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setX_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setX", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setX_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setX_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setX_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StyledTextEvent_methods_setY_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StyledTextEvent_methods_setY_I_V_args[] = 
{
  &StyledTextEvent_methods_setY_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StyledTextEvent_methods_setY_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StyledTextEvent_method_setY_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setY", // alternative name of method
  -1, // altlabelHashCode
  StyledTextEvent_methods_setY_I_V_args, // the arguments
  0, //arguments count
  StyledTextEvent_methods_setY_I_V_exceptions, // the declared exceptions
  StyledTextEvent_MetainfoWrapper::StyledTextEvent_method_setY_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StyledTextEvent_methods[] = 
{
  &StyledTextEvent_method_GetClass__L_acdk_lang_RClass_,
  &StyledTextEvent_method_StyledTextEvent_II_LRStyledTextEvent_,
  &StyledTextEvent_method_StyledTextEvent__LRStyledTextEvent_,
  &StyledTextEvent_method_StyledTextEvent_I_LRStyledTextEvent_,
  &StyledTextEvent_method_getAlt__Z,
  &StyledTextEvent_method_getControl__Z,
  &StyledTextEvent_method_getDragAllowMove__Z,
  &StyledTextEvent_method_getDragText__LRString_,
  &StyledTextEvent_method_getFoldLevelNow__I,
  &StyledTextEvent_method_getFoldLevelPrev__I,
  &StyledTextEvent_method_getKey__I,
  &StyledTextEvent_method_getLParam__I,
  &StyledTextEvent_method_getLength__I,
  &StyledTextEvent_method_getLine__I,
  &StyledTextEvent_method_getLinesAdded__I,
  &StyledTextEvent_method_getListType__I,
  &StyledTextEvent_method_getMargin__I,
  &StyledTextEvent_method_getMessage__I,
  &StyledTextEvent_method_getModificationType__I,
  &StyledTextEvent_method_getModifiers__I,
  &StyledTextEvent_method_getPosition__I,
  &StyledTextEvent_method_getShift__Z,
  &StyledTextEvent_method_getText__LRString_,
  &StyledTextEvent_method_getWParam__I,
  &StyledTextEvent_method_getX__I,
  &StyledTextEvent_method_getY__I,
  &StyledTextEvent_method_setDragAllowMove_Z_V,
  &StyledTextEvent_method_setDragText_INLRString__V,
  &StyledTextEvent_method_setFoldLevelNow_I_V,
  &StyledTextEvent_method_setFoldLevelPrev_I_V,
  &StyledTextEvent_method_setKey_I_V,
  &StyledTextEvent_method_setLParam_I_V,
  &StyledTextEvent_method_setLength_I_V,
  &StyledTextEvent_method_setLine_I_V,
  &StyledTextEvent_method_setLinesAdded_I_V,
  &StyledTextEvent_method_setListType_I_V,
  &StyledTextEvent_method_setMargin_I_V,
  &StyledTextEvent_method_setMessage_I_V,
  &StyledTextEvent_method_setModificationType_I_V,
  &StyledTextEvent_method_setModifiers_I_V,
  &StyledTextEvent_method_setPosition_I_V,
  &StyledTextEvent_method_setText_INLRString__V,
  &StyledTextEvent_method_setWParam_I_V,
  &StyledTextEvent_method_setX_I_V,
  &StyledTextEvent_method_setY_I_V,
  0
};


struct StyledTextEvent_MetaInfoInitializer
{  StyledTextEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StyledTextEvent::clazzInfo();
    ci->fields =  _StyledTextEvent_fields;
    ci->methods =  _StyledTextEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StyledTextEvent_MetaInfoInitializer StyledTextEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) ide_dummyExportFunc() {}
#endif

