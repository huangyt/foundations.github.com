// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TreeItemId_create_array(int length)
{
  return new ObjectArrayImpl<RTreeItemId>(length);
}

//static
::acdk::lang::RObject
TreeItemId_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeItemId_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeItemId::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_TreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeItemId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_TreeItemId_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeItemId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_equals_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemId::equals((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->equals((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemId::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemId::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_isOk__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemId::isOk();
    else
      ret = This->isOk();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeItemId::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemId_method_treeItemIdValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemId* This = dmi_cast<TreeItemId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemId::treeItemIdValue();
    else
      ret = This->treeItemIdValue();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeItemId_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeItemId_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_TreeItemId__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_TreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_TreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeItemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeItemId::clazzInfo(), // return type
  "_0_TreeItemId", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_TreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeItemId_methods_TreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_TreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemId_methods_TreeItemId_I_LRTreeItemId__arg_lItem = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lItem", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_TreeItemId_I_LRTreeItemId__args[] = 
{
  &TreeItemId_methods_TreeItemId_I_LRTreeItemId__arg_lItem,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_TreeItemId_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_TreeItemId_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeItemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeItemId::clazzInfo(), // return type
  "_1_TreeItemId", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_TreeItemId_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeItemId_methods_TreeItemId_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_TreeItemId_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemId_methods_equals_INLRTreeItemId__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_equals_INLRTreeItemId__Z_args[] = 
{
  &TreeItemId_methods_equals_INLRTreeItemId__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_equals_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_equals_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_equals_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeItemId_methods_equals_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_equals_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemId_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_equals_INLRObject__Z_args[] = 
{
  &TreeItemId_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeItemId_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_hashCode", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_hashCode__I_args, // the arguments
  0, //arguments count
  TreeItemId_methods_hashCode__I_exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_isOk__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_isOk__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_isOk__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isOk", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isOk", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_isOk__Z_args, // the arguments
  0, //arguments count
  TreeItemId_methods_isOk__Z_exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_isOk__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toString", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TreeItemId_methods_toString__LRString__exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods_treeItemIdValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_methods_treeItemIdValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_method_treeItemIdValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeItemIdValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_treeItemIdValue", // alternative name of method
  -1, // altlabelHashCode
  TreeItemId_methods_treeItemIdValue__I_args, // the arguments
  0, //arguments count
  TreeItemId_methods_treeItemIdValue__I_exceptions, // the declared exceptions
  TreeItemId_MetainfoWrapper::TreeItemId_method_treeItemIdValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeItemId_methods[] = 
{
  &TreeItemId_method_GetClass__L_acdk_lang_RClass_,
  &TreeItemId_method_TreeItemId__LRTreeItemId_,
  &TreeItemId_method_TreeItemId_I_LRTreeItemId_,
  &TreeItemId_method_equals_INLRTreeItemId__Z,
  &TreeItemId_method_equals_INLRObject__Z,
  &TreeItemId_method_hashCode__I,
  &TreeItemId_method_isOk__Z,
  &TreeItemId_method_toString__LRString_,
  &TreeItemId_method_treeItemIdValue__I,
  0
};


struct TreeItemId_MetaInfoInitializer
{  TreeItemId_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeItemId::clazzInfo();
    ci->fields =  _TreeItemId_fields;
    ci->methods =  _TreeItemId_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeItemId_MetaInfoInitializer TreeItemId_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TreeItemData_create_array(int length)
{
  return new ObjectArrayImpl<RTreeItemData>(length);
}

//static
::acdk::lang::RObject
TreeItemData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeItemData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeItemData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_TreeItemData_INLRObject__LRTreeItemData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeItemData((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_equals_INLRTreeItemData__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemData::equals((RTreeItemData)args[0].getObjectVar());
    else
      ret = This->equals((RTreeItemData)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeItemData::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_getData__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeItemData::getData();
    else
        ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_getId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeItemData::getId();
    else
        ret = (::acdk::lang::RObject)This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_setData_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeItemData::setData((RObject)args[0].getObjectVar());
    else
        This->setData((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_setId_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeItemData::setId((RTreeItemId)args[0].getObjectVar());
    else
        This->setId((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeItemData_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeItemData* This = dmi_cast<TreeItemData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeItemData::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeItemData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeItemData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__args[] = 
{
  &TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_TreeItemData_INLRObject__LRTreeItemData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeItemData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeItemData::clazzInfo(), // return type
  "_0_TreeItemData", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__args, // the arguments
  0, //arguments count
  TreeItemData_methods_TreeItemData_INLRObject__LRTreeItemData__exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_TreeItemData_INLRObject__LRTreeItemData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_methods_equals_INLRTreeItemData__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_equals_INLRTreeItemData__Z_args[] = 
{
  &TreeItemData_methods_equals_INLRTreeItemData__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_equals_INLRTreeItemData__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_equals_INLRTreeItemData__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_equals_INLRTreeItemData__Z_args, // the arguments
  0, //arguments count
  TreeItemData_methods_equals_INLRTreeItemData__Z_exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_equals_INLRTreeItemData__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_equals_INLRObject__Z_args[] = 
{
  &TreeItemData_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeItemData_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_getData__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_getData__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_getData__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getData", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_getData__LRObject__args, // the arguments
  0, //arguments count
  TreeItemData_methods_getData__LRObject__exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_getData__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_getId__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_getId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_getId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1_getId", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_getId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeItemData_methods_getId__LRTreeItemId__exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_getId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_methods_setData_INLRObject__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_setData_INLRObject__V_args[] = 
{
  &TreeItemData_methods_setData_INLRObject__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_setData_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_setData_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setData", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_setData_INLRObject__V_args, // the arguments
  0, //arguments count
  TreeItemData_methods_setData_INLRObject__V_exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_setData_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_methods_setId_INLRTreeItemId__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_setId_INLRTreeItemId__V_args[] = 
{
  &TreeItemData_methods_setId_INLRTreeItemId__V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_setId_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_setId_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setId", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_setId_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeItemData_methods_setId_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_setId_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  TreeItemData_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TreeItemData_methods_toString__LRString__exceptions, // the declared exceptions
  TreeItemData_MetainfoWrapper::TreeItemData_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeItemData_methods[] = 
{
  &TreeItemData_method_GetClass__L_acdk_lang_RClass_,
  &TreeItemData_method_TreeItemData_INLRObject__LRTreeItemData_,
  &TreeItemData_method_equals_INLRTreeItemData__Z,
  &TreeItemData_method_equals_INLRObject__Z,
  &TreeItemData_method_getData__LRObject_,
  &TreeItemData_method_getId__LRTreeItemId_,
  &TreeItemData_method_setData_INLRObject__V,
  &TreeItemData_method_setId_INLRTreeItemId__V,
  &TreeItemData_method_toString__LRString_,
  0
};


struct TreeItemData_MetaInfoInitializer
{  TreeItemData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeItemData::clazzInfo();
    ci->fields =  _TreeItemData_fields;
    ci->methods =  _TreeItemData_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeItemData_MetaInfoInitializer TreeItemData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TreeEvent_create_array(int length)
{
  return new ObjectArrayImpl<RTreeEvent>(length);
}

//static
::acdk::lang::RObject
TreeEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_TreeEvent_II_LRTreeEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_TreeEvent__LRTreeEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_TreeEvent_I_LRTreeEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getItem__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeEvent::getItem();
    else
        ret = (::acdk::lang::RObject)This->getItem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getKeyCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeEvent::getKeyCode();
    else
      ret = This->getKeyCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getKeyEvent__LRKeyEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeEvent::getKeyEvent();
    else
        ret = (::acdk::lang::RObject)This->getKeyEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeEvent::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getOldItem__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeEvent::getOldItem();
    else
        ret = (::acdk::lang::RObject)This->getOldItem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_getPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeEvent::getPoint();
    else
        ret = (::acdk::lang::RObject)This->getPoint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_isEditCancelled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeEvent::isEditCancelled();
    else
      ret = This->isEditCancelled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setEditCanceled_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setEditCanceled(args[0].getBoolVar());
    else
        This->setEditCanceled(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setItem_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setItem((RTreeItemId)args[0].getObjectVar());
    else
        This->setItem((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setKeyEvent_INLRKeyEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setKeyEvent((RKeyEvent)args[0].getObjectVar());
    else
        This->setKeyEvent((RKeyEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setLabel_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setLabel((RString)args[0].getObjectVar());
    else
        This->setLabel((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setOldItem_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setOldItem((RTreeItemId)args[0].getObjectVar());
    else
        This->setOldItem((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeEvent_method_setPoint_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeEvent* This = dmi_cast<TreeEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeEvent::setPoint((RPoint)args[0].getObjectVar());
    else
        This->setPoint((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeBeginDrag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeBeginDrag, flags);
    else
      TreeEvent::EvtCommandTreeBeginDrag = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeBeginLabelEdit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeBeginLabelEdit, flags);
    else
      TreeEvent::EvtCommandTreeBeginLabelEdit = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeBeginRDrag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeBeginRDrag, flags);
    else
      TreeEvent::EvtCommandTreeBeginRDrag = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeDeleteItem_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeDeleteItem, flags);
    else
      TreeEvent::EvtCommandTreeDeleteItem = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeEndDrag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeEndDrag, flags);
    else
      TreeEvent::EvtCommandTreeEndDrag = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeEndLabelEdit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeEndLabelEdit, flags);
    else
      TreeEvent::EvtCommandTreeEndLabelEdit = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeGetInfo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeGetInfo, flags);
    else
      TreeEvent::EvtCommandTreeGetInfo = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemActivated_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemActivated, flags);
    else
      TreeEvent::EvtCommandTreeItemActivated = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemCollapsed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemCollapsed, flags);
    else
      TreeEvent::EvtCommandTreeItemCollapsed = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemCollapsing_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemCollapsing, flags);
    else
      TreeEvent::EvtCommandTreeItemCollapsing = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemExpanded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemExpanded, flags);
    else
      TreeEvent::EvtCommandTreeItemExpanded = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemExpanding_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemExpanding, flags);
    else
      TreeEvent::EvtCommandTreeItemExpanding = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemMiddleClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemMiddleClick, flags);
    else
      TreeEvent::EvtCommandTreeItemMiddleClick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeItemRightClick_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeItemRightClick, flags);
    else
      TreeEvent::EvtCommandTreeItemRightClick = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeKeyDown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeKeyDown, flags);
    else
      TreeEvent::EvtCommandTreeKeyDown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeSelChanged_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeSelChanged, flags);
    else
      TreeEvent::EvtCommandTreeSelChanged = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeSelChanging_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeSelChanging, flags);
    else
      TreeEvent::EvtCommandTreeSelChanging = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeEvent_fields_EvtCommandTreeSetInfo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TreeEvent::EvtCommandTreeSetInfo, flags);
    else
      TreeEvent::EvtCommandTreeSetInfo = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeBeginDrag = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeBeginDrag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeBeginDrag_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeBeginDrag // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeBeginLabelEdit = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeBeginLabelEdit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeBeginLabelEdit_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeBeginLabelEdit // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeBeginRDrag = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeBeginRDrag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeBeginRDrag_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeBeginRDrag // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeDeleteItem = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeDeleteItem", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeDeleteItem_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeDeleteItem // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeEndDrag = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeEndDrag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeEndDrag_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeEndDrag // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeEndLabelEdit = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeEndLabelEdit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeEndLabelEdit_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeEndLabelEdit // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeGetInfo = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeGetInfo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeGetInfo_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeGetInfo // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemActivated = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemActivated", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemActivated_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemActivated // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemCollapsed = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemCollapsed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemCollapsed_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemCollapsed // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemCollapsing = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemCollapsing", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemCollapsing_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemCollapsing // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemExpanded = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemExpanded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemExpanded_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemExpanded // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemExpanding = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemExpanding", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemExpanding_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemExpanding // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemMiddleClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemMiddleClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemMiddleClick_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemMiddleClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeItemRightClick = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeItemRightClick", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeItemRightClick_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeItemRightClick // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeKeyDown = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeKeyDown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeKeyDown_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeKeyDown // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeSelChanged = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeSelChanged", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeSelChanged_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeSelChanged // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeSelChanging = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeSelChanging", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeSelChanging_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeSelChanging // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeEvent_fields_EvtCommandTreeSetInfo = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandTreeSetInfo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeEvent_MetainfoWrapper::TreeEvent_fields_EvtCommandTreeSetInfo_accessor, // read/write access to this fields
  (void*)&TreeEvent::EvtCommandTreeSetInfo // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeEvent_fields[] = 
{
  &TreeEvent_fields_EvtCommandTreeBeginDrag,
  &TreeEvent_fields_EvtCommandTreeBeginLabelEdit,
  &TreeEvent_fields_EvtCommandTreeBeginRDrag,
  &TreeEvent_fields_EvtCommandTreeDeleteItem,
  &TreeEvent_fields_EvtCommandTreeEndDrag,
  &TreeEvent_fields_EvtCommandTreeEndLabelEdit,
  &TreeEvent_fields_EvtCommandTreeGetInfo,
  &TreeEvent_fields_EvtCommandTreeItemActivated,
  &TreeEvent_fields_EvtCommandTreeItemCollapsed,
  &TreeEvent_fields_EvtCommandTreeItemCollapsing,
  &TreeEvent_fields_EvtCommandTreeItemExpanded,
  &TreeEvent_fields_EvtCommandTreeItemExpanding,
  &TreeEvent_fields_EvtCommandTreeItemMiddleClick,
  &TreeEvent_fields_EvtCommandTreeItemRightClick,
  &TreeEvent_fields_EvtCommandTreeKeyDown,
  &TreeEvent_fields_EvtCommandTreeSelChanged,
  &TreeEvent_fields_EvtCommandTreeSelChanging,
  &TreeEvent_fields_EvtCommandTreeSetInfo,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_TreeEvent_II_LRTreeEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_TreeEvent_II_LRTreeEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_TreeEvent_II_LRTreeEvent__args[] = 
{
  &TreeEvent_methods_TreeEvent_II_LRTreeEvent__arg_commandType,
  &TreeEvent_methods_TreeEvent_II_LRTreeEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_TreeEvent_II_LRTreeEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_TreeEvent_II_LRTreeEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeEvent::clazzInfo(), // return type
  "_0_TreeEvent", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_TreeEvent_II_LRTreeEvent__args, // the arguments
  0, //arguments count
  TreeEvent_methods_TreeEvent_II_LRTreeEvent__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_TreeEvent_II_LRTreeEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_TreeEvent__LRTreeEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_TreeEvent__LRTreeEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_TreeEvent__LRTreeEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeEvent::clazzInfo(), // return type
  "_1_TreeEvent", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_TreeEvent__LRTreeEvent__args, // the arguments
  0, //arguments count
  TreeEvent_methods_TreeEvent__LRTreeEvent__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_TreeEvent__LRTreeEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_TreeEvent_I_LRTreeEvent__arg_commandType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "commandType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_TreeEvent_I_LRTreeEvent__args[] = 
{
  &TreeEvent_methods_TreeEvent_I_LRTreeEvent__arg_commandType,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_TreeEvent_I_LRTreeEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_TreeEvent_I_LRTreeEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeEvent::clazzInfo(), // return type
  "_2_TreeEvent", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_TreeEvent_I_LRTreeEvent__args, // the arguments
  0, //arguments count
  TreeEvent_methods_TreeEvent_I_LRTreeEvent__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_TreeEvent_I_LRTreeEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getItem__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getItem__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getItem__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_3_getItem", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getItem__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeEvent_methods_getItem__LRTreeItemId__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getItem__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getKeyCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getKeyCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getKeyCode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeyCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getKeyCode", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getKeyCode__I_args, // the arguments
  0, //arguments count
  TreeEvent_methods_getKeyCode__I_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getKeyCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getKeyEvent__LRKeyEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getKeyEvent__LRKeyEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getKeyEvent__LRKeyEvent_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeyEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RKeyEvent::clazzInfo(), // return type
  "_9_getKeyEvent", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getKeyEvent__LRKeyEvent__args, // the arguments
  0, //arguments count
  TreeEvent_methods_getKeyEvent__LRKeyEvent__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getKeyEvent__LRKeyEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getLabel", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  TreeEvent_methods_getLabel__LRString__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getOldItem__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getOldItem__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getOldItem__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOldItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_5_getOldItem", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getOldItem__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeEvent_methods_getOldItem__LRTreeItemId__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getOldItem__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_getPoint__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_getPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_getPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_7_getPoint", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_getPoint__LRPoint__args, // the arguments
  0, //arguments count
  TreeEvent_methods_getPoint__LRPoint__exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_getPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_isEditCancelled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_isEditCancelled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_isEditCancelled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEditCancelled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isEditCancelled", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_isEditCancelled__Z_args, // the arguments
  0, //arguments count
  TreeEvent_methods_isEditCancelled__Z_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_isEditCancelled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setEditCanceled_Z_V_arg_editCancelled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "editCancelled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setEditCanceled_Z_V_args[] = 
{
  &TreeEvent_methods_setEditCanceled_Z_V_arg_editCancelled,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setEditCanceled_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setEditCanceled_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEditCanceled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setEditCanceled", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setEditCanceled_Z_V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setEditCanceled_Z_V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setEditCanceled_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setItem_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setItem_INLRTreeItemId__V_args[] = 
{
  &TreeEvent_methods_setItem_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setItem_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setItem_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setItem", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setItem_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setItem_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setItem_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_arg_evt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "evt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RKeyEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_args[] = 
{
  &TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_arg_evt,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setKeyEvent_INLRKeyEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setKeyEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setKeyEvent", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setKeyEvent_INLRKeyEvent__V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setKeyEvent_INLRKeyEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setLabel_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setLabel_INLRString__V_args[] = 
{
  &TreeEvent_methods_setLabel_INLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setLabel_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setLabel_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setLabel", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setLabel_INLRString__V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setLabel_INLRString__V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setLabel_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setOldItem_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setOldItem_INLRTreeItemId__V_args[] = 
{
  &TreeEvent_methods_setOldItem_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setOldItem_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setOldItem_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOldItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setOldItem", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setOldItem_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setOldItem_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setOldItem_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_methods_setPoint_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods_setPoint_INLRPoint__V_args[] = 
{
  &TreeEvent_methods_setPoint_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_methods_setPoint_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_method_setPoint_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setPoint", // alternative name of method
  -1, // altlabelHashCode
  TreeEvent_methods_setPoint_INLRPoint__V_args, // the arguments
  0, //arguments count
  TreeEvent_methods_setPoint_INLRPoint__V_exceptions, // the declared exceptions
  TreeEvent_MetainfoWrapper::TreeEvent_method_setPoint_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeEvent_methods[] = 
{
  &TreeEvent_method_GetClass__L_acdk_lang_RClass_,
  &TreeEvent_method_TreeEvent_II_LRTreeEvent_,
  &TreeEvent_method_TreeEvent__LRTreeEvent_,
  &TreeEvent_method_TreeEvent_I_LRTreeEvent_,
  &TreeEvent_method_getItem__LRTreeItemId_,
  &TreeEvent_method_getKeyCode__I,
  &TreeEvent_method_getKeyEvent__LRKeyEvent_,
  &TreeEvent_method_getLabel__LRString_,
  &TreeEvent_method_getOldItem__LRTreeItemId_,
  &TreeEvent_method_getPoint__LRPoint_,
  &TreeEvent_method_isEditCancelled__Z,
  &TreeEvent_method_setEditCanceled_Z_V,
  &TreeEvent_method_setItem_INLRTreeItemId__V,
  &TreeEvent_method_setKeyEvent_INLRKeyEvent__V,
  &TreeEvent_method_setLabel_INLRString__V,
  &TreeEvent_method_setOldItem_INLRTreeItemId__V,
  &TreeEvent_method_setPoint_INLRPoint__V,
  0
};


struct TreeEvent_MetaInfoInitializer
{  TreeEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeEvent::clazzInfo();
    ci->fields =  _TreeEvent_fields;
    ci->methods =  _TreeEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeEvent_MetaInfoInitializer TreeEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TreeCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RTreeCtrl>(length);
}

//static
::acdk::lang::RObject
TreeCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RValidator)args[5].getObjectVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_I_LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RValidator)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::addRoot((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RTreeItemData)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRoot((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RTreeItemData)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_addRoot_INLRString__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::addRoot((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRoot((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_addRoot_INLRString_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::addRoot((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->addRoot((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_addRoot_INLRString_II_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::addRoot((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->addRoot((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), (RTreeItemData)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), (RTreeItemData)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->appendItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_assignImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::assignImageList((RImageList)args[0].getObjectVar());
    else
        This->assignImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_assignStateImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::assignStateImageList((RImageList)args[0].getObjectVar());
    else
        This->assignStateImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_collapse_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::collapse((RTreeItemId)args[0].getObjectVar());
    else
        This->collapse((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_collapseAndReset_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::collapseAndReset((RTreeItemId)args[0].getObjectVar());
    else
        This->collapseAndReset((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_deleteAllItems__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::deleteAllItems();
    else
        This->deleteAllItems();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_deleteChildren_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::deleteChildren((RTreeItemId)args[0].getObjectVar());
    else
        This->deleteChildren((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_deleteItem_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::deleteItem((RTreeItemId)args[0].getObjectVar());
    else
        This->deleteItem((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_editLabel_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::editLabel((RTreeItemId)args[0].getObjectVar());
    else
        This->editLabel((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_ensureVisible_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::ensureVisible((RTreeItemId)args[0].getObjectVar());
    else
        This->ensureVisible((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_expand_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::expand((RTreeItemId)args[0].getObjectVar());
    else
        This->expand((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getBoundingRect((RTreeItemId)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]), args[2].getBoolVar());
    else
      ret = This->getBoundingRect((RTreeItemId)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getBoundingRect((RTreeItemId)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]));
    else
      ret = This->getBoundingRect((RTreeItemId)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getChildrenCount_INLRTreeItemId_Z_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getChildrenCount((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    else
      ret = This->getChildrenCount((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getChildrenCount_INLRTreeItemId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getChildrenCount((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->getChildrenCount((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getCount();
    else
      ret = This->getCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getEditControl__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getEditControl();
    else
        ret = (::acdk::lang::RObject)This->getEditControl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getFirstChild((RTreeItemId)args[0].getObjectVar(), args[1].getLongRef());
    else
        ret = (::acdk::lang::RObject)This->getFirstChild((RTreeItemId)args[0].getObjectVar(), args[1].getLongRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getFirstVisibleItem__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getFirstVisibleItem();
    else
        ret = (::acdk::lang::RObject)This->getFirstVisibleItem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getImageList__LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getImageList();
    else
        ret = (::acdk::lang::RObject)This->getImageList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getIndent__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getIndent();
    else
      ret = This->getIndent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemBackgroundColour_INLRTreeItemId__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemBackgroundColour((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemBackgroundColour((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemData_INLRTreeItemId__LRTreeItemData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemData((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemData((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemDataObject_INLRTreeItemId__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemDataObject((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemDataObject((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemFont_INLRTreeItemId__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemFont((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemFont((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemImage_INLRTreeItemId_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getItemImage((RTreeItemId)args[0].getObjectVar(), (TreeItemIcon)args[1].getIntVar());
    else
      ret = This->getItemImage((RTreeItemId)args[0].getObjectVar(), (TreeItemIcon)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemImage_INLRTreeItemId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getItemImage((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->getItemImage((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemParent_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemParent((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemParent((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemText_INLRTreeItemId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemText((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemText((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getItemTextColour_INLRTreeItemId__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getItemTextColour((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getItemTextColour((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getLastChild_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getLastChild((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getLastChild((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getNextChild_INLRTreeItemId_J_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getNextChild((RTreeItemId)args[0].getObjectVar(), args[1].getLongVar());
    else
        ret = (::acdk::lang::RObject)This->getNextChild((RTreeItemId)args[0].getObjectVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getNextSibling_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getNextSibling((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getNextSibling((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getNextVisible_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getNextVisible((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getNextVisible((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getPrevSibling_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getPrevSibling((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrevSibling((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getPrevVisible_INLRTreeItemId__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getPrevVisible((RTreeItemId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrevVisible((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getRootItem__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getRootItem();
    else
        ret = (::acdk::lang::RObject)This->getRootItem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getSelection__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getSelection();
    else
        ret = (::acdk::lang::RObject)This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getSelections_INLRTreeItemIdArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getSelections((RTreeItemIdArray)args[0].getObjectVar());
    else
      ret = This->getSelections((RTreeItemIdArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getSpacing__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::getSpacing();
    else
      ret = This->getSpacing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_getStateImageList__LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::getStateImageList();
    else
        ret = (::acdk::lang::RObject)This->getStateImageList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_hitTest_INLRPoint__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::hitTest((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->hitTest((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_hitTest_INLRPoint_OUTI_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::hitTest((RPoint)args[0].getObjectVar(), args[1].getIntRef());
    else
        ret = (::acdk::lang::RObject)This->hitTest((RPoint)args[0].getObjectVar(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar(), (RTreeItemData)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar(), (RTreeItemData)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar(), (RTreeItemData)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar(), (RTreeItemData)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertItem((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_isBold_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::isBold((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->isBold((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_isExpanded_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::isExpanded((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->isExpanded((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_isSelected_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::isSelected((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->isSelected((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_isVisible_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::isVisible((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->isVisible((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_itemHasChildren_INLRTreeItemId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::itemHasChildren((RTreeItemId)args[0].getObjectVar());
    else
      ret = This->itemHasChildren((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::onCompareItems((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar());
    else
      ret = This->onCompareItems((RTreeItemId)args[0].getObjectVar(), (RTreeItemId)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), (RTreeItemData)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), (RTreeItemData)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeCtrl::prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->prependItem((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_scrollTo_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::scrollTo((RTreeItemId)args[0].getObjectVar());
    else
        This->scrollTo((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_selectItem_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::selectItem((RTreeItemId)args[0].getObjectVar());
    else
        This->selectItem((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setFont_INLRFont__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeCtrl::setFont((RFont)args[0].getObjectVar());
    else
      ret = This->setFont((RFont)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setImageList((RImageList)args[0].getObjectVar());
    else
        This->setImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setIndent_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setIndent(args[0].getIntVar());
    else
        This->setIndent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemBackgroundColour((RTreeItemId)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
        This->setItemBackgroundColour((RTreeItemId)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemBold_INLRTreeItemId_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemBold((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setItemBold((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemBold_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemBold((RTreeItemId)args[0].getObjectVar());
    else
        This->setItemBold((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemData_INLRTreeItemId_INLRTreeItemData__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemData((RTreeItemId)args[0].getObjectVar(), (RTreeItemData)args[1].getObjectVar());
    else
        This->setItemData((RTreeItemId)args[0].getObjectVar(), (RTreeItemData)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemDataObject_INLRTreeItemId_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemDataObject((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->setItemDataObject((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemFont_INLRTreeItemId_INLRFont__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemFont((RTreeItemId)args[0].getObjectVar(), (RFont)args[1].getObjectVar());
    else
        This->setItemFont((RTreeItemId)args[0].getObjectVar(), (RFont)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemHasChildren_INLRTreeItemId_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemHasChildren((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setItemHasChildren((RTreeItemId)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemHasChildren_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemHasChildren((RTreeItemId)args[0].getObjectVar());
    else
        This->setItemHasChildren((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemImage_INLRTreeItemId_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemImage((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (TreeItemIcon)args[2].getIntVar());
    else
        This->setItemImage((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar(), (TreeItemIcon)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemImage_INLRTreeItemId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemImage((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->setItemImage((RTreeItemId)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemText_INLRTreeItemId_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemText((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->setItemText((RTreeItemId)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setItemTextColour_INLRTreeItemId_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setItemTextColour((RTreeItemId)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
        This->setItemTextColour((RTreeItemId)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setSpacing_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setSpacing(args[0].getIntVar());
    else
        This->setSpacing(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setStateImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setStateImageList((RImageList)args[0].getObjectVar());
    else
        This->setStateImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_setWindowStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::setWindowStyle(args[0].getIntVar());
    else
        This->setWindowStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_sortChildren_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::sortChildren((RTreeItemId)args[0].getObjectVar());
    else
        This->sortChildren((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_toggle_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::toggle((RTreeItemId)args[0].getObjectVar());
    else
        This->toggle((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_unselect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::unselect();
    else
        This->unselect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeCtrl_method_unselectAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeCtrl* This = dmi_cast<TreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeCtrl::unselectAll();
    else
        This->unselectAll();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeCtrl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1C_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl__LRTreeCtrl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_0_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_id,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_pos,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_size,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_style,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_validator,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_1_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_2_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_I_LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_3_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_I_LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_I_LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_id,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_4_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_id,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_pos,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_5_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_id,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_pos,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_size,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_6_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__args[] = 
{
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_parent,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_id,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_pos,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_size,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_style,
  &TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeCtrl::clazzInfo(), // return type
  "_7_TreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text,
  &TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image,
  &TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage,
  &TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_Y_addRoot", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_addRoot_INLRString__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_Z_addRoot", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_addRoot_INLRString__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_addRoot_INLRString__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__arg_text,
  &TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_addRoot_INLRString_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_10_addRoot", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_addRoot_INLRString_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_addRoot_INLRString_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_text,
  &TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_image,
  &TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__arg_selectedImage,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_addRoot_INLRString_II_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_11_addRoot", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_addRoot_INLRString_II_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_addRoot_INLRString_II_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1e_appendItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_appendItem_INLRTreeItemId_INLRString__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1f_appendItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_appendItem_INLRTreeItemId_INLRString__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1g_appendItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image,
  &TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1h_appendItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_assignImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_assignImageList_INLRImageList__V_args[] = 
{
  &TreeCtrl_methods_assignImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_assignImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_assignImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assignImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_assignImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_assignImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_assignImageList_INLRImageList__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_assignImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_assignStateImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_assignStateImageList_INLRImageList__V_args[] = 
{
  &TreeCtrl_methods_assignStateImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_assignStateImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_assignStateImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assignStateImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_assignStateImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_assignStateImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_assignStateImageList_INLRImageList__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_assignStateImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_collapse_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_collapse_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_collapse_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_collapse_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_collapse_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "collapse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1m_collapse", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_collapse_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_collapse_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_collapse_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_collapseAndReset_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "collapseAndReset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1n_collapseAndReset", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_collapseAndReset_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_collapseAndReset_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_deleteAllItems__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_deleteAllItems__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_deleteAllItems__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteAllItems", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_deleteAllItems", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_deleteAllItems__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_deleteAllItems__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_deleteAllItems__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_deleteChildren_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_deleteChildren", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_deleteChildren_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_deleteChildren_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_deleteItem_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_deleteItem_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_deleteItem_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_deleteItem_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_deleteItem_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_deleteItem_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_deleteItem_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_deleteItem_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_editLabel_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_editLabel_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_editLabel_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_editLabel_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_editLabel_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "editLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1y_editLabel", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_editLabel_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_editLabel_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_editLabel_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_ensureVisible_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1s_ensureVisible", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_ensureVisible_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_ensureVisible_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_expand_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_expand_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_expand_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_expand_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_expand_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expand", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_expand", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_expand_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_expand_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_expand_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_textOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "textOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_args[] = 
{
  &TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_item,
  &TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_rect,
  &TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_arg_textOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoundingRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1w_getBoundingRect", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_args[] = 
{
  &TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_arg_item,
  &TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoundingRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1x_getBoundingRect", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_arg_recursively = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursively", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_args[] = 
{
  &TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_arg_item,
  &TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_arg_recursively,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getChildrenCount_INLRTreeItemId_Z_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildrenCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_K_getChildrenCount", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getChildrenCount_INLRTreeItemId_Z_I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getChildrenCount_INLRTreeItemId_Z_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_args[] = 
{
  &TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getChildrenCount_INLRTreeItemId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildrenCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_L_getChildrenCount", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getChildrenCount_INLRTreeItemId__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getChildrenCount_INLRTreeItemId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getCount", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getCount__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getCount__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getEditControl__LRTextCtrl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getEditControl__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getEditControl__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEditControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(), // return type
  "_1z_getEditControl", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getEditControl__LRTextCtrl__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getEditControl__LRTextCtrl__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getEditControl__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__arg_cookie = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "cookie", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__arg_item,
  &TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__arg_cookie,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_Q_getFirstChild", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getFirstVisibleItem__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getFirstVisibleItem__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getFirstVisibleItem__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstVisibleItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_V_getFirstVisibleItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getFirstVisibleItem__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getFirstVisibleItem__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getFirstVisibleItem__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getImageList__LRImageList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getImageList__LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getImageList__LRImageList_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo(), // return type
  "_d_getImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getImageList__LRImageList__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getImageList__LRImageList__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getImageList__LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getIndent__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getIndent__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getIndent__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getIndent", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getIndent__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getIndent__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getIndent__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__args[] = 
{
  &TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemBackgroundColour_INLRTreeItemId__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_p_getItemBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemBackgroundColour_INLRTreeItemId__LRColour__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemBackgroundColour_INLRTreeItemId__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__args[] = 
{
  &TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemData_INLRTreeItemId__LRTreeItemData_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo(), // return type
  "_m_getItemData", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemData_INLRTreeItemId__LRTreeItemData__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemData_INLRTreeItemId__LRTreeItemData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__args[] = 
{
  &TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemDataObject_INLRTreeItemId__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_n_getItemDataObject", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemDataObject_INLRTreeItemId__LRObject__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemDataObject_INLRTreeItemId__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__args[] = 
{
  &TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemFont_INLRTreeItemId__LRFont_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_q_getItemFont", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemFont_INLRTreeItemId__LRFont__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemFont_INLRTreeItemId__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_arg_which = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "which", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_args[] = 
{
  &TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_arg_item,
  &TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_arg_which,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemImage_INLRTreeItemId_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getItemImage", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemImage_INLRTreeItemId_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemImage_INLRTreeItemId__I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemImage_INLRTreeItemId__I_args[] = 
{
  &TreeCtrl_methods_getItemImage_INLRTreeItemId__I_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemImage_INLRTreeItemId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemImage_INLRTreeItemId__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getItemImage", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemImage_INLRTreeItemId__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemImage_INLRTreeItemId__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemImage_INLRTreeItemId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemParent_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_P_getItemParent", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemParent_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemParent_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__args[] = 
{
  &TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemText_INLRTreeItemId__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getItemText", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemText_INLRTreeItemId__LRString__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemText_INLRTreeItemId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__args[] = 
{
  &TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getItemTextColour_INLRTreeItemId__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItemTextColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_o_getItemTextColour", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getItemTextColour_INLRTreeItemId__LRColour__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getItemTextColour_INLRTreeItemId__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getLastChild_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_S_getLastChild", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getLastChild_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getLastChild_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__arg_cookie = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cookie", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__arg_item,
  &TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__arg_cookie,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getNextChild_INLRTreeItemId_J_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_R_getNextChild", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getNextChild_INLRTreeItemId_J_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getNextChild_INLRTreeItemId_J_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getNextSibling_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_T_getNextSibling", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getNextSibling_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getNextSibling_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getNextVisible_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_W_getNextVisible", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getNextVisible_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getNextVisible_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getPrevSibling_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrevSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_U_getPrevSibling", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getPrevSibling_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getPrevSibling_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getPrevVisible_INLRTreeItemId__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrevVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_X_getPrevVisible", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getPrevVisible_INLRTreeItemId__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getPrevVisible_INLRTreeItemId__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getRootItem__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getRootItem__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getRootItem__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRootItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_M_getRootItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getRootItem__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getRootItem__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getRootItem__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getSelection__LRTreeItemId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getSelection__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getSelection__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_N_getSelection", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getSelection__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getSelection__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getSelection__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_arg_tids = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tids", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemIdArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_args[] = 
{
  &TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_arg_tids,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getSelections_INLRTreeItemIdArray__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelections", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_O_getSelections", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getSelections_INLRTreeItemIdArray__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getSelections_INLRTreeItemIdArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getSpacing__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getSpacing__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getSpacing__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpacing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getSpacing", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getSpacing__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getSpacing__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getSpacing__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_getStateImageList__LRImageList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_getStateImageList__LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_getStateImageList__LRImageList_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStateImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo(), // return type
  "_e_getStateImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_getStateImageList__LRImageList__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_getStateImageList__LRImageList__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_getStateImageList__LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__arg_point,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_hitTest_INLRPoint__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hitTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1u_hitTest", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_hitTest_INLRPoint__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_hitTest_INLRPoint__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__arg_point,
  &TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_hitTest_INLRPoint_OUTI_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hitTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1v_hitTest", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_hitTest_INLRPoint_OUTI_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_hitTest_INLRPoint_OUTI_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_index,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_image,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1a_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_index,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1b_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_index,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1c_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_index,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_image,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__arg_selectedImage,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_1d_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_idPrevious = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idPrevious", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_idPrevious,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_16_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_idPrevious = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idPrevious", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_idPrevious,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_17_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_idPrevious = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idPrevious", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_idPrevious,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_18_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_idPrevious = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idPrevious", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_idPrevious,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image,
  &TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_19_insertItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_isBold_INLRTreeItemId__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_isBold_INLRTreeItemId__Z_args[] = 
{
  &TreeCtrl_methods_isBold_INLRTreeItemId__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_isBold_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_isBold_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_isBold", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_isBold_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_isBold_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_isBold_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_args[] = 
{
  &TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_isExpanded_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_isExpanded", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_isExpanded_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_isExpanded_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_isSelected_INLRTreeItemId__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_isSelected_INLRTreeItemId__Z_args[] = 
{
  &TreeCtrl_methods_isSelected_INLRTreeItemId__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_isSelected_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_isSelected_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSelected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_isSelected", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_isSelected_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_isSelected_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_isSelected_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_isVisible_INLRTreeItemId__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_isVisible_INLRTreeItemId__Z_args[] = 
{
  &TreeCtrl_methods_isVisible_INLRTreeItemId__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_isVisible_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_isVisible_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_isVisible", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_isVisible_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_isVisible_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_isVisible_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_args[] = 
{
  &TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_itemHasChildren_INLRTreeItemId__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "itemHasChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_itemHasChildren", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_itemHasChildren_INLRTreeItemId__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_itemHasChildren_INLRTreeItemId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_arg_item1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_arg_item2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_args[] = 
{
  &TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_arg_item1,
  &TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_arg_item2,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_onCompareItems_INLRTreeItemId_INLRTreeItemId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onCompareItems", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_onCompareItems", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_onCompareItems_INLRTreeItemId_INLRTreeItemId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_text,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_image,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_selectedImage,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prependItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_12_prependItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_parent,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_prependItem_INLRTreeItemId_INLRString__LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prependItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_13_prependItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_prependItem_INLRTreeItemId_INLRString__LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_text,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prependItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_14_prependItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "selectedImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__args[] = 
{
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_parent,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_text,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_image,
  &TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__arg_selectedImage,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prependItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo(), // return type
  "_15_prependItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__args, // the arguments
  0, //arguments count
  TreeCtrl_methods_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_scrollTo_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_scrollTo_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_scrollTo_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_scrollTo_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_scrollTo_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_scrollTo", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_scrollTo_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_scrollTo_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_scrollTo_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_selectItem_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_selectItem_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_selectItem_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_selectItem_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_selectItem_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_selectItem", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_selectItem_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_selectItem_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_selectItem_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setFont_INLRFont__Z_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setFont_INLRFont__Z_args[] = 
{
  &TreeCtrl_methods_setFont_INLRFont__Z_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setFont_INLRFont__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setFont_INLRFont__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_setFont", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setFont_INLRFont__Z_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setFont_INLRFont__Z_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setFont_INLRFont__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setImageList_INLRImageList__V_args[] = 
{
  &TreeCtrl_methods_setImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setImageList_INLRImageList__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setIndent_I_V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setIndent_I_V_args[] = 
{
  &TreeCtrl_methods_setIndent_I_V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setIndent_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setIndent_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setIndent", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setIndent_I_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setIndent_I_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setIndent_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_args[] = 
{
  &TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_arg_item,
  &TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemBackgroundColour_INLRTreeItemId_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setItemBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemBackgroundColour_INLRTreeItemId_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_arg_bold = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bold", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_args[] = 
{
  &TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_arg_item,
  &TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_arg_bold,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemBold_INLRTreeItemId_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemBold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setItemBold", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemBold_INLRTreeItemId_Z_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemBold_INLRTreeItemId_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemBold_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemBold_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_setItemBold_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemBold_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemBold_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemBold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_setItemBold", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemBold_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemBold_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemBold_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_args[] = 
{
  &TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_arg_item,
  &TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemData_INLRTreeItemId_INLRTreeItemData__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setItemData", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemData_INLRTreeItemId_INLRTreeItemData__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemData_INLRTreeItemId_INLRTreeItemData__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_args[] = 
{
  &TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_arg_item,
  &TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemDataObject_INLRTreeItemId_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setItemDataObject", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemDataObject_INLRTreeItemId_INLRObject__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemDataObject_INLRTreeItemId_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_args[] = 
{
  &TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_arg_item,
  &TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemFont_INLRTreeItemId_INLRFont__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setItemFont", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemFont_INLRTreeItemId_INLRFont__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemFont_INLRTreeItemId_INLRFont__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_arg_has = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "has", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_args[] = 
{
  &TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_arg_item,
  &TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_arg_has,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemHasChildren_INLRTreeItemId_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemHasChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setItemHasChildren", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemHasChildren_INLRTreeItemId_Z_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemHasChildren_INLRTreeItemId_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemHasChildren_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemHasChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_setItemHasChildren", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemHasChildren_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemHasChildren_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_which = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "which", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_args[] = 
{
  &TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_item,
  &TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_image,
  &TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_which,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemImage_INLRTreeItemId_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setItemImage", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemImage_INLRTreeItemId_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_args[] = 
{
  &TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_arg_item,
  &TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_arg_image,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemImage_INLRTreeItemId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setItemImage", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemImage_INLRTreeItemId_I_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemImage_INLRTreeItemId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_args[] = 
{
  &TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_arg_item,
  &TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemText_INLRTreeItemId_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setItemText", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemText_INLRTreeItemId_INLRString__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemText_INLRTreeItemId_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_args[] = 
{
  &TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_arg_item,
  &TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setItemTextColour_INLRTreeItemId_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemTextColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_setItemTextColour", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setItemTextColour_INLRTreeItemId_INLRColour__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setItemTextColour_INLRTreeItemId_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setSpacing_I_V_arg_spacing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "spacing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setSpacing_I_V_args[] = 
{
  &TreeCtrl_methods_setSpacing_I_V_arg_spacing,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setSpacing_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setSpacing_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSpacing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setSpacing", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setSpacing_I_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setSpacing_I_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setSpacing_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setStateImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setStateImageList_INLRImageList__V_args[] = 
{
  &TreeCtrl_methods_setStateImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setStateImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setStateImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStateImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setStateImageList", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setStateImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setStateImageList_INLRImageList__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setStateImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_setWindowStyle_I_V_arg_styles = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "styles", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_setWindowStyle_I_V_args[] = 
{
  &TreeCtrl_methods_setWindowStyle_I_V_arg_styles,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_setWindowStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_setWindowStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWindowStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setWindowStyle", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_setWindowStyle_I_V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_setWindowStyle_I_V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_setWindowStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_sortChildren_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_sortChildren_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_sortChildren_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_sortChildren_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_sortChildren_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sortChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_sortChildren", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_sortChildren_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_sortChildren_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_sortChildren_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_methods_toggle_INLRTreeItemId__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_toggle_INLRTreeItemId__V_args[] = 
{
  &TreeCtrl_methods_toggle_INLRTreeItemId__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_toggle_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_toggle_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_toggle", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_toggle_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_toggle_INLRTreeItemId__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_toggle_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_unselect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_unselect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_unselect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unselect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_unselect", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_unselect__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_unselect__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_unselect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods_unselectAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_methods_unselectAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_method_unselectAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unselectAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_unselectAll", // alternative name of method
  -1, // altlabelHashCode
  TreeCtrl_methods_unselectAll__V_args, // the arguments
  0, //arguments count
  TreeCtrl_methods_unselectAll__V_exceptions, // the declared exceptions
  TreeCtrl_MetainfoWrapper::TreeCtrl_method_unselectAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeCtrl_methods[] = 
{
  &TreeCtrl_method_GetClass__L_acdk_lang_RClass_,
  &TreeCtrl_method_TreeCtrl__LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow__LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_I_LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint__LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_I_LRTreeCtrl_,
  &TreeCtrl_method_TreeCtrl_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRTreeCtrl_,
  &TreeCtrl_method_addRoot_INLRString_IIINLRTreeItemData__LRTreeItemId_,
  &TreeCtrl_method_addRoot_INLRString__LRTreeItemId_,
  &TreeCtrl_method_addRoot_INLRString_I_LRTreeItemId_,
  &TreeCtrl_method_addRoot_INLRString_II_LRTreeItemId_,
  &TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_,
  &TreeCtrl_method_appendItem_INLRTreeItemId_INLRString__LRTreeItemId_,
  &TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_I_LRTreeItemId_,
  &TreeCtrl_method_appendItem_INLRTreeItemId_INLRString_II_LRTreeItemId_,
  &TreeCtrl_method_assignImageList_INLRImageList__V,
  &TreeCtrl_method_assignStateImageList_INLRImageList__V,
  &TreeCtrl_method_collapse_INLRTreeItemId__V,
  &TreeCtrl_method_collapseAndReset_INLRTreeItemId__V,
  &TreeCtrl_method_deleteAllItems__V,
  &TreeCtrl_method_deleteChildren_INLRTreeItemId__V,
  &TreeCtrl_method_deleteItem_INLRTreeItemId__V,
  &TreeCtrl_method_editLabel_INLRTreeItemId__V,
  &TreeCtrl_method_ensureVisible_INLRTreeItemId__V,
  &TreeCtrl_method_expand_INLRTreeItemId__V,
  &TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect_Z_Z,
  &TreeCtrl_method_getBoundingRect_INLRTreeItemId_OUTLRRect__Z,
  &TreeCtrl_method_getChildrenCount_INLRTreeItemId_Z_I,
  &TreeCtrl_method_getChildrenCount_INLRTreeItemId__I,
  &TreeCtrl_method_getCount__I,
  &TreeCtrl_method_getEditControl__LRTextCtrl_,
  &TreeCtrl_method_getFirstChild_INLRTreeItemId_OUTJ_LRTreeItemId_,
  &TreeCtrl_method_getFirstVisibleItem__LRTreeItemId_,
  &TreeCtrl_method_getImageList__LRImageList_,
  &TreeCtrl_method_getIndent__I,
  &TreeCtrl_method_getItemBackgroundColour_INLRTreeItemId__LRColour_,
  &TreeCtrl_method_getItemData_INLRTreeItemId__LRTreeItemData_,
  &TreeCtrl_method_getItemDataObject_INLRTreeItemId__LRObject_,
  &TreeCtrl_method_getItemFont_INLRTreeItemId__LRFont_,
  &TreeCtrl_method_getItemImage_INLRTreeItemId_I_I,
  &TreeCtrl_method_getItemImage_INLRTreeItemId__I,
  &TreeCtrl_method_getItemParent_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getItemText_INLRTreeItemId__LRString_,
  &TreeCtrl_method_getItemTextColour_INLRTreeItemId__LRColour_,
  &TreeCtrl_method_getLastChild_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getNextChild_INLRTreeItemId_J_LRTreeItemId_,
  &TreeCtrl_method_getNextSibling_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getNextVisible_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getPrevSibling_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getPrevVisible_INLRTreeItemId__LRTreeItemId_,
  &TreeCtrl_method_getRootItem__LRTreeItemId_,
  &TreeCtrl_method_getSelection__LRTreeItemId_,
  &TreeCtrl_method_getSelections_INLRTreeItemIdArray__I,
  &TreeCtrl_method_getSpacing__I,
  &TreeCtrl_method_getStateImageList__LRImageList_,
  &TreeCtrl_method_hitTest_INLRPoint__LRTreeItemId_,
  &TreeCtrl_method_hitTest_INLRPoint_OUTI_LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_IIINLRTreeItemData__LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString__LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_I_LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_IINLRString_II_LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString__LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_I_LRTreeItemId_,
  &TreeCtrl_method_insertItem_INLRTreeItemId_INLRTreeItemId_INLRString_II_LRTreeItemId_,
  &TreeCtrl_method_isBold_INLRTreeItemId__Z,
  &TreeCtrl_method_isExpanded_INLRTreeItemId__Z,
  &TreeCtrl_method_isSelected_INLRTreeItemId__Z,
  &TreeCtrl_method_isVisible_INLRTreeItemId__Z,
  &TreeCtrl_method_itemHasChildren_INLRTreeItemId__Z,
  &TreeCtrl_method_onCompareItems_INLRTreeItemId_INLRTreeItemId__I,
  &TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_IIINLRTreeItemData__LRTreeItemId_,
  &TreeCtrl_method_prependItem_INLRTreeItemId_INLRString__LRTreeItemId_,
  &TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_I_LRTreeItemId_,
  &TreeCtrl_method_prependItem_INLRTreeItemId_INLRString_II_LRTreeItemId_,
  &TreeCtrl_method_scrollTo_INLRTreeItemId__V,
  &TreeCtrl_method_selectItem_INLRTreeItemId__V,
  &TreeCtrl_method_setFont_INLRFont__Z,
  &TreeCtrl_method_setImageList_INLRImageList__V,
  &TreeCtrl_method_setIndent_I_V,
  &TreeCtrl_method_setItemBackgroundColour_INLRTreeItemId_INLRColour__V,
  &TreeCtrl_method_setItemBold_INLRTreeItemId_Z_V,
  &TreeCtrl_method_setItemBold_INLRTreeItemId__V,
  &TreeCtrl_method_setItemData_INLRTreeItemId_INLRTreeItemData__V,
  &TreeCtrl_method_setItemDataObject_INLRTreeItemId_INLRObject__V,
  &TreeCtrl_method_setItemFont_INLRTreeItemId_INLRFont__V,
  &TreeCtrl_method_setItemHasChildren_INLRTreeItemId_Z_V,
  &TreeCtrl_method_setItemHasChildren_INLRTreeItemId__V,
  &TreeCtrl_method_setItemImage_INLRTreeItemId_II_V,
  &TreeCtrl_method_setItemImage_INLRTreeItemId_I_V,
  &TreeCtrl_method_setItemText_INLRTreeItemId_INLRString__V,
  &TreeCtrl_method_setItemTextColour_INLRTreeItemId_INLRColour__V,
  &TreeCtrl_method_setSpacing_I_V,
  &TreeCtrl_method_setStateImageList_INLRImageList__V,
  &TreeCtrl_method_setWindowStyle_I_V,
  &TreeCtrl_method_sortChildren_INLRTreeItemId__V,
  &TreeCtrl_method_toggle_INLRTreeItemId__V,
  &TreeCtrl_method_unselect__V,
  &TreeCtrl_method_unselectAll__V,
  0
};


struct TreeCtrl_MetaInfoInitializer
{  TreeCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeCtrl::clazzInfo();
    ci->fields =  _TreeCtrl_fields;
    ci->methods =  _TreeCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeCtrl_MetaInfoInitializer TreeCtrl_MetaInfoInitializer_staticinstance__;


struct TreeCtrl_clazzInfo_ClazzAttributesResInitializer16
{
  TreeCtrl_clazzInfo_ClazzAttributesResInitializer16()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TreeCtrl_methods_getItemImage_INLRTreeItemId_I_I_arg_which, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TreeItemIconMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TreeCtrl_methods_setItemImage_INLRTreeItemId_II_V_arg_which, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TreeItemIconMetaInf::GetEnumInfo()));
  }
};

TreeCtrl_clazzInfo_ClazzAttributesResInitializer16 TreeCtrl_clazzInfo_ClazzAttributesResInitializer16_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Validator_create_array(int length)
{
  return new ObjectArrayImpl<RValidator>(length);
}

//static
::acdk::lang::RObject
Validator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Validator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Validator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_Validator__LRValidator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Validator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Validator::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_defaultValidator__LRValidator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Validator::defaultValidator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_getWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Validator::getWindow();
    else
        ret = (::acdk::lang::RObject)This->getWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_isSilent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Validator::isSilent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_setBellOnError_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator::setBellOnError(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_setBellOnError__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator::setBellOnError();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_setWindow_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Validator::setWindow((RWindow)args[0].getObjectVar());
    else
        This->setWindow((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_transferFromWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Validator::transferFromWindow();
    else
      ret = This->transferFromWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_transferToWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Validator::transferToWindow();
    else
      ret = This->transferToWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Validator_method_validate_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Validator* This = dmi_cast<Validator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Validator::validate((RWindow)args[0].getObjectVar());
    else
      ret = This->validate((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Validator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Validator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_Validator__LRValidator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_Validator__LRValidator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_Validator__LRValidator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Validator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Validator::clazzInfo(), // return type
  "_0_Validator", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_Validator__LRValidator__args, // the arguments
  0, //arguments count
  Validator_methods_Validator__LRValidator__exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_Validator__LRValidator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_clone", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Validator_methods_clone__LRObject__exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_defaultValidator__LRValidator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_defaultValidator__LRValidator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_defaultValidator__LRValidator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaultValidator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo(), // return type
  "_a_defaultValidator", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_defaultValidator__LRValidator__args, // the arguments
  0, //arguments count
  Validator_methods_defaultValidator__LRValidator__exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_defaultValidator__LRValidator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_getWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_getWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_getWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_5_getWindow", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_getWindow__LRWindow__args, // the arguments
  0, //arguments count
  Validator_methods_getWindow__LRWindow__exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_getWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_isSilent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_isSilent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_isSilent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSilent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isSilent", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_isSilent__Z_args, // the arguments
  0, //arguments count
  Validator_methods_isSilent__Z_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_isSilent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Validator_methods_setBellOnError_Z_V_arg_doIt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "doIt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_setBellOnError_Z_V_args[] = 
{
  &Validator_methods_setBellOnError_Z_V_arg_doIt,
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_setBellOnError_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_setBellOnError_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBellOnError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setBellOnError", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_setBellOnError_Z_V_args, // the arguments
  0, //arguments count
  Validator_methods_setBellOnError_Z_V_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_setBellOnError_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_setBellOnError__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_setBellOnError__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_setBellOnError__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setBellOnError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setBellOnError", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_setBellOnError__V_args, // the arguments
  0, //arguments count
  Validator_methods_setBellOnError__V_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_setBellOnError__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Validator_methods_setWindow_INLRWindow__V_arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_setWindow_INLRWindow__V_args[] = 
{
  &Validator_methods_setWindow_INLRWindow__V_arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_setWindow_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_setWindow_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setWindow", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_setWindow_INLRWindow__V_args, // the arguments
  0, //arguments count
  Validator_methods_setWindow_INLRWindow__V_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_setWindow_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_transferFromWindow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_transferFromWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_transferFromWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "transferFromWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_transferFromWindow", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_transferFromWindow__Z_args, // the arguments
  0, //arguments count
  Validator_methods_transferFromWindow__Z_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_transferFromWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_transferToWindow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_transferToWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_transferToWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "transferToWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_transferToWindow", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_transferToWindow__Z_args, // the arguments
  0, //arguments count
  Validator_methods_transferToWindow__Z_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_transferToWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Validator_methods_validate_INLRWindow__Z_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods_validate_INLRWindow__Z_args[] = 
{
  &Validator_methods_validate_INLRWindow__Z_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_methods_validate_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_method_validate_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "validate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_validate", // alternative name of method
  -1, // altlabelHashCode
  Validator_methods_validate_INLRWindow__Z_args, // the arguments
  0, //arguments count
  Validator_methods_validate_INLRWindow__Z_exceptions, // the declared exceptions
  Validator_MetainfoWrapper::Validator_method_validate_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Validator_methods[] = 
{
  &Validator_method_GetClass__L_acdk_lang_RClass_,
  &Validator_method_Validator__LRValidator_,
  &Validator_method_clone__LRObject_,
  &Validator_method_defaultValidator__LRValidator_,
  &Validator_method_getWindow__LRWindow_,
  &Validator_method_isSilent__Z,
  &Validator_method_setBellOnError_Z_V,
  &Validator_method_setBellOnError__V,
  &Validator_method_setWindow_INLRWindow__V,
  &Validator_method_transferFromWindow__Z,
  &Validator_method_transferToWindow__Z,
  &Validator_method_validate_INLRWindow__Z,
  0
};


struct Validator_MetaInfoInitializer
{  Validator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Validator::clazzInfo();
    ci->fields =  _Validator_fields;
    ci->methods =  _Validator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Validator_MetaInfoInitializer Validator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Window_create_array(int length)
{
  return new ObjectArrayImpl<RWindow>(length);
}

//static
::acdk::lang::RObject
Window_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Window_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_FindFocus__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::FindFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_SetFocusFromKbd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::SetFocusFromKbd();
    else
        This->SetFocusFromKbd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Window((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_Window_INLRWindow_I_LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Window((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_Window_INLRWindow_IINLRPoint__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Window((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_acceptsFocus__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::acceptsFocus();
    else
      ret = This->acceptsFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_acceptsFocusFromKeyboard__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::acceptsFocusFromKeyboard();
    else
      ret = This->acceptsFocusFromKeyboard();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_addChild_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::addChild((RWindow)args[0].getObjectVar());
    else
        This->addChild((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_addConstraintReference_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::addConstraintReference((RWindow)args[0].getObjectVar());
    else
        This->addConstraintReference((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_captureMouse__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::captureMouse();
    else
        This->captureMouse();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centre_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centre(args[0].getIntVar());
    else
        This->centre(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centre__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centre();
    else
        This->centre();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centreOnParent_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centreOnParent(args[0].getIntVar());
    else
        This->centreOnParent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centreOnParent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centreOnParent();
    else
        This->centreOnParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centreOnScreen_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centreOnScreen(args[0].getIntVar());
    else
        This->centreOnScreen(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_centreOnScreen__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::centreOnScreen();
    else
        This->centreOnScreen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_clientToScreen_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::clientToScreen(args[0].getIntRef(), args[1].getIntRef());
    else
        This->clientToScreen(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_clientToScreen_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::clientToScreen((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->clientToScreen((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_close_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::close(args[0].getBoolVar());
    else
      ret = This->close(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_close__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::close();
    else
      ret = This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_convertDialogToPixels_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::convertDialogToPixels((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->convertDialogToPixels((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_convertDialogToPixels_INLRSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::convertDialogToPixels((RSize)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->convertDialogToPixels((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_convertPixelsToDialog_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::convertPixelsToDialog((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->convertPixelsToDialog((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_convertPixelsToDialog_INLRSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::convertPixelsToDialog((RSize)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->convertPixelsToDialog((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_deleteRelatedConstraints__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::deleteRelatedConstraints();
    else
        This->deleteRelatedConstraints();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_destroy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::destroy();
    else
      ret = This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_destroyChildren__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::destroyChildren();
    else
      ret = This->destroyChildren();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_doPhase_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::doPhase(args[0].getIntVar());
    else
      ret = This->doPhase(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_dragAcceptFiles_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::dragAcceptFiles(args[0].getBoolVar());
    else
        This->dragAcceptFiles(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_enable_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::enable(args[0].getBoolVar());
    else
      ret = This->enable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_enable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::enable();
    else
      ret = This->enable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindow_I_LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::findWindow(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->findWindow(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindow_INLRString__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::findWindow((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findWindow((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowById_IINLRWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowById(args[0].getIntVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowById_I_LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowById(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowByLabel_INLRString_INLRWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowByLabel((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowByLabel_INLRString__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowByLabel((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowByName_INLRString_INLRWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowByName((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_findWindowByName_INLRString__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::findWindowByName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_fit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::fit();
    else
        This->fit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_fitInside__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::fitInside();
    else
        This->fitInside();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_freeze__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::freeze();
    else
        This->freeze();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getAutoLayout__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getAutoLayout();
    else
      ret = This->getAutoLayout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getBackgroundColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getBackgroundColour();
    else
        ret = (::acdk::lang::RObject)This->getBackgroundColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getBestSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getBestSize();
    else
        ret = (::acdk::lang::RObject)This->getBestSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getBorder__LBorder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (Border)This->Window::getBorder();
    else
      ret = (Border)This->getBorder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getCapture__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Window::getCapture();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getCaret__LRCaret__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getCaret();
    else
        ret = (::acdk::lang::RObject)This->getCaret();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getCharHeight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getCharHeight();
    else
      ret = This->getCharHeight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getCharWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getCharWidth();
    else
      ret = This->getCharWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getChildren__LRWindowArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getChildren();
    else
        ret = (::acdk::lang::RObject)This->getChildren();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getClientSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getClientSize();
    else
        ret = (::acdk::lang::RObject)This->getClientSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getClientSizeConstraint_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::getClientSizeConstraint(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getClientSizeConstraint(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getConstraints__LRLayoutConstraints__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getConstraints();
    else
        ret = (::acdk::lang::RObject)This->getConstraints();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getContainingSizer__LRSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getContainingSizer();
    else
        ret = (::acdk::lang::RObject)This->getContainingSizer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getCursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getCursor();
    else
        ret = (::acdk::lang::RObject)This->getCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getDefaultItem__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getDefaultItem();
    else
        ret = (::acdk::lang::RObject)This->getDefaultItem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getDropTarget__LRDropTarget__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getDropTarget();
    else
        ret = (::acdk::lang::RObject)This->getDropTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getEventHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getEventHandler();
    else
        ret = (::acdk::lang::RObject)This->getEventHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getExtraStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getExtraStyle();
    else
      ret = This->getExtraStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getFont();
    else
        ret = (::acdk::lang::RObject)This->getFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getForegroundColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getForegroundColour();
    else
        ret = (::acdk::lang::RObject)This->getForegroundColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getGrandParent__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getGrandParent();
    else
        ret = (::acdk::lang::RObject)This->getGrandParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getHelpText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getHelpText();
    else
        ret = (::acdk::lang::RObject)This->getHelpText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getId();
    else
      ret = This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getParent__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getPosition_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::getPosition(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getPosition(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getPositionConstraint_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::getPositionConstraint(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getPositionConstraint(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getRect__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getRect();
    else
        ret = (::acdk::lang::RObject)This->getRect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getScrollPos_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getScrollPos(args[0].getIntVar());
    else
      ret = This->getScrollPos(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getScrollRange_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getScrollRange(args[0].getIntVar());
    else
      ret = This->getScrollRange(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getScrollThumb_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getScrollThumb(args[0].getIntVar());
    else
      ret = This->getScrollThumb(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getSize_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::getSize(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSize(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getSize();
    else
        ret = (::acdk::lang::RObject)This->getSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getSizeConstraint_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::getSizeConstraint(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSizeConstraint(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getSizer__LRSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getSizer();
    else
        ret = (::acdk::lang::RObject)This->getSizer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getThemeEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getThemeEnabled();
    else
      ret = This->getThemeEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getTitle__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getTitle();
    else
        ret = (::acdk::lang::RObject)This->getTitle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getUpdateClientRect__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getUpdateClientRect();
    else
        ret = (::acdk::lang::RObject)This->getUpdateClientRect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getUpdateRegion__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getUpdateRegion();
    else
        ret = (::acdk::lang::RObject)This->getUpdateRegion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getValidator__LRValidator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::getValidator();
    else
        ret = (::acdk::lang::RObject)This->getValidator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getWindowStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getWindowStyle();
    else
      ret = This->getWindowStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_getWindowStyleFlag__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::getWindowStyleFlag();
    else
      ret = This->getWindowStyleFlag();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_hasCapture__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::hasCapture();
    else
      ret = This->hasCapture();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_hasFlag_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::hasFlag(args[0].getIntVar());
    else
      ret = This->hasFlag(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_hasScrollbar_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::hasScrollbar(args[0].getIntVar());
    else
      ret = This->hasScrollbar(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_hitTest_INLRPoint__LHitTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (HitTest)This->Window::hitTest((RPoint)args[0].getObjectVar());
    else
      ret = (HitTest)This->hitTest((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_hitTest_II_LHitTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (HitTest)This->Window::hitTest(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = (HitTest)This->hitTest(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_initDialog__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::initDialog();
    else
        This->initDialog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_initDispatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::initDispatch();
    else
        This->initDispatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isBeingDeleted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isBeingDeleted();
    else
      ret = This->isBeingDeleted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isExposed_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isExposed(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->isExposed(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isExposed_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isExposed(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->isExposed(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isExposed_INLRPoint__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isExposed((RPoint)args[0].getObjectVar());
    else
      ret = This->isExposed((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isExposed_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isExposed((RRect)args[0].getObjectVar());
    else
      ret = This->isExposed((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isRetained__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isRetained();
    else
      ret = This->isRetained();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_isTopLevel__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::isTopLevel();
    else
      ret = This->isTopLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_layout__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::layout();
    else
      ret = This->layout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_layoutPhase1_OUTI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::layoutPhase1(args[0].getIntRef());
    else
      ret = This->layoutPhase1(args[0].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_layoutPhase2_OUTI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::layoutPhase2(args[0].getIntRef());
    else
      ret = This->layoutPhase2(args[0].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_lineDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::lineDown();
    else
      ret = This->lineDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_lineUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::lineUp();
    else
      ret = This->lineUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_lower__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::lower();
    else
        This->lower();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_makeModal_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::makeModal(args[0].getBoolVar());
    else
        This->makeModal(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_makeModal__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::makeModal();
    else
        This->makeModal();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString_INLRString_IINLRWindow_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RWindow)args[3].getObjectVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString_INLRString_IINLRWindow_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RWindow)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_messageBox_INLRString_INLRString_IINLRWindow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Window::messageBox((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RWindow)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_moveConstraint_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::moveConstraint(args[0].getIntVar(), args[1].getIntVar());
    else
        This->moveConstraint(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_pageDown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::pageDown();
    else
      ret = This->pageDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_pageUp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::pageUp();
    else
      ret = This->pageUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_popEventHandler_Z_LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::popEventHandler(args[0].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->popEventHandler(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_popEventHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::popEventHandler();
    else
        ret = (::acdk::lang::RObject)This->popEventHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_popupMenu_INLRMenu_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::popupMenu((RMenu)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
      ret = This->popupMenu((RMenu)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_popupMenu_INLRMenu_INLRPoint__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::popupMenu((RMenu)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    else
      ret = This->popupMenu((RMenu)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_prepareDC_INLRDC__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::prepareDC((RDC)args[0].getObjectVar());
    else
        This->prepareDC((RDC)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_pushEventHandler_INLREvtHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::pushEventHandler((REvtHandler)args[0].getObjectVar());
    else
        This->pushEventHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_raise__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::raise();
    else
        This->raise();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_refresh_ZINLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::refresh(args[0].getBoolVar(), (RRect)args[1].getObjectVar());
    else
        This->refresh(args[0].getBoolVar(), (RRect)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_refresh__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::refresh();
    else
        This->refresh();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_refresh_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::refresh(args[0].getBoolVar());
    else
        This->refresh(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_refreshRect_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::refreshRect((RRect)args[0].getObjectVar());
    else
        This->refreshRect((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_releaseMouse__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::releaseMouse();
    else
        This->releaseMouse();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_removeChild_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::removeChild((RWindow)args[0].getObjectVar());
    else
        This->removeChild((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_removeConstraintReference_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::removeConstraintReference((RWindow)args[0].getObjectVar());
    else
        This->removeConstraintReference((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_removeEventHandler_INLREvtHandler__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::removeEventHandler((REvtHandler)args[0].getObjectVar());
    else
      ret = This->removeEventHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_reparent_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::reparent((RWindow)args[0].getObjectVar());
    else
      ret = This->reparent((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_resetConstraints__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::resetConstraints();
    else
        This->resetConstraints();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_screenToClient_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::screenToClient(args[0].getIntRef(), args[1].getIntRef());
    else
        This->screenToClient(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_screenToClient_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::screenToClient((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->screenToClient((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_scrollLines_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::scrollLines(args[0].getIntVar());
    else
      ret = This->scrollLines(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_scrollPages_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::scrollPages(args[0].getIntVar());
    else
      ret = This->scrollPages(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_scrollWindow_IIINLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::scrollWindow(args[0].getIntVar(), args[1].getIntVar(), (RRect)args[2].getObjectVar());
    else
        This->scrollWindow(args[0].getIntVar(), args[1].getIntVar(), (RRect)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_scrollWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::scrollWindow(args[0].getIntVar(), args[1].getIntVar());
    else
        This->scrollWindow(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setAutoLayout_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setAutoLayout(args[0].getBoolVar());
    else
        This->setAutoLayout(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setBackgroundColour_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setBackgroundColour((RColour)args[0].getObjectVar());
    else
      ret = This->setBackgroundColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setBackgroundColour_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setBackgroundColour((RString)args[0].getObjectVar());
    else
      ret = This->setBackgroundColour((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setCaret_INLRCaret__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setCaret((RCaret)args[0].getObjectVar());
    else
        This->setCaret((RCaret)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setConstraintSizes_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setConstraintSizes(args[0].getBoolVar());
    else
        This->setConstraintSizes(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setConstraints_INLRLayoutConstraints__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setConstraints((RLayoutConstraints)args[0].getObjectVar());
    else
        This->setConstraints((RLayoutConstraints)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setContainingSizer_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setContainingSizer((RSizer)args[0].getObjectVar());
    else
        This->setContainingSizer((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setCursor_INLRCursor__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setCursor((RCursor)args[0].getObjectVar());
    else
      ret = This->setCursor((RCursor)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setDefaultItem_INLRWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Window::setDefaultItem((RWindow)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->setDefaultItem((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setDropTarget_INLRDropTarget__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setDropTarget((RDropTarget)args[0].getObjectVar());
    else
        This->setDropTarget((RDropTarget)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setEventHandler_INLREvtHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setEventHandler((REvtHandler)args[0].getObjectVar());
    else
        This->setEventHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setExtraStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setExtraStyle(args[0].getIntVar());
    else
        This->setExtraStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setFocus__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setFocus();
    else
        This->setFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setFocusFromKbd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setFocusFromKbd();
    else
        This->setFocusFromKbd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setFont_INLRFont__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setFont((RFont)args[0].getObjectVar());
    else
      ret = This->setFont((RFont)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setForegroundColour_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setForegroundColour((RColour)args[0].getObjectVar());
    else
      ret = This->setForegroundColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setForegroundColour_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::setForegroundColour((RString)args[0].getObjectVar());
    else
      ret = This->setForegroundColour((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setHelpText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setHelpText((RString)args[0].getObjectVar());
    else
        This->setHelpText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setHelpTextForId_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setHelpTextForId((RString)args[0].getObjectVar());
    else
        This->setHelpTextForId((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setId(args[0].getIntVar());
    else
        This->setId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setName((RString)args[0].getObjectVar());
    else
        This->setName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setParent_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setParent((RWindow)args[0].getObjectVar());
    else
        This->setParent((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setScrollPos_IIZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setScrollPos(args[0].getIntVar(), args[1].getIntVar(), args[2].getBoolVar());
    else
        This->setScrollPos(args[0].getIntVar(), args[1].getIntVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setScrollPos_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setScrollPos(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setScrollPos(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setScrollbar_IIIIZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setScrollbar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar());
    else
        This->setScrollbar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setScrollbar_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setScrollbar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setScrollbar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSize_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->setSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSize_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSize_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSize((RRect)args[0].getObjectVar());
    else
        This->setSize((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSize_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSize(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setSize(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSize((RSize)args[0].getObjectVar());
    else
        This->setSize((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSizeConstraint_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSizeConstraint(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setSizeConstraint(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSizer_INLRSizer_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSizer((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setSizer((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSizer_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSizer((RSizer)args[0].getObjectVar());
    else
        This->setSizer((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSizerAndFit_INLRSizer_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSizerAndFit((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setSizerAndFit((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setSizerAndFit_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setSizerAndFit((RSizer)args[0].getObjectVar());
    else
        This->setSizerAndFit((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setThemeEnabled_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setThemeEnabled(args[0].getBoolVar());
    else
        This->setThemeEnabled(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setTitle_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setTitle((RString)args[0].getObjectVar());
    else
        This->setTitle((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setTmpDefaultItem_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setTmpDefaultItem((RWindow)args[0].getObjectVar());
    else
        This->setTmpDefaultItem((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setToolTip_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setToolTip((RString)args[0].getObjectVar());
    else
        This->setToolTip((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setValidator_INLRValidator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setValidator((RValidator)args[0].getObjectVar());
    else
        This->setValidator((RValidator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_setWindowStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::setWindowStyle(args[0].getIntVar());
    else
        This->setWindowStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_show_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::show(args[0].getBoolVar());
    else
      ret = This->show(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_thaw__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::thaw();
    else
        This->thaw();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_transferDataFromWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::transferDataFromWindow();
    else
      ret = This->transferDataFromWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_transferDataToWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::transferDataToWindow();
    else
      ret = This->transferDataToWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_unsetConstraints_INLRLayoutConstraints__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::unsetConstraints((RLayoutConstraints)args[0].getObjectVar());
    else
        This->unsetConstraints((RLayoutConstraints)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_update__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::update();
    else
        This->update();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_updateWindowUI__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::updateWindowUI();
    else
        This->updateWindowUI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_validate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Window::validate();
    else
      ret = This->validate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Window_method_warpPointer_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Window* This = dmi_cast<Window>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Window::warpPointer(args[0].getIntVar(), args[1].getIntVar());
    else
        This->warpPointer(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Window_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_FindFocus__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_FindFocus__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_FindFocus__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FindFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_z_FindFocus", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_FindFocus__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_FindFocus__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_FindFocus__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_35_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Window_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_SetFocusFromKbd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_SetFocusFromKbd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_SetFocusFromKbd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SetFocusFromKbd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_SetFocusFromKbd", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_SetFocusFromKbd__V_args, // the arguments
  0, //arguments count
  Window_methods_SetFocusFromKbd__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_SetFocusFromKbd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__args[] = 
{
  &Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_parent,
  &Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_id,
  &Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_pos,
  &Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Window", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Window::clazzInfo(), // return type
  "_0_Window", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_I_LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_I_LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_Window_INLRWindow_I_LRWindow__args[] = 
{
  &Window_methods_Window_INLRWindow_I_LRWindow__arg_parent,
  &Window_methods_Window_INLRWindow_I_LRWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_Window_INLRWindow_I_LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_Window_INLRWindow_I_LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Window", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Window::clazzInfo(), // return type
  "_1_Window", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_Window_INLRWindow_I_LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_Window_INLRWindow_I_LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_Window_INLRWindow_I_LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__args[] = 
{
  &Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_parent,
  &Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_id,
  &Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_Window_INLRWindow_IINLRPoint__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Window", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Window::clazzInfo(), // return type
  "_2_Window", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_Window_INLRWindow_IINLRPoint__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_Window_INLRWindow_IINLRPoint__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_acceptsFocus__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_acceptsFocus__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_acceptsFocus__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_acceptsFocus", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_acceptsFocus__Z_args, // the arguments
  0, //arguments count
  Window_methods_acceptsFocus__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_acceptsFocus__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_acceptsFocusFromKeyboard__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_acceptsFocusFromKeyboard__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_acceptsFocusFromKeyboard__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsFocusFromKeyboard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_acceptsFocusFromKeyboard", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_acceptsFocusFromKeyboard__Z_args, // the arguments
  0, //arguments count
  Window_methods_acceptsFocusFromKeyboard__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_acceptsFocusFromKeyboard__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_addChild_INLRWindow__V_arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_addChild_INLRWindow__V_args[] = 
{
  &Window_methods_addChild_INLRWindow__V_arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_addChild_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_addChild_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_addChild", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_addChild_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_addChild_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_addChild_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_addConstraintReference_INLRWindow__V_arg_otherWin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherWin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_addConstraintReference_INLRWindow__V_args[] = 
{
  &Window_methods_addConstraintReference_INLRWindow__V_arg_otherWin,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_addConstraintReference_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_addConstraintReference_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addConstraintReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2w_addConstraintReference", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_addConstraintReference_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_addConstraintReference_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_addConstraintReference_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_captureMouse__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_captureMouse__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_captureMouse__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "captureMouse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_captureMouse", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_captureMouse__V_args, // the arguments
  0, //arguments count
  Window_methods_captureMouse__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_captureMouse__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_centre_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centre_I_V_args[] = 
{
  &Window_methods_centre_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centre_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centre_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "centre", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2J_centre", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centre_I_V_args, // the arguments
  0, //arguments count
  Window_methods_centre_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centre_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centre__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centre__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centre__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "centre", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2K_centre", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centre__V_args, // the arguments
  0, //arguments count
  Window_methods_centre__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centre__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_centreOnParent_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centreOnParent_I_V_args[] = 
{
  &Window_methods_centreOnParent_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centreOnParent_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centreOnParent_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "centreOnParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2L_centreOnParent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centreOnParent_I_V_args, // the arguments
  0, //arguments count
  Window_methods_centreOnParent_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centreOnParent_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centreOnParent__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centreOnParent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centreOnParent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "centreOnParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2M_centreOnParent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centreOnParent__V_args, // the arguments
  0, //arguments count
  Window_methods_centreOnParent__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centreOnParent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_centreOnScreen_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centreOnScreen_I_V_args[] = 
{
  &Window_methods_centreOnScreen_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centreOnScreen_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centreOnScreen_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "centreOnScreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2N_centreOnScreen", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centreOnScreen_I_V_args, // the arguments
  0, //arguments count
  Window_methods_centreOnScreen_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centreOnScreen_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_centreOnScreen__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_centreOnScreen__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_centreOnScreen__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "centreOnScreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2O_centreOnScreen", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_centreOnScreen__V_args, // the arguments
  0, //arguments count
  Window_methods_centreOnScreen__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_centreOnScreen__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1z_clear", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_clear__V_args, // the arguments
  0, //arguments count
  Window_methods_clear__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_clientToScreen_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_clientToScreen_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_clientToScreen_OUTIOUTI_V_args[] = 
{
  &Window_methods_clientToScreen_OUTIOUTI_V_arg_x,
  &Window_methods_clientToScreen_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_clientToScreen_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_clientToScreen_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clientToScreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1X_clientToScreen", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_clientToScreen_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_clientToScreen_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_clientToScreen_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_clientToScreen_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_clientToScreen_INLRPoint__LRPoint__args[] = 
{
  &Window_methods_clientToScreen_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_clientToScreen_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_clientToScreen_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clientToScreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_1Z_clientToScreen", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_clientToScreen_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  Window_methods_clientToScreen_INLRPoint__LRPoint__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_clientToScreen_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_close_Z_Z_arg_force = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "force", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_close_Z_Z_args[] = 
{
  &Window_methods_close_Z_Z_arg_force,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_close_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_close_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_close", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_close_Z_Z_args, // the arguments
  0, //arguments count
  Window_methods_close_Z_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_close_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_close__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_close__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_close__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_close", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_close__Z_args, // the arguments
  0, //arguments count
  Window_methods_close__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_close__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_convertDialogToPixels_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_convertDialogToPixels_INLRPoint__LRPoint__args[] = 
{
  &Window_methods_convertDialogToPixels_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_convertDialogToPixels_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_convertDialogToPixels_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertDialogToPixels", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_1m_convertDialogToPixels", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_convertDialogToPixels_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  Window_methods_convertDialogToPixels_INLRPoint__LRPoint__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_convertDialogToPixels_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_convertDialogToPixels_INLRSize__LRSize__arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_convertDialogToPixels_INLRSize__LRSize__args[] = 
{
  &Window_methods_convertDialogToPixels_INLRSize__LRSize__arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_convertDialogToPixels_INLRSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_convertDialogToPixels_INLRSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertDialogToPixels", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1o_convertDialogToPixels", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_convertDialogToPixels_INLRSize__LRSize__args, // the arguments
  0, //arguments count
  Window_methods_convertDialogToPixels_INLRSize__LRSize__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_convertDialogToPixels_INLRSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__args[] = 
{
  &Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_convertPixelsToDialog_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertPixelsToDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_1l_convertPixelsToDialog", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  Window_methods_convertPixelsToDialog_INLRPoint__LRPoint__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_convertPixelsToDialog_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_convertPixelsToDialog_INLRSize__LRSize__arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_convertPixelsToDialog_INLRSize__LRSize__args[] = 
{
  &Window_methods_convertPixelsToDialog_INLRSize__LRSize__arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_convertPixelsToDialog_INLRSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_convertPixelsToDialog_INLRSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertPixelsToDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1n_convertPixelsToDialog", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_convertPixelsToDialog_INLRSize__LRSize__args, // the arguments
  0, //arguments count
  Window_methods_convertPixelsToDialog_INLRSize__LRSize__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_convertPixelsToDialog_INLRSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_deleteRelatedConstraints__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_deleteRelatedConstraints__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_deleteRelatedConstraints__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteRelatedConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2y_deleteRelatedConstraints", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_deleteRelatedConstraints__V_args, // the arguments
  0, //arguments count
  Window_methods_deleteRelatedConstraints__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_deleteRelatedConstraints__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_destroy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_destroy__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_destroy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_destroy", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_destroy__Z_args, // the arguments
  0, //arguments count
  Window_methods_destroy__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_destroy__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_destroyChildren__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_destroyChildren__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_destroyChildren__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroyChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_destroyChildren", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_destroyChildren__Z_args, // the arguments
  0, //arguments count
  Window_methods_destroyChildren__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_destroyChildren__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_doPhase_I_Z_arg_phase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "phase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_doPhase_I_Z_args[] = 
{
  &Window_methods_doPhase_I_Z_arg_phase,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_doPhase_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_doPhase_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doPhase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2D_doPhase", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_doPhase_I_Z_args, // the arguments
  0, //arguments count
  Window_methods_doPhase_I_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_doPhase_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_dragAcceptFiles_Z_V_arg_accept = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "accept", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_dragAcceptFiles_Z_V_args[] = 
{
  &Window_methods_dragAcceptFiles_Z_V_arg_accept,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_dragAcceptFiles_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_dragAcceptFiles_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dragAcceptFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_dragAcceptFiles", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_dragAcceptFiles_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_dragAcceptFiles_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_dragAcceptFiles_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_enable_Z_Z_arg_doenable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "doenable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_enable_Z_Z_args[] = 
{
  &Window_methods_enable_Z_Z_arg_doenable,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_enable_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_enable_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_enable", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_enable_Z_Z_args, // the arguments
  0, //arguments count
  Window_methods_enable_Z_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_enable_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_enable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_enable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_enable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_enable", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_enable__Z_args, // the arguments
  0, //arguments count
  Window_methods_enable__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_enable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindow_I_LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindow_I_LRWindow__args[] = 
{
  &Window_methods_findWindow_I_LRWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindow_I_LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindow_I_LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_N_findWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindow_I_LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindow_I_LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindow_I_LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindow_INLRString__LRWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindow_INLRString__LRWindow__args[] = 
{
  &Window_methods_findWindow_INLRString__LRWindow__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindow_INLRString__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindow_INLRString__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_O_findWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindow_INLRString__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindow_INLRString__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindow_INLRString__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowById_IINLRWindow__LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowById_IINLRWindow__LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowById_IINLRWindow__LRWindow__args[] = 
{
  &Window_methods_findWindowById_IINLRWindow__LRWindow__arg_id,
  &Window_methods_findWindowById_IINLRWindow__LRWindow__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowById_IINLRWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowById_IINLRWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowById", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_P_findWindowById", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowById_IINLRWindow__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowById_IINLRWindow__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowById_IINLRWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowById_I_LRWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowById_I_LRWindow__args[] = 
{
  &Window_methods_findWindowById_I_LRWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowById_I_LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowById_I_LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowById", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_Q_findWindowById", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowById_I_LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowById_I_LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowById_I_LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__args[] = 
{
  &Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__arg_label,
  &Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowByLabel_INLRString_INLRWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowByLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_T_findWindowByLabel", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowByLabel_INLRString_INLRWindow__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowByLabel_INLRString_INLRWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByLabel_INLRString__LRWindow__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowByLabel_INLRString__LRWindow__args[] = 
{
  &Window_methods_findWindowByLabel_INLRString__LRWindow__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowByLabel_INLRString__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowByLabel_INLRString__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowByLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_U_findWindowByLabel", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowByLabel_INLRString__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowByLabel_INLRString__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowByLabel_INLRString__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__args[] = 
{
  &Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__arg_name,
  &Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowByName_INLRString_INLRWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_R_findWindowByName", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowByName_INLRString_INLRWindow__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowByName_INLRString_INLRWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_findWindowByName_INLRString__LRWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_findWindowByName_INLRString__LRWindow__args[] = 
{
  &Window_methods_findWindowByName_INLRString__LRWindow__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_findWindowByName_INLRString__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_findWindowByName_INLRString__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "findWindowByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_S_findWindowByName", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_findWindowByName_INLRString__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_findWindowByName_INLRString__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_findWindowByName_INLRString__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_fit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_fit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_fit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_fit", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_fit__V_args, // the arguments
  0, //arguments count
  Window_methods_fit__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_fit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_fitInside__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_fitInside__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_fitInside__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fitInside", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_fitInside", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_fitInside__V_args, // the arguments
  0, //arguments count
  Window_methods_fitInside__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_fitInside__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_freeze__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_freeze__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_freeze__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "freeze", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1A_freeze", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_freeze__V_args, // the arguments
  0, //arguments count
  Window_methods_freeze__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_freeze__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getAutoLayout__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getAutoLayout__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getAutoLayout__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAutoLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2Q_getAutoLayout", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getAutoLayout__Z_args, // the arguments
  0, //arguments count
  Window_methods_getAutoLayout__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getAutoLayout__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getBackgroundColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getBackgroundColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getBackgroundColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_1N_getBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getBackgroundColour__LRColour__args, // the arguments
  0, //arguments count
  Window_methods_getBackgroundColour__LRColour__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getBackgroundColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getBestSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getBestSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getBestSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBestSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1g_getBestSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getBestSize__LRSize__args, // the arguments
  0, //arguments count
  Window_methods_getBestSize__LRSize__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getBestSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getBorder__LBorder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getBorder__LBorder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getBorder__LBorder_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBorder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_23_getBorder", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getBorder__LBorder__args, // the arguments
  0, //arguments count
  Window_methods_getBorder__LBorder__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getBorder__LBorder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getCapture__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getCapture__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getCapture__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCapture", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_1s_getCapture", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getCapture__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_getCapture__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getCapture__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getCaret__LRCaret__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getCaret__LRCaret__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getCaret__LRCaret_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCaret", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCaret::clazzInfo(), // return type
  "_1U_getCaret", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getCaret__LRCaret__args, // the arguments
  0, //arguments count
  Window_methods_getCaret__LRCaret__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getCaret__LRCaret__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getCharHeight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getCharHeight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getCharHeight__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1V_getCharHeight", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getCharHeight__I_args, // the arguments
  0, //arguments count
  Window_methods_getCharHeight__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getCharHeight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getCharWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getCharWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getCharWidth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1W_getCharWidth", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getCharWidth__I_args, // the arguments
  0, //arguments count
  Window_methods_getCharWidth__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getCharWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getChildren__LRWindowArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getChildren__LRWindowArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getChildren__LRWindowArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildren", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindowArray::clazzInfo(), // return type
  "_F_getChildren", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getChildren__LRWindowArray__args, // the arguments
  0, //arguments count
  Window_methods_getChildren__LRWindowArray__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getChildren__LRWindowArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getClientSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getClientSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getClientSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_18_getClientSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getClientSize__LRSize__args, // the arguments
  0, //arguments count
  Window_methods_getClientSize__LRSize__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getClientSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getClientSizeConstraint_OUTIOUTI_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getClientSizeConstraint_OUTIOUTI_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getClientSizeConstraint_OUTIOUTI_V_args[] = 
{
  &Window_methods_getClientSizeConstraint_OUTIOUTI_V_arg_w,
  &Window_methods_getClientSizeConstraint_OUTIOUTI_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getClientSizeConstraint_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getClientSizeConstraint_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientSizeConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2H_getClientSizeConstraint", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getClientSizeConstraint_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_getClientSizeConstraint_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getClientSizeConstraint_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getConstraints__LRLayoutConstraints__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getConstraints__LRLayoutConstraints__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getConstraints__LRLayoutConstraints_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLayoutConstraints::clazzInfo(), // return type
  "_2u_getConstraints", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getConstraints__LRLayoutConstraints__args, // the arguments
  0, //arguments count
  Window_methods_getConstraints__LRLayoutConstraints__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getConstraints__LRLayoutConstraints__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getContainingSizer__LRSizer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getContainingSizer__LRSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getContainingSizer__LRSizer_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContainingSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo(), // return type
  "_2Y_getContainingSizer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getContainingSizer__LRSizer__args, // the arguments
  0, //arguments count
  Window_methods_getContainingSizer__LRSizer__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getContainingSizer__LRSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getCursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getCursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getCursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo(), // return type
  "_1Q_getCursor", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getCursor__LRCursor__args, // the arguments
  0, //arguments count
  Window_methods_getCursor__LRCursor__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getCursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getDefaultItem__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getDefaultItem__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getDefaultItem__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_C_getDefaultItem", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getDefaultItem__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_getDefaultItem__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getDefaultItem__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getDropTarget__LRDropTarget__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getDropTarget__LRDropTarget__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getDropTarget__LRDropTarget_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDropTarget::clazzInfo(), // return type
  "_2s_getDropTarget", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getDropTarget__LRDropTarget__args, // the arguments
  0, //arguments count
  Window_methods_getDropTarget__LRDropTarget__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getDropTarget__LRDropTarget__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getEventHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getEventHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getEventHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_V_getEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getEventHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  Window_methods_getEventHandler__LREvtHandler__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getEventHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getExtraStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getExtraStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getExtraStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtraStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getExtraStyle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getExtraStyle__I_args, // the arguments
  0, //arguments count
  Window_methods_getExtraStyle__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getExtraStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_1S_getFont", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getFont__LRFont__args, // the arguments
  0, //arguments count
  Window_methods_getFont__LRFont__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getForegroundColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getForegroundColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getForegroundColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getForegroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_1O_getForegroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getForegroundColour__LRColour__args, // the arguments
  0, //arguments count
  Window_methods_getForegroundColour__LRColour__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getForegroundColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getGrandParent__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getGrandParent__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getGrandParent__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGrandParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_H_getGrandParent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getGrandParent__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_getGrandParent__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getGrandParent__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getHelpText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getHelpText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getHelpText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2p_getHelpText", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getHelpText__LRString__args, // the arguments
  0, //arguments count
  Window_methods_getHelpText__LRString__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getHelpText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getId", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getId__I_args, // the arguments
  0, //arguments count
  Window_methods_getId__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getName", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Window_methods_getName__LRString__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getParent__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getParent__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getParent__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_G_getParent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getParent__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_getParent__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getParent__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getPosition_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getPosition_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getPosition_OUTIOUTI_V_args[] = 
{
  &Window_methods_getPosition_OUTIOUTI_V_arg_x,
  &Window_methods_getPosition_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getPosition_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getPosition_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_getPosition", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getPosition_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_getPosition_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getPosition_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_14_getPosition", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  Window_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getPositionConstraint_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getPositionConstraint_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getPositionConstraint_OUTIOUTI_V_args[] = 
{
  &Window_methods_getPositionConstraint_OUTIOUTI_V_arg_x,
  &Window_methods_getPositionConstraint_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getPositionConstraint_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getPositionConstraint_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPositionConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2I_getPositionConstraint", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getPositionConstraint_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_getPositionConstraint_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getPositionConstraint_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getRect__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getRect__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getRect__LRRect_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_15_getRect", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getRect__LRRect__args, // the arguments
  0, //arguments count
  Window_methods_getRect__LRRect__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getRect__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getScrollPos_I_I_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getScrollPos_I_I_args[] = 
{
  &Window_methods_getScrollPos_I_I_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getScrollPos_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getScrollPos_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2c_getScrollPos", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getScrollPos_I_I_args, // the arguments
  0, //arguments count
  Window_methods_getScrollPos_I_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getScrollPos_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getScrollRange_I_I_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getScrollRange_I_I_args[] = 
{
  &Window_methods_getScrollRange_I_I_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getScrollRange_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getScrollRange_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2e_getScrollRange", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getScrollRange_I_I_args, // the arguments
  0, //arguments count
  Window_methods_getScrollRange_I_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getScrollRange_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getScrollThumb_I_I_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getScrollThumb_I_I_args[] = 
{
  &Window_methods_getScrollThumb_I_I_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getScrollThumb_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getScrollThumb_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollThumb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2d_getScrollThumb", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getScrollThumb_I_I_args, // the arguments
  0, //arguments count
  Window_methods_getScrollThumb_I_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getScrollThumb_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getSize_OUTIOUTI_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getSize_OUTIOUTI_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getSize_OUTIOUTI_V_args[] = 
{
  &Window_methods_getSize_OUTIOUTI_V_arg_width,
  &Window_methods_getSize_OUTIOUTI_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getSize_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getSize_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_16_getSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getSize_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_getSize_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getSize_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_17_getSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getSize__LRSize__args, // the arguments
  0, //arguments count
  Window_methods_getSize__LRSize__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getSizeConstraint_OUTIOUTI_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_getSizeConstraint_OUTIOUTI_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getSizeConstraint_OUTIOUTI_V_args[] = 
{
  &Window_methods_getSizeConstraint_OUTIOUTI_V_arg_w,
  &Window_methods_getSizeConstraint_OUTIOUTI_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getSizeConstraint_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getSizeConstraint_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSizeConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2G_getSizeConstraint", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getSizeConstraint_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_getSizeConstraint_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getSizeConstraint_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getSizer__LRSizer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getSizer__LRSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getSizer__LRSizer_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo(), // return type
  "_2W_getSizer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getSizer__LRSizer__args, // the arguments
  0, //arguments count
  Window_methods_getSizer__LRSizer__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getSizer__LRSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getThemeEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getThemeEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getThemeEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThemeEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_getThemeEnabled", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getThemeEnabled__Z_args, // the arguments
  0, //arguments count
  Window_methods_getThemeEnabled__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getThemeEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getTitle__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getTitle__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getTitle__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getTitle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getTitle__LRString__args, // the arguments
  0, //arguments count
  Window_methods_getTitle__LRString__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getTitle__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getUpdateClientRect__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getUpdateClientRect__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getUpdateClientRect__LRRect_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateClientRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_1E_getUpdateClientRect", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getUpdateClientRect__LRRect__args, // the arguments
  0, //arguments count
  Window_methods_getUpdateClientRect__LRRect__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getUpdateClientRect__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getUpdateRegion__LRRegion__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getUpdateRegion__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getUpdateRegion__LRRegion_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo(), // return type
  "_1D_getUpdateRegion", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getUpdateRegion__LRRegion__args, // the arguments
  0, //arguments count
  Window_methods_getUpdateRegion__LRRegion__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getUpdateRegion__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getValidator__LRValidator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getValidator__LRValidator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getValidator__LRValidator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValidator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo(), // return type
  "_12_getValidator", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getValidator__LRValidator__args, // the arguments
  0, //arguments count
  Window_methods_getValidator__LRValidator__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getValidator__LRValidator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getWindowStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getWindowStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getWindowStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindowStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getWindowStyle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getWindowStyle__I_args, // the arguments
  0, //arguments count
  Window_methods_getWindowStyle__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getWindowStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_getWindowStyleFlag__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_getWindowStyleFlag__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_getWindowStyleFlag__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindowStyleFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getWindowStyleFlag", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_getWindowStyleFlag__I_args, // the arguments
  0, //arguments count
  Window_methods_getWindowStyleFlag__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_getWindowStyleFlag__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_hasCapture__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_hasCapture__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_hasCapture__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasCapture", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1t_hasCapture", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_hasCapture__Z_args, // the arguments
  0, //arguments count
  Window_methods_hasCapture__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_hasCapture__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_hasFlag_I_Z_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_hasFlag_I_Z_args[] = 
{
  &Window_methods_hasFlag_I_Z_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_hasFlag_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_hasFlag_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_hasFlag", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_hasFlag_I_Z_args, // the arguments
  0, //arguments count
  Window_methods_hasFlag_I_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_hasFlag_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_hasScrollbar_I_Z_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_hasScrollbar_I_Z_args[] = 
{
  &Window_methods_hasScrollbar_I_Z_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_hasScrollbar_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_hasScrollbar_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasScrollbar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_27_hasScrollbar", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_hasScrollbar_I_Z_args, // the arguments
  0, //arguments count
  Window_methods_hasScrollbar_I_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_hasScrollbar_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_hitTest_INLRPoint__LHitTest__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_hitTest_INLRPoint__LHitTest__args[] = 
{
  &Window_methods_hitTest_INLRPoint__LHitTest__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_hitTest_INLRPoint__LHitTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_hitTest_INLRPoint__LHitTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hitTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_22_hitTest", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_hitTest_INLRPoint__LHitTest__args, // the arguments
  0, //arguments count
  Window_methods_hitTest_INLRPoint__LHitTest__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_hitTest_INLRPoint__LHitTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_hitTest_II_LHitTest__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_hitTest_II_LHitTest__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_hitTest_II_LHitTest__args[] = 
{
  &Window_methods_hitTest_II_LHitTest__arg_x,
  &Window_methods_hitTest_II_LHitTest__arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_hitTest_II_LHitTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_hitTest_II_LHitTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hitTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_21_hitTest", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_hitTest_II_LHitTest__args, // the arguments
  0, //arguments count
  Window_methods_hitTest_II_LHitTest__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_hitTest_II_LHitTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_initDialog__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_initDialog__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_initDialog__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_initDialog", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_initDialog__V_args, // the arguments
  0, //arguments count
  Window_methods_initDialog__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_initDialog__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_initDispatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_initDispatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_initDispatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initDispatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_initDispatch", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_initDispatch__V_args, // the arguments
  0, //arguments count
  Window_methods_initDispatch__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_initDispatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isBeingDeleted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isBeingDeleted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isBeingDeleted__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBeingDeleted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isBeingDeleted", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isBeingDeleted__Z_args, // the arguments
  0, //arguments count
  Window_methods_isBeingDeleted__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isBeingDeleted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isExposed_II_Z_args[] = 
{
  &Window_methods_isExposed_II_Z_arg_x,
  &Window_methods_isExposed_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isExposed_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isExposed_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExposed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1F_isExposed", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isExposed_II_Z_args, // the arguments
  0, //arguments count
  Window_methods_isExposed_II_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isExposed_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_IIII_Z_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_IIII_Z_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isExposed_IIII_Z_args[] = 
{
  &Window_methods_isExposed_IIII_Z_arg_x,
  &Window_methods_isExposed_IIII_Z_arg_y,
  &Window_methods_isExposed_IIII_Z_arg_w,
  &Window_methods_isExposed_IIII_Z_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isExposed_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isExposed_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExposed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1G_isExposed", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isExposed_IIII_Z_args, // the arguments
  0, //arguments count
  Window_methods_isExposed_IIII_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isExposed_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_INLRPoint__Z_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isExposed_INLRPoint__Z_args[] = 
{
  &Window_methods_isExposed_INLRPoint__Z_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isExposed_INLRPoint__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isExposed_INLRPoint__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExposed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1H_isExposed", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isExposed_INLRPoint__Z_args, // the arguments
  0, //arguments count
  Window_methods_isExposed_INLRPoint__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isExposed_INLRPoint__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_isExposed_INLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isExposed_INLRRect__Z_args[] = 
{
  &Window_methods_isExposed_INLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isExposed_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isExposed_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isExposed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1I_isExposed", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isExposed_INLRRect__Z_args, // the arguments
  0, //arguments count
  Window_methods_isExposed_INLRRect__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isExposed_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isRetained__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isRetained__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isRetained__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isRetained", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_isRetained", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isRetained__Z_args, // the arguments
  0, //arguments count
  Window_methods_isRetained__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isRetained__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_isTopLevel__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_isTopLevel__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_isTopLevel__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isTopLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_isTopLevel", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_isTopLevel__Z_args, // the arguments
  0, //arguments count
  Window_methods_isTopLevel__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_isTopLevel__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_layout__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_layout__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_layout__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "layout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2R_layout", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_layout__Z_args, // the arguments
  0, //arguments count
  Window_methods_layout__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_layout__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_layoutPhase1_OUTI_Z_arg_noChanges = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "noChanges", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_layoutPhase1_OUTI_Z_args[] = 
{
  &Window_methods_layoutPhase1_OUTI_Z_arg_noChanges,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_layoutPhase1_OUTI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_layoutPhase1_OUTI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "layoutPhase1", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2B_layoutPhase1", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_layoutPhase1_OUTI_Z_args, // the arguments
  0, //arguments count
  Window_methods_layoutPhase1_OUTI_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_layoutPhase1_OUTI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_layoutPhase2_OUTI_Z_arg_noChanges = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "noChanges", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_layoutPhase2_OUTI_Z_args[] = 
{
  &Window_methods_layoutPhase2_OUTI_Z_arg_noChanges,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_layoutPhase2_OUTI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_layoutPhase2_OUTI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "layoutPhase2", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2C_layoutPhase2", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_layoutPhase2_OUTI_Z_args, // the arguments
  0, //arguments count
  Window_methods_layoutPhase2_OUTI_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_layoutPhase2_OUTI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_lineDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_lineDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_lineDown__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2k_lineDown", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_lineDown__Z_args, // the arguments
  0, //arguments count
  Window_methods_lineDown__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_lineDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_lineUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_lineUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_lineUp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2j_lineUp", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_lineUp__Z_args, // the arguments
  0, //arguments count
  Window_methods_lineUp__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_lineUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_lower__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_lower__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_lower__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lower", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_lower", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_lower__V_args, // the arguments
  0, //arguments count
  Window_methods_lower__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_lower__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_makeModal_Z_V_arg_modal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "modal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_makeModal_Z_V_args[] = 
{
  &Window_methods_makeModal_Z_V_arg_modal,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_makeModal_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_makeModal_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_makeModal", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_makeModal_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_makeModal_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_makeModal_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_makeModal__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_makeModal__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_makeModal__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_makeModal", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_makeModal__V_args, // the arguments
  0, //arguments count
  Window_methods_makeModal__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_makeModal__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_args[] = 
{
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_message,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_caption,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_style,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_parent,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_x,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString_INLRString_IINLRWindow_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2Z_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow_II_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString_INLRString_IINLRWindow_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString__I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString__I_args[] = 
{
  &Window_methods_messageBox_INLRString__I_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_30_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString__I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString__I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString__I_arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString_INLRString__I_args[] = 
{
  &Window_methods_messageBox_INLRString_INLRString__I_arg_message,
  &Window_methods_messageBox_INLRString_INLRString__I_arg_caption,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_31_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString_INLRString__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_args[] = 
{
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_message,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_caption,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_style,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_parent,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString_INLRString_IINLRWindow_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_34_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow_I_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString_INLRString_IINLRWindow_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_I_I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_I_I_arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_I_I_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString_INLRString_I_I_args[] = 
{
  &Window_methods_messageBox_INLRString_INLRString_I_I_arg_message,
  &Window_methods_messageBox_INLRString_INLRString_I_I_arg_caption,
  &Window_methods_messageBox_INLRString_INLRString_I_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_32_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString_INLRString_I_I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString_INLRString_I_I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_args[] = 
{
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_message,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_caption,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_style,
  &Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_messageBox_INLRString_INLRString_IINLRWindow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "messageBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_33_messageBox", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_args, // the arguments
  0, //arguments count
  Window_methods_messageBox_INLRString_INLRString_IINLRWindow__I_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_messageBox_INLRString_INLRString_IINLRWindow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_moveConstraint_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_moveConstraint_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_moveConstraint_II_V_args[] = 
{
  &Window_methods_moveConstraint_II_V_arg_x,
  &Window_methods_moveConstraint_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_moveConstraint_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_moveConstraint_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2F_moveConstraint", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_moveConstraint_II_V_args, // the arguments
  0, //arguments count
  Window_methods_moveConstraint_II_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_moveConstraint_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_pageDown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_pageDown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_pageDown__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2m_pageDown", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_pageDown__Z_args, // the arguments
  0, //arguments count
  Window_methods_pageDown__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_pageDown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_pageUp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_pageUp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_pageUp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pageUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2l_pageUp", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_pageUp__Z_args, // the arguments
  0, //arguments count
  Window_methods_pageUp__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_pageUp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popEventHandler_Z_LREvtHandler__arg_deleteHandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deleteHandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_popEventHandler_Z_LREvtHandler__args[] = 
{
  &Window_methods_popEventHandler_Z_LREvtHandler__arg_deleteHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_popEventHandler_Z_LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_popEventHandler_Z_LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_Y_popEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_popEventHandler_Z_LREvtHandler__args, // the arguments
  0, //arguments count
  Window_methods_popEventHandler_Z_LREvtHandler__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_popEventHandler_Z_LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_popEventHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_popEventHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_popEventHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "popEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_Z_popEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_popEventHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  Window_methods_popEventHandler__LREvtHandler__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_popEventHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popupMenu_INLRMenu_II_Z_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popupMenu_INLRMenu_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popupMenu_INLRMenu_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_popupMenu_INLRMenu_II_Z_args[] = 
{
  &Window_methods_popupMenu_INLRMenu_II_Z_arg_menu,
  &Window_methods_popupMenu_INLRMenu_II_Z_arg_x,
  &Window_methods_popupMenu_INLRMenu_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_popupMenu_INLRMenu_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_popupMenu_INLRMenu_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popupMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_26_popupMenu", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_popupMenu_INLRMenu_II_Z_args, // the arguments
  0, //arguments count
  Window_methods_popupMenu_INLRMenu_II_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_popupMenu_INLRMenu_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popupMenu_INLRMenu_INLRPoint__Z_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_popupMenu_INLRMenu_INLRPoint__Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_popupMenu_INLRMenu_INLRPoint__Z_args[] = 
{
  &Window_methods_popupMenu_INLRMenu_INLRPoint__Z_arg_menu,
  &Window_methods_popupMenu_INLRMenu_INLRPoint__Z_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_popupMenu_INLRMenu_INLRPoint__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_popupMenu_INLRMenu_INLRPoint__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popupMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_25_popupMenu", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_popupMenu_INLRMenu_INLRPoint__Z_args, // the arguments
  0, //arguments count
  Window_methods_popupMenu_INLRMenu_INLRPoint__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_popupMenu_INLRMenu_INLRPoint__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_prepareDC_INLRDC__V_arg_dc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_prepareDC_INLRDC__V_args[] = 
{
  &Window_methods_prepareDC_INLRDC__V_arg_dc,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_prepareDC_INLRDC__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_prepareDC_INLRDC__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1C_prepareDC", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_prepareDC_INLRDC__V_args, // the arguments
  0, //arguments count
  Window_methods_prepareDC_INLRDC__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_prepareDC_INLRDC__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_pushEventHandler_INLREvtHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_pushEventHandler_INLREvtHandler__V_args[] = 
{
  &Window_methods_pushEventHandler_INLREvtHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_pushEventHandler_INLREvtHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_pushEventHandler_INLREvtHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_X_pushEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_pushEventHandler_INLREvtHandler__V_args, // the arguments
  0, //arguments count
  Window_methods_pushEventHandler_INLREvtHandler__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_pushEventHandler_INLREvtHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_raise__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_raise__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_raise__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "raise", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_raise", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_raise__V_args, // the arguments
  0, //arguments count
  Window_methods_raise__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_raise__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_refresh_ZINLRRect__V_arg_eraseBackground = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eraseBackground", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_refresh_ZINLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_refresh_ZINLRRect__V_args[] = 
{
  &Window_methods_refresh_ZINLRRect__V_arg_eraseBackground,
  &Window_methods_refresh_ZINLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_refresh_ZINLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_refresh_ZINLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refresh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1u_refresh", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_refresh_ZINLRRect__V_args, // the arguments
  0, //arguments count
  Window_methods_refresh_ZINLRRect__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_refresh_ZINLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_refresh__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_refresh__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_refresh__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "refresh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1v_refresh", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_refresh__V_args, // the arguments
  0, //arguments count
  Window_methods_refresh__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_refresh__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_refresh_Z_V_arg_eraseBackground = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eraseBackground", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_refresh_Z_V_args[] = 
{
  &Window_methods_refresh_Z_V_arg_eraseBackground,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_refresh_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_refresh_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "refresh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_refresh", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_refresh_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_refresh_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_refresh_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_refreshRect_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_refreshRect_INLRRect__V_args[] = 
{
  &Window_methods_refreshRect_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_refreshRect_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_refreshRect_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_refreshRect", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_refreshRect_INLRRect__V_args, // the arguments
  0, //arguments count
  Window_methods_refreshRect_INLRRect__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_refreshRect_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_releaseMouse__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_releaseMouse__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_releaseMouse__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releaseMouse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_releaseMouse", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_releaseMouse__V_args, // the arguments
  0, //arguments count
  Window_methods_releaseMouse__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_releaseMouse__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_removeChild_INLRWindow__V_arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_removeChild_INLRWindow__V_args[] = 
{
  &Window_methods_removeChild_INLRWindow__V_arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_removeChild_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_removeChild_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_removeChild", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_removeChild_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_removeChild_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_removeChild_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_removeConstraintReference_INLRWindow__V_arg_otherWin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherWin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_removeConstraintReference_INLRWindow__V_args[] = 
{
  &Window_methods_removeConstraintReference_INLRWindow__V_arg_otherWin,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_removeConstraintReference_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_removeConstraintReference_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeConstraintReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2x_removeConstraintReference", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_removeConstraintReference_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_removeConstraintReference_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_removeConstraintReference_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_removeEventHandler_INLREvtHandler__Z_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_removeEventHandler_INLREvtHandler__Z_args[] = 
{
  &Window_methods_removeEventHandler_INLREvtHandler__Z_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_removeEventHandler_INLREvtHandler__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_removeEventHandler_INLREvtHandler__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_10_removeEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_removeEventHandler_INLREvtHandler__Z_args, // the arguments
  0, //arguments count
  Window_methods_removeEventHandler_INLREvtHandler__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_removeEventHandler_INLREvtHandler__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_reparent_INLRWindow__Z_arg_newParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_reparent_INLRWindow__Z_args[] = 
{
  &Window_methods_reparent_INLRWindow__Z_arg_newParent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_reparent_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_reparent_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reparent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_reparent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_reparent_INLRWindow__Z_args, // the arguments
  0, //arguments count
  Window_methods_reparent_INLRWindow__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_reparent_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_resetConstraints__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_resetConstraints__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_resetConstraints__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2z_resetConstraints", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_resetConstraints__V_args, // the arguments
  0, //arguments count
  Window_methods_resetConstraints__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_resetConstraints__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_screenToClient_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_screenToClient_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_screenToClient_OUTIOUTI_V_args[] = 
{
  &Window_methods_screenToClient_OUTIOUTI_V_arg_x,
  &Window_methods_screenToClient_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_screenToClient_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_screenToClient_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "screenToClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Y_screenToClient", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_screenToClient_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Window_methods_screenToClient_OUTIOUTI_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_screenToClient_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_screenToClient_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_screenToClient_INLRPoint__LRPoint__args[] = 
{
  &Window_methods_screenToClient_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_screenToClient_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_screenToClient_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "screenToClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_20_screenToClient", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_screenToClient_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  Window_methods_screenToClient_INLRPoint__LRPoint__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_screenToClient_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollLines_I_Z_arg_lines = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lines", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_scrollLines_I_Z_args[] = 
{
  &Window_methods_scrollLines_I_Z_arg_lines,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_scrollLines_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_scrollLines_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2h_scrollLines", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_scrollLines_I_Z_args, // the arguments
  0, //arguments count
  Window_methods_scrollLines_I_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_scrollLines_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollPages_I_Z_arg_pages = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pages", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_scrollPages_I_Z_args[] = 
{
  &Window_methods_scrollPages_I_Z_arg_pages,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_scrollPages_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_scrollPages_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollPages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2i_scrollPages", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_scrollPages_I_Z_args, // the arguments
  0, //arguments count
  Window_methods_scrollPages_I_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_scrollPages_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollWindow_IIINLRRect__V_arg_dx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollWindow_IIINLRRect__V_arg_dy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollWindow_IIINLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_scrollWindow_IIINLRRect__V_args[] = 
{
  &Window_methods_scrollWindow_IIINLRRect__V_arg_dx,
  &Window_methods_scrollWindow_IIINLRRect__V_arg_dy,
  &Window_methods_scrollWindow_IIINLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_scrollWindow_IIINLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_scrollWindow_IIINLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2f_scrollWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_scrollWindow_IIINLRRect__V_args, // the arguments
  0, //arguments count
  Window_methods_scrollWindow_IIINLRRect__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_scrollWindow_IIINLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollWindow_II_V_arg_dx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_scrollWindow_II_V_arg_dy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_scrollWindow_II_V_args[] = 
{
  &Window_methods_scrollWindow_II_V_arg_dx,
  &Window_methods_scrollWindow_II_V_arg_dy,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_scrollWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_scrollWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "scrollWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2g_scrollWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_scrollWindow_II_V_args, // the arguments
  0, //arguments count
  Window_methods_scrollWindow_II_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_scrollWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setAutoLayout_Z_V_arg_autoLayout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "autoLayout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setAutoLayout_Z_V_args[] = 
{
  &Window_methods_setAutoLayout_Z_V_arg_autoLayout,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setAutoLayout_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setAutoLayout_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAutoLayout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2P_setAutoLayout", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setAutoLayout_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_setAutoLayout_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setAutoLayout_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setBackgroundColour_INLRColour__Z_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setBackgroundColour_INLRColour__Z_args[] = 
{
  &Window_methods_setBackgroundColour_INLRColour__Z_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setBackgroundColour_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setBackgroundColour_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1J_setBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setBackgroundColour_INLRColour__Z_args, // the arguments
  0, //arguments count
  Window_methods_setBackgroundColour_INLRColour__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setBackgroundColour_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setBackgroundColour_INLRString__Z_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setBackgroundColour_INLRString__Z_args[] = 
{
  &Window_methods_setBackgroundColour_INLRString__Z_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setBackgroundColour_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setBackgroundColour_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1L_setBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setBackgroundColour_INLRString__Z_args, // the arguments
  0, //arguments count
  Window_methods_setBackgroundColour_INLRString__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setBackgroundColour_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setCaret_INLRCaret__V_arg_caret = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "caret", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCaret::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setCaret_INLRCaret__V_args[] = 
{
  &Window_methods_setCaret_INLRCaret__V_arg_caret,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setCaret_INLRCaret__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setCaret_INLRCaret__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCaret", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1T_setCaret", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setCaret_INLRCaret__V_args, // the arguments
  0, //arguments count
  Window_methods_setCaret_INLRCaret__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setCaret_INLRCaret__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setConstraintSizes_Z_V_arg_recurse = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "recurse", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setConstraintSizes_Z_V_args[] = 
{
  &Window_methods_setConstraintSizes_Z_V_arg_recurse,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setConstraintSizes_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setConstraintSizes_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setConstraintSizes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2A_setConstraintSizes", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setConstraintSizes_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_setConstraintSizes_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setConstraintSizes_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setConstraints_INLRLayoutConstraints__V_arg_constraints = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "constraints", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLayoutConstraints::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setConstraints_INLRLayoutConstraints__V_args[] = 
{
  &Window_methods_setConstraints_INLRLayoutConstraints__V_arg_constraints,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setConstraints_INLRLayoutConstraints__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setConstraints_INLRLayoutConstraints__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2t_setConstraints", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setConstraints_INLRLayoutConstraints__V_args, // the arguments
  0, //arguments count
  Window_methods_setConstraints_INLRLayoutConstraints__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setConstraints_INLRLayoutConstraints__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setContainingSizer_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setContainingSizer_INLRSizer__V_args[] = 
{
  &Window_methods_setContainingSizer_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setContainingSizer_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setContainingSizer_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContainingSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2X_setContainingSizer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setContainingSizer_INLRSizer__V_args, // the arguments
  0, //arguments count
  Window_methods_setContainingSizer_INLRSizer__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setContainingSizer_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setCursor_INLRCursor__Z_arg_cursor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cursor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setCursor_INLRCursor__Z_args[] = 
{
  &Window_methods_setCursor_INLRCursor__Z_arg_cursor,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setCursor_INLRCursor__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setCursor_INLRCursor__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_setCursor", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setCursor_INLRCursor__Z_args, // the arguments
  0, //arguments count
  Window_methods_setCursor_INLRCursor__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setCursor_INLRCursor__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setDefaultItem_INLRWindow__LRWindow__arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setDefaultItem_INLRWindow__LRWindow__args[] = 
{
  &Window_methods_setDefaultItem_INLRWindow__LRWindow__arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setDefaultItem_INLRWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setDefaultItem_INLRWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_D_setDefaultItem", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setDefaultItem_INLRWindow__LRWindow__args, // the arguments
  0, //arguments count
  Window_methods_setDefaultItem_INLRWindow__LRWindow__exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setDefaultItem_INLRWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setDropTarget_INLRDropTarget__V_arg_dropTarget = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dropTarget", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDropTarget::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setDropTarget_INLRDropTarget__V_args[] = 
{
  &Window_methods_setDropTarget_INLRDropTarget__V_arg_dropTarget,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setDropTarget_INLRDropTarget__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setDropTarget_INLRDropTarget__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2r_setDropTarget", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setDropTarget_INLRDropTarget__V_args, // the arguments
  0, //arguments count
  Window_methods_setDropTarget_INLRDropTarget__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setDropTarget_INLRDropTarget__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setEventHandler_INLREvtHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setEventHandler_INLREvtHandler__V_args[] = 
{
  &Window_methods_setEventHandler_INLREvtHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setEventHandler_INLREvtHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setEventHandler_INLREvtHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_W_setEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setEventHandler_INLREvtHandler__V_args, // the arguments
  0, //arguments count
  Window_methods_setEventHandler_INLREvtHandler__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setEventHandler_INLREvtHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setExtraStyle_I_V_arg_exStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setExtraStyle_I_V_args[] = 
{
  &Window_methods_setExtraStyle_I_V_arg_exStyle,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setExtraStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setExtraStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setExtraStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setExtraStyle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setExtraStyle_I_V_args, // the arguments
  0, //arguments count
  Window_methods_setExtraStyle_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setExtraStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setFocus__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setFocus__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setFocus__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_setFocus", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setFocus__V_args, // the arguments
  0, //arguments count
  Window_methods_setFocus__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setFocus__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setFocusFromKbd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setFocusFromKbd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setFocusFromKbd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFocusFromKbd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setFocusFromKbd", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setFocusFromKbd__V_args, // the arguments
  0, //arguments count
  Window_methods_setFocusFromKbd__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setFocusFromKbd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setFont_INLRFont__Z_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setFont_INLRFont__Z_args[] = 
{
  &Window_methods_setFont_INLRFont__Z_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setFont_INLRFont__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setFont_INLRFont__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1R_setFont", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setFont_INLRFont__Z_args, // the arguments
  0, //arguments count
  Window_methods_setFont_INLRFont__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setFont_INLRFont__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setForegroundColour_INLRColour__Z_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setForegroundColour_INLRColour__Z_args[] = 
{
  &Window_methods_setForegroundColour_INLRColour__Z_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setForegroundColour_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setForegroundColour_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setForegroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1K_setForegroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setForegroundColour_INLRColour__Z_args, // the arguments
  0, //arguments count
  Window_methods_setForegroundColour_INLRColour__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setForegroundColour_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setForegroundColour_INLRString__Z_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setForegroundColour_INLRString__Z_args[] = 
{
  &Window_methods_setForegroundColour_INLRString__Z_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setForegroundColour_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setForegroundColour_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setForegroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1M_setForegroundColour", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setForegroundColour_INLRString__Z_args, // the arguments
  0, //arguments count
  Window_methods_setForegroundColour_INLRString__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setForegroundColour_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setHelpText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setHelpText_INLRString__V_args[] = 
{
  &Window_methods_setHelpText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setHelpText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setHelpText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2n_setHelpText", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setHelpText_INLRString__V_args, // the arguments
  0, //arguments count
  Window_methods_setHelpText_INLRString__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setHelpText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setHelpTextForId_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setHelpTextForId_INLRString__V_args[] = 
{
  &Window_methods_setHelpTextForId_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setHelpTextForId_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setHelpTextForId_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHelpTextForId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2o_setHelpTextForId", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setHelpTextForId_INLRString__V_args, // the arguments
  0, //arguments count
  Window_methods_setHelpTextForId_INLRString__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setHelpTextForId_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setId_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setId_I_V_args[] = 
{
  &Window_methods_setId_I_V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setId", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setId_I_V_args, // the arguments
  0, //arguments count
  Window_methods_setId_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setName_INLRString__V_args[] = 
{
  &Window_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setName", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  Window_methods_setName_INLRString__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setParent_INLRWindow__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setParent_INLRWindow__V_args[] = 
{
  &Window_methods_setParent_INLRWindow__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setParent_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setParent_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setParent", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setParent_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_setParent_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setParent_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollPos_IIZ_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollPos_IIZ_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollPos_IIZ_V_arg_refresh = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "refresh", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setScrollPos_IIZ_V_args[] = 
{
  &Window_methods_setScrollPos_IIZ_V_arg_orient,
  &Window_methods_setScrollPos_IIZ_V_arg_pos,
  &Window_methods_setScrollPos_IIZ_V_arg_refresh,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setScrollPos_IIZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setScrollPos_IIZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2a_setScrollPos", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setScrollPos_IIZ_V_args, // the arguments
  0, //arguments count
  Window_methods_setScrollPos_IIZ_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setScrollPos_IIZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollPos_II_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollPos_II_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setScrollPos_II_V_args[] = 
{
  &Window_methods_setScrollPos_II_V_arg_orient,
  &Window_methods_setScrollPos_II_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setScrollPos_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setScrollPos_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2b_setScrollPos", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setScrollPos_II_V_args, // the arguments
  0, //arguments count
  Window_methods_setScrollPos_II_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setScrollPos_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIIIZ_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIIIZ_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIIIZ_V_arg_thumbvisible = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "thumbvisible", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIIIZ_V_arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIIIZ_V_arg_refresh = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "refresh", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setScrollbar_IIIIZ_V_args[] = 
{
  &Window_methods_setScrollbar_IIIIZ_V_arg_orient,
  &Window_methods_setScrollbar_IIIIZ_V_arg_pos,
  &Window_methods_setScrollbar_IIIIZ_V_arg_thumbvisible,
  &Window_methods_setScrollbar_IIIIZ_V_arg_range,
  &Window_methods_setScrollbar_IIIIZ_V_arg_refresh,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setScrollbar_IIIIZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setScrollbar_IIIIZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_28_setScrollbar", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setScrollbar_IIIIZ_V_args, // the arguments
  0, //arguments count
  Window_methods_setScrollbar_IIIIZ_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setScrollbar_IIIIZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIII_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIII_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIII_V_arg_thumbvisible = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "thumbvisible", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setScrollbar_IIII_V_arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setScrollbar_IIII_V_args[] = 
{
  &Window_methods_setScrollbar_IIII_V_arg_orient,
  &Window_methods_setScrollbar_IIII_V_arg_pos,
  &Window_methods_setScrollbar_IIII_V_arg_thumbvisible,
  &Window_methods_setScrollbar_IIII_V_arg_range,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setScrollbar_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setScrollbar_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_29_setScrollbar", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setScrollbar_IIII_V_args, // the arguments
  0, //arguments count
  Window_methods_setScrollbar_IIII_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setScrollbar_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIIII_V_arg_sizeFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sizeFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSize_IIIII_V_args[] = 
{
  &Window_methods_setSize_IIIII_V_arg_x,
  &Window_methods_setSize_IIIII_V_arg_y,
  &Window_methods_setSize_IIIII_V_arg_width,
  &Window_methods_setSize_IIIII_V_arg_height,
  &Window_methods_setSize_IIIII_V_arg_sizeFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSize_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSize_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_setSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSize_IIIII_V_args, // the arguments
  0, //arguments count
  Window_methods_setSize_IIIII_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSize_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSize_IIII_V_args[] = 
{
  &Window_methods_setSize_IIII_V_arg_x,
  &Window_methods_setSize_IIII_V_arg_y,
  &Window_methods_setSize_IIII_V_arg_width,
  &Window_methods_setSize_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSize_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSize_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSize_IIII_V_args, // the arguments
  0, //arguments count
  Window_methods_setSize_IIII_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSize_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSize_INLRRect__V_args[] = 
{
  &Window_methods_setSize_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSize_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSize_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_setSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSize_INLRRect__V_args, // the arguments
  0, //arguments count
  Window_methods_setSize_INLRRect__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSize_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_II_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_II_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSize_II_V_args[] = 
{
  &Window_methods_setSize_II_V_arg_width,
  &Window_methods_setSize_II_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSize_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSize_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_setSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSize_II_V_args, // the arguments
  0, //arguments count
  Window_methods_setSize_II_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSize_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSize_INLRSize__V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSize_INLRSize__V_args[] = 
{
  &Window_methods_setSize_INLRSize__V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_setSize", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSize_INLRSize__V_args, // the arguments
  0, //arguments count
  Window_methods_setSize_INLRSize__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizeConstraint_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizeConstraint_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizeConstraint_IIII_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizeConstraint_IIII_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSizeConstraint_IIII_V_args[] = 
{
  &Window_methods_setSizeConstraint_IIII_V_arg_x,
  &Window_methods_setSizeConstraint_IIII_V_arg_y,
  &Window_methods_setSizeConstraint_IIII_V_arg_w,
  &Window_methods_setSizeConstraint_IIII_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSizeConstraint_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSizeConstraint_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizeConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2E_setSizeConstraint", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSizeConstraint_IIII_V_args, // the arguments
  0, //arguments count
  Window_methods_setSizeConstraint_IIII_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSizeConstraint_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizer_INLRSizer_Z_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizer_INLRSizer_Z_V_arg_deleteOld = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deleteOld", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSizer_INLRSizer_Z_V_args[] = 
{
  &Window_methods_setSizer_INLRSizer_Z_V_arg_sizer,
  &Window_methods_setSizer_INLRSizer_Z_V_arg_deleteOld,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSizer_INLRSizer_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSizer_INLRSizer_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2S_setSizer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSizer_INLRSizer_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_setSizer_INLRSizer_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSizer_INLRSizer_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizer_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSizer_INLRSizer__V_args[] = 
{
  &Window_methods_setSizer_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSizer_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSizer_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2T_setSizer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSizer_INLRSizer__V_args, // the arguments
  0, //arguments count
  Window_methods_setSizer_INLRSizer__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSizer_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizerAndFit_INLRSizer_Z_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizerAndFit_INLRSizer_Z_V_arg_deleteOld = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deleteOld", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSizerAndFit_INLRSizer_Z_V_args[] = 
{
  &Window_methods_setSizerAndFit_INLRSizer_Z_V_arg_sizer,
  &Window_methods_setSizerAndFit_INLRSizer_Z_V_arg_deleteOld,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSizerAndFit_INLRSizer_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSizerAndFit_INLRSizer_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizerAndFit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2U_setSizerAndFit", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSizerAndFit_INLRSizer_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_setSizerAndFit_INLRSizer_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSizerAndFit_INLRSizer_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setSizerAndFit_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setSizerAndFit_INLRSizer__V_args[] = 
{
  &Window_methods_setSizerAndFit_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setSizerAndFit_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setSizerAndFit_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizerAndFit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2V_setSizerAndFit", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setSizerAndFit_INLRSizer__V_args, // the arguments
  0, //arguments count
  Window_methods_setSizerAndFit_INLRSizer__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setSizerAndFit_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setThemeEnabled_Z_V_arg_enableTheme = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enableTheme", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setThemeEnabled_Z_V_args[] = 
{
  &Window_methods_setThemeEnabled_Z_V_arg_enableTheme,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setThemeEnabled_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setThemeEnabled_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setThemeEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setThemeEnabled", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setThemeEnabled_Z_V_args, // the arguments
  0, //arguments count
  Window_methods_setThemeEnabled_Z_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setThemeEnabled_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setTitle_INLRString__V_arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setTitle_INLRString__V_args[] = 
{
  &Window_methods_setTitle_INLRString__V_arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setTitle_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setTitle_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setTitle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setTitle_INLRString__V_args, // the arguments
  0, //arguments count
  Window_methods_setTitle_INLRString__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setTitle_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setTmpDefaultItem_INLRWindow__V_arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setTmpDefaultItem_INLRWindow__V_args[] = 
{
  &Window_methods_setTmpDefaultItem_INLRWindow__V_arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setTmpDefaultItem_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setTmpDefaultItem_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTmpDefaultItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setTmpDefaultItem", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setTmpDefaultItem_INLRWindow__V_args, // the arguments
  0, //arguments count
  Window_methods_setTmpDefaultItem_INLRWindow__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setTmpDefaultItem_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setToolTip_INLRString__V_arg_tip = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tip", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setToolTip_INLRString__V_args[] = 
{
  &Window_methods_setToolTip_INLRString__V_arg_tip,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setToolTip_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setToolTip_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolTip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2q_setToolTip", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setToolTip_INLRString__V_args, // the arguments
  0, //arguments count
  Window_methods_setToolTip_INLRString__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setToolTip_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setValidator_INLRValidator__V_arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setValidator_INLRValidator__V_args[] = 
{
  &Window_methods_setValidator_INLRValidator__V_arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setValidator_INLRValidator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setValidator_INLRValidator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValidator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_setValidator", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setValidator_INLRValidator__V_args, // the arguments
  0, //arguments count
  Window_methods_setValidator_INLRValidator__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setValidator_INLRValidator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_setWindowStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_setWindowStyle_I_V_args[] = 
{
  &Window_methods_setWindowStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_setWindowStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_setWindowStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWindowStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setWindowStyle", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_setWindowStyle_I_V_args, // the arguments
  0, //arguments count
  Window_methods_setWindowStyle_I_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_setWindowStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_show_Z_Z_arg_showit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "showit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_show_Z_Z_args[] = 
{
  &Window_methods_show_Z_Z_arg_showit,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_show_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_show_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_show", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_show_Z_Z_args, // the arguments
  0, //arguments count
  Window_methods_show_Z_Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_show_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_thaw__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_thaw__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_thaw__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "thaw", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_thaw", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_thaw__V_args, // the arguments
  0, //arguments count
  Window_methods_thaw__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_thaw__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_transferDataFromWindow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_transferDataFromWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_transferDataFromWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "transferDataFromWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_transferDataFromWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_transferDataFromWindow__Z_args, // the arguments
  0, //arguments count
  Window_methods_transferDataFromWindow__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_transferDataFromWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_transferDataToWindow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_transferDataToWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_transferDataToWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "transferDataToWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_transferDataToWindow", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_transferDataToWindow__Z_args, // the arguments
  0, //arguments count
  Window_methods_transferDataToWindow__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_transferDataToWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_unsetConstraints_INLRLayoutConstraints__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLayoutConstraints::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_unsetConstraints_INLRLayoutConstraints__V_args[] = 
{
  &Window_methods_unsetConstraints_INLRLayoutConstraints__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_unsetConstraints_INLRLayoutConstraints__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_unsetConstraints_INLRLayoutConstraints__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unsetConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2v_unsetConstraints", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_unsetConstraints_INLRLayoutConstraints__V_args, // the arguments
  0, //arguments count
  Window_methods_unsetConstraints_INLRLayoutConstraints__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_unsetConstraints_INLRLayoutConstraints__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_update__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_update__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_update__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "update", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1y_update", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_update__V_args, // the arguments
  0, //arguments count
  Window_methods_update__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_update__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_updateWindowUI__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_updateWindowUI__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_updateWindowUI__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateWindowUI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_24_updateWindowUI", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_updateWindowUI__V_args, // the arguments
  0, //arguments count
  Window_methods_updateWindowUI__V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_updateWindowUI__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_validate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_validate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_validate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "validate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1h_validate", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_validate__Z_args, // the arguments
  0, //arguments count
  Window_methods_validate__Z_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_validate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_warpPointer_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_methods_warpPointer_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods_warpPointer_II_V_args[] = 
{
  &Window_methods_warpPointer_II_V_arg_x,
  &Window_methods_warpPointer_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_methods_warpPointer_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_method_warpPointer_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warpPointer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_warpPointer", // alternative name of method
  -1, // altlabelHashCode
  Window_methods_warpPointer_II_V_args, // the arguments
  0, //arguments count
  Window_methods_warpPointer_II_V_exceptions, // the declared exceptions
  Window_MetainfoWrapper::Window_method_warpPointer_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Window_methods[] = 
{
  &Window_method_FindFocus__LRWindow_,
  &Window_method_GetClass__L_acdk_lang_RClass_,
  &Window_method_SetFocusFromKbd__V,
  &Window_method_Window_INLRWindow_IINLRPoint_INLRSize__LRWindow_,
  &Window_method_Window_INLRWindow_I_LRWindow_,
  &Window_method_Window_INLRWindow_IINLRPoint__LRWindow_,
  &Window_method_acceptsFocus__Z,
  &Window_method_acceptsFocusFromKeyboard__Z,
  &Window_method_addChild_INLRWindow__V,
  &Window_method_addConstraintReference_INLRWindow__V,
  &Window_method_captureMouse__V,
  &Window_method_centre_I_V,
  &Window_method_centre__V,
  &Window_method_centreOnParent_I_V,
  &Window_method_centreOnParent__V,
  &Window_method_centreOnScreen_I_V,
  &Window_method_centreOnScreen__V,
  &Window_method_clear__V,
  &Window_method_clientToScreen_OUTIOUTI_V,
  &Window_method_clientToScreen_INLRPoint__LRPoint_,
  &Window_method_close_Z_Z,
  &Window_method_close__Z,
  &Window_method_convertDialogToPixels_INLRPoint__LRPoint_,
  &Window_method_convertDialogToPixels_INLRSize__LRSize_,
  &Window_method_convertPixelsToDialog_INLRPoint__LRPoint_,
  &Window_method_convertPixelsToDialog_INLRSize__LRSize_,
  &Window_method_deleteRelatedConstraints__V,
  &Window_method_destroy__Z,
  &Window_method_destroyChildren__Z,
  &Window_method_doPhase_I_Z,
  &Window_method_dragAcceptFiles_Z_V,
  &Window_method_enable_Z_Z,
  &Window_method_enable__Z,
  &Window_method_findWindow_I_LRWindow_,
  &Window_method_findWindow_INLRString__LRWindow_,
  &Window_method_findWindowById_IINLRWindow__LRWindow_,
  &Window_method_findWindowById_I_LRWindow_,
  &Window_method_findWindowByLabel_INLRString_INLRWindow__LRWindow_,
  &Window_method_findWindowByLabel_INLRString__LRWindow_,
  &Window_method_findWindowByName_INLRString_INLRWindow__LRWindow_,
  &Window_method_findWindowByName_INLRString__LRWindow_,
  &Window_method_fit__V,
  &Window_method_fitInside__V,
  &Window_method_freeze__V,
  &Window_method_getAutoLayout__Z,
  &Window_method_getBackgroundColour__LRColour_,
  &Window_method_getBestSize__LRSize_,
  &Window_method_getBorder__LBorder_,
  &Window_method_getCapture__LRWindow_,
  &Window_method_getCaret__LRCaret_,
  &Window_method_getCharHeight__I,
  &Window_method_getCharWidth__I,
  &Window_method_getChildren__LRWindowArray_,
  &Window_method_getClientSize__LRSize_,
  &Window_method_getClientSizeConstraint_OUTIOUTI_V,
  &Window_method_getConstraints__LRLayoutConstraints_,
  &Window_method_getContainingSizer__LRSizer_,
  &Window_method_getCursor__LRCursor_,
  &Window_method_getDefaultItem__LRWindow_,
  &Window_method_getDropTarget__LRDropTarget_,
  &Window_method_getEventHandler__LREvtHandler_,
  &Window_method_getExtraStyle__I,
  &Window_method_getFont__LRFont_,
  &Window_method_getForegroundColour__LRColour_,
  &Window_method_getGrandParent__LRWindow_,
  &Window_method_getHelpText__LRString_,
  &Window_method_getId__I,
  &Window_method_getName__LRString_,
  &Window_method_getParent__LRWindow_,
  &Window_method_getPosition_OUTIOUTI_V,
  &Window_method_getPosition__LRPoint_,
  &Window_method_getPositionConstraint_OUTIOUTI_V,
  &Window_method_getRect__LRRect_,
  &Window_method_getScrollPos_I_I,
  &Window_method_getScrollRange_I_I,
  &Window_method_getScrollThumb_I_I,
  &Window_method_getSize_OUTIOUTI_V,
  &Window_method_getSize__LRSize_,
  &Window_method_getSizeConstraint_OUTIOUTI_V,
  &Window_method_getSizer__LRSizer_,
  &Window_method_getThemeEnabled__Z,
  &Window_method_getTitle__LRString_,
  &Window_method_getUpdateClientRect__LRRect_,
  &Window_method_getUpdateRegion__LRRegion_,
  &Window_method_getValidator__LRValidator_,
  &Window_method_getWindowStyle__I,
  &Window_method_getWindowStyleFlag__I,
  &Window_method_hasCapture__Z,
  &Window_method_hasFlag_I_Z,
  &Window_method_hasScrollbar_I_Z,
  &Window_method_hitTest_INLRPoint__LHitTest_,
  &Window_method_hitTest_II_LHitTest_,
  &Window_method_initDialog__V,
  &Window_method_initDispatch__V,
  &Window_method_isBeingDeleted__Z,
  &Window_method_isExposed_II_Z,
  &Window_method_isExposed_IIII_Z,
  &Window_method_isExposed_INLRPoint__Z,
  &Window_method_isExposed_INLRRect__Z,
  &Window_method_isRetained__Z,
  &Window_method_isTopLevel__Z,
  &Window_method_layout__Z,
  &Window_method_layoutPhase1_OUTI_Z,
  &Window_method_layoutPhase2_OUTI_Z,
  &Window_method_lineDown__Z,
  &Window_method_lineUp__Z,
  &Window_method_lower__V,
  &Window_method_makeModal_Z_V,
  &Window_method_makeModal__V,
  &Window_method_messageBox_INLRString_INLRString_IINLRWindow_II_I,
  &Window_method_messageBox_INLRString__I,
  &Window_method_messageBox_INLRString_INLRString__I,
  &Window_method_messageBox_INLRString_INLRString_IINLRWindow_I_I,
  &Window_method_messageBox_INLRString_INLRString_I_I,
  &Window_method_messageBox_INLRString_INLRString_IINLRWindow__I,
  &Window_method_moveConstraint_II_V,
  &Window_method_pageDown__Z,
  &Window_method_pageUp__Z,
  &Window_method_popEventHandler_Z_LREvtHandler_,
  &Window_method_popEventHandler__LREvtHandler_,
  &Window_method_popupMenu_INLRMenu_II_Z,
  &Window_method_popupMenu_INLRMenu_INLRPoint__Z,
  &Window_method_prepareDC_INLRDC__V,
  &Window_method_pushEventHandler_INLREvtHandler__V,
  &Window_method_raise__V,
  &Window_method_refresh_ZINLRRect__V,
  &Window_method_refresh__V,
  &Window_method_refresh_Z_V,
  &Window_method_refreshRect_INLRRect__V,
  &Window_method_releaseMouse__V,
  &Window_method_removeChild_INLRWindow__V,
  &Window_method_removeConstraintReference_INLRWindow__V,
  &Window_method_removeEventHandler_INLREvtHandler__Z,
  &Window_method_reparent_INLRWindow__Z,
  &Window_method_resetConstraints__V,
  &Window_method_screenToClient_OUTIOUTI_V,
  &Window_method_screenToClient_INLRPoint__LRPoint_,
  &Window_method_scrollLines_I_Z,
  &Window_method_scrollPages_I_Z,
  &Window_method_scrollWindow_IIINLRRect__V,
  &Window_method_scrollWindow_II_V,
  &Window_method_setAutoLayout_Z_V,
  &Window_method_setBackgroundColour_INLRColour__Z,
  &Window_method_setBackgroundColour_INLRString__Z,
  &Window_method_setCaret_INLRCaret__V,
  &Window_method_setConstraintSizes_Z_V,
  &Window_method_setConstraints_INLRLayoutConstraints__V,
  &Window_method_setContainingSizer_INLRSizer__V,
  &Window_method_setCursor_INLRCursor__Z,
  &Window_method_setDefaultItem_INLRWindow__LRWindow_,
  &Window_method_setDropTarget_INLRDropTarget__V,
  &Window_method_setEventHandler_INLREvtHandler__V,
  &Window_method_setExtraStyle_I_V,
  &Window_method_setFocus__V,
  &Window_method_setFocusFromKbd__V,
  &Window_method_setFont_INLRFont__Z,
  &Window_method_setForegroundColour_INLRColour__Z,
  &Window_method_setForegroundColour_INLRString__Z,
  &Window_method_setHelpText_INLRString__V,
  &Window_method_setHelpTextForId_INLRString__V,
  &Window_method_setId_I_V,
  &Window_method_setName_INLRString__V,
  &Window_method_setParent_INLRWindow__V,
  &Window_method_setScrollPos_IIZ_V,
  &Window_method_setScrollPos_II_V,
  &Window_method_setScrollbar_IIIIZ_V,
  &Window_method_setScrollbar_IIII_V,
  &Window_method_setSize_IIIII_V,
  &Window_method_setSize_IIII_V,
  &Window_method_setSize_INLRRect__V,
  &Window_method_setSize_II_V,
  &Window_method_setSize_INLRSize__V,
  &Window_method_setSizeConstraint_IIII_V,
  &Window_method_setSizer_INLRSizer_Z_V,
  &Window_method_setSizer_INLRSizer__V,
  &Window_method_setSizerAndFit_INLRSizer_Z_V,
  &Window_method_setSizerAndFit_INLRSizer__V,
  &Window_method_setThemeEnabled_Z_V,
  &Window_method_setTitle_INLRString__V,
  &Window_method_setTmpDefaultItem_INLRWindow__V,
  &Window_method_setToolTip_INLRString__V,
  &Window_method_setValidator_INLRValidator__V,
  &Window_method_setWindowStyle_I_V,
  &Window_method_show_Z_Z,
  &Window_method_thaw__V,
  &Window_method_transferDataFromWindow__Z,
  &Window_method_transferDataToWindow__Z,
  &Window_method_unsetConstraints_INLRLayoutConstraints__V,
  &Window_method_update__V,
  &Window_method_updateWindowUI__V,
  &Window_method_validate__Z,
  &Window_method_warpPointer_II_V,
  0
};


struct Window_MetaInfoInitializer
{  Window_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Window::clazzInfo();
    ci->fields =  _Window_fields;
    ci->methods =  _Window_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Window_MetaInfoInitializer Window_MetaInfoInitializer_staticinstance__;


struct Window_clazzInfo_ClazzAttributesResInitializer17
{
  Window_clazzInfo_ClazzAttributesResInitializer17()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Window_method_hitTest_II_LHitTest_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)HitTestMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Window_method_hitTest_INLRPoint__LHitTest_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)HitTestMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Window_method_getBorder__LBorder_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)BorderMetaInf::GetEnumInfo()));
  }
};

Window_clazzInfo_ClazzAttributesResInitializer17 Window_clazzInfo_ClazzAttributesResInitializer17_instance;



} // namespace acdk
} // namespace wx

