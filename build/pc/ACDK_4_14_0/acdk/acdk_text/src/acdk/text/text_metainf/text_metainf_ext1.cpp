// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../text.h"
#include "../AbstractFormatedOutput.h"
#include "../Base64.h"
#include "../Config.h"
#include "../DateFormat.h"
#include "../DateFormatSymbols.h"
#include "../DecimalFormat.h"
#include "../DecimalFormatSymbols.h"
#include "../FieldPosition.h"
#include "../Format.h"
#include "../FormatedOutput.h"
#include "../HTMLFormatedOutput.h"
#include "../NumberFormat.h"
#include "../ParseException.h"
#include "../ParsePosition.h"
#include "../RegExp.h"
#include "../SimpleDateFormat.h"
#include "../Template.h"
#include "../text.h"
#include "../TextFormatedOutput.h"
#include "../text_all.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TemplateFilter_create_array(int length)
{
  return new ObjectArrayImpl<RTemplateFilter>(length);
}

//static
::acdk::lang::RObject
TemplateFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TemplateFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TemplateFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilter_method_filter_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TemplateFilter* This = dmi_cast<TemplateFilter>(This_);
    ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilter_method_filter_INLRStringArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TemplateFilter* This = dmi_cast<TemplateFilter>(This_);
    ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TemplateFilter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TemplateFilter_MetainfoWrapper::TemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TemplateFilter_methods_filter_INLRString__LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilter_methods_filter_INLRString__LRString__args[] = 
{
  &TemplateFilter_methods_filter_INLRString__LRString__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilter_methods_filter_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilter_method_filter_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_filter", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilter_methods_filter_INLRString__LRString__args, // the arguments
  0, //arguments count
  TemplateFilter_methods_filter_INLRString__LRString__exceptions, // the declared exceptions
  TemplateFilter_MetainfoWrapper::TemplateFilter_method_filter_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "matches", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilter_methods_filter_INLRStringArray__LRString__args[] = 
{
  &TemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches,
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilter_methods_filter_INLRStringArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilter_method_filter_INLRStringArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_filter", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilter_methods_filter_INLRStringArray__LRString__args, // the arguments
  0, //arguments count
  TemplateFilter_methods_filter_INLRStringArray__LRString__exceptions, // the declared exceptions
  TemplateFilter_MetainfoWrapper::TemplateFilter_method_filter_INLRStringArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TemplateFilter_methods[] = 
{
  &TemplateFilter_method_GetClass__L_acdk_lang_RClass_,
  &TemplateFilter_method_filter_INLRString__LRString_,
  &TemplateFilter_method_filter_INLRStringArray__LRString_,
  0
};


struct TemplateFilter_MetaInfoInitializer
{  TemplateFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TemplateFilter::clazzInfo();
    ci->fields =  _TemplateFilter_fields;
    ci->methods =  _TemplateFilter_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TemplateFilter_MetaInfoInitializer TemplateFilter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
PropertyVarTemplateFilter_create_array(int length)
{
  return new ObjectArrayImpl<RPropertyVarTemplateFilter>(length);
}

//static
::acdk::lang::RObject
PropertyVarTemplateFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PropertyVarTemplateFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyVarTemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PropertyVarTemplateFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyVarTemplateFilter_method_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PropertyVarTemplateFilter(::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyVarTemplateFilter_method_filter_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyVarTemplateFilter* This = dmi_cast<PropertyVarTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyVarTemplateFilter::filter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyVarTemplateFilter_method_filter_INLRStringArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyVarTemplateFilter* This = dmi_cast<PropertyVarTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyVarTemplateFilter::filter(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyVarTemplateFilter_method_properties__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyVarTemplateFilter* This = dmi_cast<PropertyVarTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyVarTemplateFilter::properties();
    else
        ret = (::acdk::lang::RObject)This->properties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PropertyVarTemplateFilter_fields__props_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PropertyVarTemplateFilter* This = dmi_cast<PropertyVarTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_props, flags);
    else
      This->_props = ::acdk::lang::dmi::castTo< acdk::util::RProperties>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PropertyVarTemplateFilter_fields__props = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_props", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_fields__props_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PropertyVarTemplateFilter_fields[] = 
{
  &PropertyVarTemplateFilter_fields__props,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyVarTemplateFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyVarTemplateFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PropertyVarTemplateFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PropertyVarTemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__args[] = 
{
  &PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyVarTemplateFilter_method_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PropertyVarTemplateFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PropertyVarTemplateFilter::clazzInfo(), // return type
  "_0_PropertyVarTemplateFilter", // alternative name of method
  -1, // altlabelHashCode
  PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__args, // the arguments
  0, //arguments count
  PropertyVarTemplateFilter_methods_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__exceptions, // the declared exceptions
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_method_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyVarTemplateFilter_methods_filter_INLRString__LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyVarTemplateFilter_methods_filter_INLRString__LRString__args[] = 
{
  &PropertyVarTemplateFilter_methods_filter_INLRString__LRString__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter_methods_filter_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyVarTemplateFilter_method_filter_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_filter", // alternative name of method
  -1, // altlabelHashCode
  PropertyVarTemplateFilter_methods_filter_INLRString__LRString__args, // the arguments
  0, //arguments count
  PropertyVarTemplateFilter_methods_filter_INLRString__LRString__exceptions, // the declared exceptions
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_method_filter_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "matches", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__args[] = 
{
  &PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyVarTemplateFilter_method_filter_INLRStringArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_filter", // alternative name of method
  -1, // altlabelHashCode
  PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__args, // the arguments
  0, //arguments count
  PropertyVarTemplateFilter_methods_filter_INLRStringArray__LRString__exceptions, // the declared exceptions
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_method_filter_INLRStringArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyVarTemplateFilter_methods_properties__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter_methods_properties__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyVarTemplateFilter_method_properties__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "properties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_1_properties", // alternative name of method
  -1, // altlabelHashCode
  PropertyVarTemplateFilter_methods_properties__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  PropertyVarTemplateFilter_methods_properties__Lacdk_util_RProperties__exceptions, // the declared exceptions
  PropertyVarTemplateFilter_MetainfoWrapper::PropertyVarTemplateFilter_method_properties__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PropertyVarTemplateFilter_methods[] = 
{
  &PropertyVarTemplateFilter_method_GetClass__L_acdk_lang_RClass_,
  &PropertyVarTemplateFilter_method_PropertyVarTemplateFilter_INLacdk_util_RProperties__LRPropertyVarTemplateFilter_,
  &PropertyVarTemplateFilter_method_filter_INLRString__LRString_,
  &PropertyVarTemplateFilter_method_filter_INLRStringArray__LRString_,
  &PropertyVarTemplateFilter_method_properties__Lacdk_util_RProperties_,
  0
};


struct PropertyVarTemplateFilter_MetaInfoInitializer
{  PropertyVarTemplateFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PropertyVarTemplateFilter::clazzInfo();
    ci->fields =  _PropertyVarTemplateFilter_fields;
    ci->methods =  _PropertyVarTemplateFilter_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PropertyVarTemplateFilter_MetaInfoInitializer PropertyVarTemplateFilter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TemplateFilterInformation_create_array(int length)
{
  return new ObjectArrayImpl<RTemplateFilterInformation>(length);
}

//static
::acdk::lang::RObject
TemplateFilterInformation_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TemplateFilterInformation_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilterInformation_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TemplateFilterInformation::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilterInformation_method_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TemplateFilterInformation(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RTemplateFilter>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilterInformation_method_filter__LRTemplateFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TemplateFilterInformation::filter();
    else
        ret = (::acdk::lang::RObject)This->filter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilterInformation_method_isPattern__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TemplateFilterInformation::isPattern();
    else
      ret = This->isPattern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TemplateFilterInformation_method_pattern__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TemplateFilterInformation::pattern();
    else
        ret = (::acdk::lang::RObject)This->pattern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TemplateFilterInformation_fields__filter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filter, flags);
    else
      This->_filter = ::acdk::lang::dmi::castTo< RTemplateFilter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TemplateFilterInformation_fields__isPattern_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isPattern, flags);
    else
      This->_isPattern = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TemplateFilterInformation_fields__pattern_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TemplateFilterInformation* This = dmi_cast<TemplateFilterInformation>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pattern, flags);
    else
      This->_pattern = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TemplateFilterInformation_fields__filter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTemplateFilter::clazzInfo(),
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_fields__filter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TemplateFilterInformation_fields__isPattern = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isPattern", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_fields__isPattern_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TemplateFilterInformation_fields__pattern = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pattern", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_fields__pattern_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TemplateFilterInformation_fields[] = 
{
  &TemplateFilterInformation_fields__filter,
  &TemplateFilterInformation_fields__isPattern,
  &TemplateFilterInformation_fields__pattern,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilterInformation_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilterInformation_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilterInformation_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TemplateFilterInformation_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_isPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "isPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTemplateFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__args[] = 
{
  &TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_isPattern,
  &TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_pattern,
  &TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilterInformation_method_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TemplateFilterInformation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TemplateFilterInformation::clazzInfo(), // return type
  "_0_TemplateFilterInformation", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__args, // the arguments
  0, //arguments count
  TemplateFilterInformation_methods_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__exceptions, // the declared exceptions
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_method_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilterInformation_methods_filter__LRTemplateFilter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation_methods_filter__LRTemplateFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilterInformation_method_filter__LRTemplateFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTemplateFilter::clazzInfo(), // return type
  "_3_filter", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilterInformation_methods_filter__LRTemplateFilter__args, // the arguments
  0, //arguments count
  TemplateFilterInformation_methods_filter__LRTemplateFilter__exceptions, // the declared exceptions
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_method_filter__LRTemplateFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilterInformation_methods_isPattern__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation_methods_isPattern__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilterInformation_method_isPattern__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isPattern", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilterInformation_methods_isPattern__Z_args, // the arguments
  0, //arguments count
  TemplateFilterInformation_methods_isPattern__Z_exceptions, // the declared exceptions
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_method_isPattern__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TemplateFilterInformation_methods_pattern__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation_methods_pattern__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TemplateFilterInformation_method_pattern__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_pattern", // alternative name of method
  -1, // altlabelHashCode
  TemplateFilterInformation_methods_pattern__LRString__args, // the arguments
  0, //arguments count
  TemplateFilterInformation_methods_pattern__LRString__exceptions, // the declared exceptions
  TemplateFilterInformation_MetainfoWrapper::TemplateFilterInformation_method_pattern__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TemplateFilterInformation_methods[] = 
{
  &TemplateFilterInformation_method_GetClass__L_acdk_lang_RClass_,
  &TemplateFilterInformation_method_TemplateFilterInformation_ZINLRString_INLRTemplateFilter__LRTemplateFilterInformation_,
  &TemplateFilterInformation_method_filter__LRTemplateFilter_,
  &TemplateFilterInformation_method_isPattern__Z,
  &TemplateFilterInformation_method_pattern__LRString_,
  0
};


struct TemplateFilterInformation_MetaInfoInitializer
{  TemplateFilterInformation_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TemplateFilterInformation::clazzInfo();
    ci->fields =  _TemplateFilterInformation_fields;
    ci->methods =  _TemplateFilterInformation_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TemplateFilterInformation_MetaInfoInitializer TemplateFilterInformation_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Template_create_array(int length)
{
  return new ObjectArrayImpl<RTemplate>(length);
}

//static
::acdk::lang::RObject
Template_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Template_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Template::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_Template_LRString__LRTemplate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Template(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_filter_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Template::filter(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_filter__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Template::filter();
    else
        ret = (::acdk::lang::RObject)This->filter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_filter_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Template::filter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->filter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_registerPatternListener_INLRString_INLRTemplateFilter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Template::registerPatternListener(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RTemplateFilter>(args[1], dc));
    else
        This->registerPatternListener(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RTemplateFilter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Template_method_registerTextListener_INLRString_INLRTemplateFilter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Template::registerTextListener(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RTemplateFilter>(args[1], dc));
    else
        This->registerTextListener(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RTemplateFilter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Template_fields__filter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filter, flags);
    else
      This->_filter = ::acdk::lang::dmi::castTo< acdk::util::RArrayList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Template_fields__text_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Template* This = dmi_cast<Template>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_text, flags);
    else
      This->_text = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Template_fields__filter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RArrayList::clazzInfo(),
  Template_MetainfoWrapper::Template_fields__filter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Template_fields__text = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_text", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Template_MetainfoWrapper::Template_fields__text_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Template_fields[] = 
{
  &Template_fields__filter,
  &Template_fields__text,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Template_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_Template_LRString__LRTemplate__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_Template_LRString__LRTemplate__args[] = 
{
  &Template_methods_Template_LRString__LRTemplate__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_Template_LRString__LRTemplate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_Template_LRString__LRTemplate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Template", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Template::clazzInfo(), // return type
  "_0_Template", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_Template_LRString__LRTemplate__args, // the arguments
  0, //arguments count
  Template_methods_Template_LRString__LRTemplate__exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_Template_LRString__LRTemplate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_filter_II_LRString__arg_startoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "startoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_filter_II_LRString__arg_endoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "endoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_filter_II_LRString__args[] = 
{
  &Template_methods_filter_II_LRString__arg_startoffset,
  &Template_methods_filter_II_LRString__arg_endoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_filter_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_filter_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_filter", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_filter_II_LRString__args, // the arguments
  0, //arguments count
  Template_methods_filter_II_LRString__exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_filter_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_filter__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_filter__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_filter__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_filter", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_filter__LRString__args, // the arguments
  0, //arguments count
  Template_methods_filter__LRString__exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_filter__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_filter_I_LRString__arg_startoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "startoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_filter_I_LRString__args[] = 
{
  &Template_methods_filter_I_LRString__arg_startoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_filter_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_filter_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_filter", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_filter_I_LRString__args, // the arguments
  0, //arguments count
  Template_methods_filter_I_LRString__exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_filter_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTemplateFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_args[] = 
{
  &Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_arg_pattern,
  &Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_registerPatternListener_INLRString_INLRTemplateFilter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerPatternListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_registerPatternListener", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_args, // the arguments
  0, //arguments count
  Template_methods_registerPatternListener_INLRString_INLRTemplateFilter__V_exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_registerPatternListener_INLRString_INLRTemplateFilter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTemplateFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_args[] = 
{
  &Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_arg_str,
  &Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Template_method_registerTextListener_INLRString_INLRTemplateFilter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTextListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_registerTextListener", // alternative name of method
  -1, // altlabelHashCode
  Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_args, // the arguments
  0, //arguments count
  Template_methods_registerTextListener_INLRString_INLRTemplateFilter__V_exceptions, // the declared exceptions
  Template_MetainfoWrapper::Template_method_registerTextListener_INLRString_INLRTemplateFilter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Template_methods[] = 
{
  &Template_method_GetClass__L_acdk_lang_RClass_,
  &Template_method_Template_LRString__LRTemplate_,
  &Template_method_filter_II_LRString_,
  &Template_method_filter__LRString_,
  &Template_method_filter_I_LRString_,
  &Template_method_registerPatternListener_INLRString_INLRTemplateFilter__V,
  &Template_method_registerTextListener_INLRString_INLRTemplateFilter__V,
  0
};


struct Template_MetaInfoInitializer
{  Template_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Template::clazzInfo();
    ci->fields =  _Template_fields;
    ci->methods =  _Template_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Template_MetaInfoInitializer Template_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text

