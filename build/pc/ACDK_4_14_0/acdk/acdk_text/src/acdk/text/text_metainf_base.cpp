// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AbstractFormatedOutput.h"
#include "Base64.h"
#include "Config.h"
#include "DateFormat.h"
#include "DateFormatSymbols.h"
#include "DecimalFormat.h"
#include "DecimalFormatSymbols.h"
#include "FieldPosition.h"
#include "Format.h"
#include "FormatedOutput.h"
#include "HTMLFormatedOutput.h"
#include "NumberFormat.h"
#include "ParseException.h"
#include "ParsePosition.h"
#include "RegExp.h"
#include "SimpleDateFormat.h"
#include "Template.h"
#include "text.h"
#include "TextFormatedOutput.h"
#include "text_all.h"

namespace acdk { 
namespace text { 

::acdk::lang::dmi::ClazzSuperInfo _Base64_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Base64_interfaces[] =
{
  &_Base64_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Base64::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Base64", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Base64_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Base64::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Base64(Base64::clazzInfo());

::acdk::lang::RClass
Base64::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Base64::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo DateFields_ERA_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ERA_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::ERA_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_YEAR_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "YEAR_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::YEAR_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_MONTH_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MONTH_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::MONTH_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_DATE_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DATE_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DATE_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_HOUR_OF_DAY1_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HOUR_OF_DAY1_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::HOUR_OF_DAY1_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_HOUR_OF_DAY0_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HOUR_OF_DAY0_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::HOUR_OF_DAY0_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_MINUTE_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MINUTE_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::MINUTE_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_SECOND_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SECOND_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::SECOND_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_MILLISECOND_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MILLISECOND_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::MILLISECOND_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_DAY_OF_WEEK_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DAY_OF_WEEK_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DAY_OF_WEEK_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_DAY_OF_YEAR_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DAY_OF_YEAR_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DAY_OF_YEAR_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_DAY_OF_WEEK_IN_MONTH_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DAY_OF_WEEK_IN_MONTH_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DAY_OF_WEEK_IN_MONTH_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_WEEK_OF_YEAR_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WEEK_OF_YEAR_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::WEEK_OF_YEAR_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_WEEK_OF_MONTH_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WEEK_OF_MONTH_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::WEEK_OF_MONTH_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_AM_PM_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AM_PM_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::AM_PM_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_HOUR1_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HOUR1_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::HOUR1_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_HOUR0_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HOUR0_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::HOUR0_FIELD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DateFields_TIMEZONE_FIELD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TIMEZONE_FIELD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::TIMEZONE_FIELD, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* DateFields_enumValues[] = {
  &DateFields_ERA_FIELD,
  &DateFields_YEAR_FIELD,
  &DateFields_MONTH_FIELD,
  &DateFields_DATE_FIELD,
  &DateFields_HOUR_OF_DAY1_FIELD,
  &DateFields_HOUR_OF_DAY0_FIELD,
  &DateFields_MINUTE_FIELD,
  &DateFields_SECOND_FIELD,
  &DateFields_MILLISECOND_FIELD,
  &DateFields_DAY_OF_WEEK_FIELD,
  &DateFields_DAY_OF_YEAR_FIELD,
  &DateFields_DAY_OF_WEEK_IN_MONTH_FIELD,
  &DateFields_WEEK_OF_YEAR_FIELD,
  &DateFields_WEEK_OF_MONTH_FIELD,
  &DateFields_AM_PM_FIELD,
  &DateFields_HOUR1_FIELD,
  &DateFields_HOUR0_FIELD,
  &DateFields_TIMEZONE_FIELD,
0
};

::acdk::lang::dmi::ClazzEnumInfo* DateFieldsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo DateFields_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "DateFields", // name
  -1, // hashCode
  "acdk/text", // ns
  0, // _scopeParent
  0, // _nextSibling
  DateFields_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_DateFields(&DateFields_enumInfo);

  return &DateFields_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_DateFieldsEnumInfo(DateFieldsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_NoneFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NoneFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::NoneFormatStyle, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_FullFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FullFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::FullFormatStyle, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_LongFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "LongFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::LongFormatStyle, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_MediumFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MediumFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::MediumFormatStyle, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_ShortFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ShortFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::ShortFormatStyle, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FormatStyle_DefaultFormatStyle = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DefaultFormatStyle", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DefaultFormatStyle, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FormatStyle_enumValues[] = {
  &FormatStyle_NoneFormatStyle,
  &FormatStyle_FullFormatStyle,
  &FormatStyle_LongFormatStyle,
  &FormatStyle_MediumFormatStyle,
  &FormatStyle_ShortFormatStyle,
  &FormatStyle_DefaultFormatStyle,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FormatStyleMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FormatStyle_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FormatStyle", // name
  -1, // hashCode
  "acdk/text", // ns
  0, // _scopeParent
  0, // _nextSibling
  FormatStyle_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FormatStyle(&FormatStyle_enumInfo);

  return &FormatStyle_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FormatStyleEnumInfo(FormatStyleMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DateFormat_super_acdk__text__Format =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::text::Format::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DateFormat_interfaces[] =
{
  &_DateFormat_super_acdk__text__Format,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DateFormat", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DateFormat_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DateFormat::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DateFormat(DateFormat::clazzInfo());

::acdk::lang::RClass
DateFormat::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DateFormat::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::text::, Format)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_calendar._ref_this()); // ::acdk::util::RCalendar _calendar 
  fields.push_back((::acdk::lang::RObject*)this->_numberFormat._ref_this()); // RNumberFormat _numberFormat 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DecimalSubpatternProperties_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DecimalSubpatternProperties_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DecimalSubpatternProperties_interfaces[] =
{
  &_DecimalSubpatternProperties_super___acdk__lang__Object,
  &_DecimalSubpatternProperties_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "DecimalSubpatternProperties", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DecimalSubpatternProperties_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DecimalSubpatternProperties::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DecimalSubpatternProperties(DecimalSubpatternProperties::clazzInfo());

::acdk::lang::RClass
DecimalSubpatternProperties::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DecimalSubpatternProperties::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_pattern._ref_this()); // RString _pattern 
  fields.push_back((::acdk::lang::RObject*)this->_prefix._ref_this()); // RString _prefix 
  fields.push_back((::acdk::lang::RObject*)this->_suffix._ref_this()); // RString _suffix 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DecimalFormat_super_acdk__text__NumberFormat =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::text::NumberFormat::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DecimalFormat_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DecimalFormat_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DecimalFormat_interfaces[] =
{
  &_DecimalFormat_super_acdk__text__NumberFormat,
  &_DecimalFormat_super_acdk__io__Serializable,
  &_DecimalFormat_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "DecimalFormat", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DecimalFormat_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DecimalFormat::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DecimalFormat(DecimalFormat::clazzInfo());

::acdk::lang::RClass
DecimalFormat::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DecimalFormat::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::text::, NumberFormat)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dateFormatSymbols._ref_this()); // RDecimalFormatSymbols _dateFormatSymbols 
  fields.push_back((::acdk::lang::RObject*)this->_negativ._ref_this()); // RDecimalSubpatternProperties _negativ 
  fields.push_back((::acdk::lang::RObject*)this->_pattern._ref_this()); // RString _pattern 
  fields.push_back((::acdk::lang::RObject*)this->_positiv._ref_this()); // RDecimalSubpatternProperties _positiv 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

::acdk::lang::dmi::ClazzSuperInfo _DecimalFormatSymbols_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DecimalFormatSymbols_interfaces[] =
{
  &_DecimalFormatSymbols_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DecimalFormatSymbols", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DecimalFormatSymbols_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DecimalFormatSymbols::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DecimalFormatSymbols(DecimalFormatSymbols::clazzInfo());

::acdk::lang::RClass
DecimalFormatSymbols::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DecimalFormatSymbols::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_currency._ref_this()); // RString _currency 
  fields.push_back((::acdk::lang::RObject*)this->_currencySymbol._ref_this()); // RString _currencySymbol 
  fields.push_back((::acdk::lang::RObject*)this->_infinity._ref_this()); // RString _infinity 
  fields.push_back((::acdk::lang::RObject*)this->_naN._ref_this()); // RString _naN 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _FieldPosition_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FieldPosition_interfaces[] =
{
  &_FieldPosition_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FieldPosition", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FieldPosition_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FieldPosition::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FieldPosition(FieldPosition::clazzInfo());

::acdk::lang::RClass
FieldPosition::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FieldPosition::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Format_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Format_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Format_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Format_interfaces[] =
{
  &_Format_super_acdk__lang__Object,
  &_Format_super_acdk__io__Serializable,
  &_Format_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Format::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Format", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Format_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Format::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Format(Format::clazzInfo());

::acdk::lang::RClass
Format::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Format::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

::acdk::lang::dmi::ClazzSuperInfo* _FormatedOutput_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FormatedOutput", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FormatedOutput_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FormatedOutput::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FormatedOutput(FormatedOutput::clazzInfo());

::acdk::lang::RClass
FormatedOutput::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FormatedOutput::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _NumberFormat_super_acdk__text__Format =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::text::Format::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NumberFormat_interfaces[] =
{
  &_NumberFormat_super_acdk__text__Format,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "NumberFormat", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NumberFormat_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NumberFormat::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NumberFormat(NumberFormat::clazzInfo());

::acdk::lang::RClass
NumberFormat::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NumberFormat::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::text::, Format)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_maxFractionDigits._ref_this()); // RByte _maxFractionDigits 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ParseException_super_acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParseException_interfaces[] =
{
  &_ParseException_super_acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParseException", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParseException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParseException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParseException(ParseException::clazzInfo());

::acdk::lang::RClass
ParseException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParseException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Exception)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ParsePosition_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParsePosition_interfaces[] =
{
  &_ParsePosition_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParsePosition", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParsePosition_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParsePosition::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParsePosition(ParsePosition::clazzInfo());

::acdk::lang::RClass
ParsePosition::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParsePosition::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_IgnoreCase = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "IgnoreCase", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::IgnoreCase, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_NoNewLine = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NoNewLine", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::NoNewLine, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_DotAll = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DotAll", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DotAll, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_Extended = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Extended", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::Extended, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_Anchored = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Anchored", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::Anchored, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_DollarEndOnly = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DollarEndOnly", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::DollarEndOnly, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_Extra = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Extra", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::Extra, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_NotBol = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NotBol", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::NotBol, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_NotEol = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NotEol", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::NotEol, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_UnGreedy = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "UnGreedy", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::UnGreedy, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_NotEmpty = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NotEmpty", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::NotEmpty, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RegExpFlags_Utf8 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Utf8", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::text::Utf8, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* RegExpFlags_enumValues[] = {
  &RegExpFlags_IgnoreCase,
  &RegExpFlags_NoNewLine,
  &RegExpFlags_DotAll,
  &RegExpFlags_Extended,
  &RegExpFlags_Anchored,
  &RegExpFlags_DollarEndOnly,
  &RegExpFlags_Extra,
  &RegExpFlags_NotBol,
  &RegExpFlags_NotEol,
  &RegExpFlags_UnGreedy,
  &RegExpFlags_NotEmpty,
  &RegExpFlags_Utf8,
0
};

::acdk::lang::dmi::ClazzEnumInfo* RegExpFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo RegExpFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "RegExpFlags", // name
  -1, // hashCode
  "acdk/text", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegExpFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_RegExpFlags(&RegExpFlags_enumInfo);

  return &RegExpFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_RegExpFlagsEnumInfo(RegExpFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

::acdk::lang::dmi::ClazzSuperInfo _RegExp_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RegExp_interfaces[] =
{
  &_RegExp_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RegExp", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RegExp_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RegExp::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RegExp(RegExp::clazzInfo());

::acdk::lang::RClass
RegExp::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RegExp::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SimpleDateFormat_super_acdk__text__DateFormat =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::text::DateFormat::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleDateFormat_interfaces[] =
{
  &_SimpleDateFormat_super_acdk__text__DateFormat,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SimpleDateFormat", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SimpleDateFormat_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SimpleDateFormat::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleDateFormat(SimpleDateFormat::clazzInfo());

::acdk::lang::RClass
SimpleDateFormat::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SimpleDateFormat::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::text::, DateFormat)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_format._ref_this()); // RDateFormatSymbols _format 
  fields.push_back((::acdk::lang::RObject*)this->_loc._ref_this()); // acdk::util::RLocale _loc 
  fields.push_back((::acdk::lang::RObject*)this->_pattern._ref_this()); // RString _pattern 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _TemplateFilter_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TemplateFilter", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TemplateFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TemplateFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TemplateFilter(TemplateFilter::clazzInfo());

::acdk::lang::RClass
TemplateFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TemplateFilter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PropertyVarTemplateFilter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _PropertyVarTemplateFilter_super_acdk__text__TemplateFilter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::text::TemplateFilter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PropertyVarTemplateFilter_interfaces[] =
{
  &_PropertyVarTemplateFilter_super_acdk__lang__Object,
  &_PropertyVarTemplateFilter_super_acdk__text__TemplateFilter,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyVarTemplateFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PropertyVarTemplateFilter", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PropertyVarTemplateFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PropertyVarTemplateFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PropertyVarTemplateFilter(PropertyVarTemplateFilter::clazzInfo());

::acdk::lang::RClass
PropertyVarTemplateFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PropertyVarTemplateFilter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_props._ref_this()); // acdk::util::RProperties _props 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TemplateFilterInformation_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TemplateFilterInformation_interfaces[] =
{
  &_TemplateFilterInformation_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TemplateFilterInformation::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TemplateFilterInformation", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TemplateFilterInformation_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TemplateFilterInformation::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TemplateFilterInformation(TemplateFilterInformation::clazzInfo());

::acdk::lang::RClass
TemplateFilterInformation::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TemplateFilterInformation::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filter._ref_this()); // RTemplateFilter _filter 
  fields.push_back((::acdk::lang::RObject*)this->_pattern._ref_this()); // RString _pattern 
}


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Template_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Template_interfaces[] =
{
  &_Template_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Template::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Template", // name of class
  -1, // hashCode
  "acdk/text", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Template_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Template::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Template(Template::clazzInfo());

::acdk::lang::RClass
Template::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Template::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filter._ref_this()); // acdk::util::RArrayList _filter 
  fields.push_back((::acdk::lang::RObject*)this->_text._ref_this()); // RString _text 
}


} // namespace acdk
} // namespace text

