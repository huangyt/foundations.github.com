// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../text.h"
#include "../AbstractFormatedOutput.h"
#include "../Base64.h"
#include "../Config.h"
#include "../DateFormat.h"
#include "../DateFormatSymbols.h"
#include "../DecimalFormat.h"
#include "../DecimalFormatSymbols.h"
#include "../FieldPosition.h"
#include "../Format.h"
#include "../FormatedOutput.h"
#include "../HTMLFormatedOutput.h"
#include "../NumberFormat.h"
#include "../ParseException.h"
#include "../ParsePosition.h"
#include "../RegExp.h"
#include "../SimpleDateFormat.h"
#include "../Template.h"
#include "../text.h"
#include "../TextFormatedOutput.h"
#include "../text_all.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_text_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "text", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_text_unitInfo(&acdk_text_unitInfo);


namespace acdk { 
namespace text { 


//static
::acdk::lang::RObject
Base64_create_array(int length)
{
  return new ObjectArrayImpl<RBase64>(length);
}

//static
::acdk::lang::RObject
Base64_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Base64_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Base64_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Base64::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Base64_method_decode_INLRbyteArray__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Base64::decode(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Base64_method_encode_INLRbyteArray__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Base64::encode(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Base64_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Base64_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Base64_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Base64_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Base64_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Base64_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Base64_MetainfoWrapper::Base64_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Base64_methods_decode_INLRbyteArray__LRbyteArray__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Base64_methods_decode_INLRbyteArray__LRbyteArray__args[] = 
{
  &Base64_methods_decode_INLRbyteArray__LRbyteArray__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* Base64_methods_decode_INLRbyteArray__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Base64_method_decode_INLRbyteArray__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_1_decode", // alternative name of method
  -1, // altlabelHashCode
  Base64_methods_decode_INLRbyteArray__LRbyteArray__args, // the arguments
  0, //arguments count
  Base64_methods_decode_INLRbyteArray__LRbyteArray__exceptions, // the declared exceptions
  Base64_MetainfoWrapper::Base64_method_decode_INLRbyteArray__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Base64_methods_encode_INLRbyteArray__LRbyteArray__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Base64_methods_encode_INLRbyteArray__LRbyteArray__args[] = 
{
  &Base64_methods_encode_INLRbyteArray__LRbyteArray__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* Base64_methods_encode_INLRbyteArray__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Base64_method_encode_INLRbyteArray__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_0_encode", // alternative name of method
  -1, // altlabelHashCode
  Base64_methods_encode_INLRbyteArray__LRbyteArray__args, // the arguments
  0, //arguments count
  Base64_methods_encode_INLRbyteArray__LRbyteArray__exceptions, // the declared exceptions
  Base64_MetainfoWrapper::Base64_method_encode_INLRbyteArray__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Base64_methods[] = 
{
  &Base64_method_GetClass__L_acdk_lang_RClass_,
  &Base64_method_decode_INLRbyteArray__LRbyteArray_,
  &Base64_method_encode_INLRbyteArray__LRbyteArray_,
  0
};


struct Base64_MetaInfoInitializer
{  Base64_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Base64::clazzInfo();
    ci->fields =  _Base64_fields;
    ci->methods =  _Base64_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Base64_MetaInfoInitializer Base64_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DateFormat_create_array(int length)
{
  return new ObjectArrayImpl<RDateFormat>(length);
}

//static
::acdk::lang::RObject
DateFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DateFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DateFormat::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::format(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< ::acdk::util::RDate>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_format_INL_acdk_util_RDate__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::format(::acdk::lang::dmi::castTo< ::acdk::util::RDate>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< ::acdk::util::RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_get_IIINL_acdk_util_RLocale__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::get((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc), (FormatStyle)::acdk::lang::dmi::castTo<int>(args[1], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getAvailableLocales__L_acdk_util_RLocaleArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getAvailableLocales();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getCalendar__L_acdk_util_RCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::getCalendar();
    else
        ret = (::acdk::lang::RObject)This->getCalendar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateInstance__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateInstance_I_LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateTimeInstance_II_LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateTimeInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc), (FormatStyle)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateTimeInstance__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateTimeInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateTimeInstance_I_LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateTimeInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getDateTimeInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc), (FormatStyle)::acdk::lang::dmi::castTo<int>(args[1], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getInstance__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getLenient__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DateFormat::getLenient();
    else
      ret = This->getLenient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getNumberFormat__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::getNumberFormat();
    else
        ret = (::acdk::lang::RObject)This->getNumberFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getTimeInstance_I_LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getTimeInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getTimeInstance__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getTimeInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DateFormat::getTimeInstance((FormatStyle)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_getTimeZone__L_acdk_util_RTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::getTimeZone();
    else
        ret = (::acdk::lang::RObject)This->getTimeZone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DateFormat::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_parse_INLRString__L_acdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DateFormat::parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_setCalendar_INL_acdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DateFormat::setCalendar(::acdk::lang::dmi::castTo< ::acdk::util::RCalendar>(args[0], dc));
    else
        This->setCalendar(::acdk::lang::dmi::castTo< ::acdk::util::RCalendar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_setLenient_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DateFormat::setLenient(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setLenient(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_setNumberFormat_INLRNumberFormat__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DateFormat::setNumberFormat(::acdk::lang::dmi::castTo< RNumberFormat>(args[0], dc));
    else
        This->setNumberFormat(::acdk::lang::dmi::castTo< RNumberFormat>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DateFormat_method_setTimeZone_INL_acdk_util_RTimeZone__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DateFormat::setTimeZone(::acdk::lang::dmi::castTo< ::acdk::util::RTimeZone>(args[0], dc));
    else
        This->setTimeZone(::acdk::lang::dmi::castTo< ::acdk::util::RTimeZone>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DateFormat_fields__calendar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_calendar, flags);
    else
      This->_calendar = ::acdk::lang::dmi::castTo< ::acdk::util::RCalendar>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DateFormat_fields__lenient_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lenient, flags);
    else
      This->_lenient = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DateFormat_fields__numberFormat_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DateFormat* This = dmi_cast<DateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numberFormat, flags);
    else
      This->_numberFormat = ::acdk::lang::dmi::castTo< RNumberFormat>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DateFormat_fields__calendar = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_calendar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RCalendar::clazzInfo(),
  DateFormat_MetainfoWrapper::DateFormat_fields__calendar_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DateFormat_fields__lenient = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lenient", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DateFormat_MetainfoWrapper::DateFormat_fields__lenient_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DateFormat_fields__numberFormat = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numberFormat", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(),
  DateFormat_MetainfoWrapper::DateFormat_fields__numberFormat_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DateFormat_fields[] = 
{
  &DateFormat_fields__calendar,
  &DateFormat_fields__lenient,
  &DateFormat_fields__numberFormat,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_DateFormat__LRDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_DateFormat__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_DateFormat__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DateFormat::clazzInfo(), // return type
  "_t_DateFormat", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_DateFormat__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_DateFormat__LRDateFormat__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DateFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_s_clone", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  DateFormat_methods_clone__LRObject__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_equals_INLRObject__Z_args[] = 
{
  &DateFormat_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_equals", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  DateFormat_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toAppendTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fieldPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj,
  &DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo,
  &DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_0_format", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  DateFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toAppendTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fieldPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_date,
  &DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo,
  &DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  DateFormat_methods_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_format_INL_acdk_util_RDate__LRString__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_format_INL_acdk_util_RDate__LRString__args[] = 
{
  &DateFormat_methods_format_INL_acdk_util_RDate__LRString__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_format_INL_acdk_util_RDate__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_format_INL_acdk_util_RDate__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_format", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_format_INL_acdk_util_RDate__LRString__args, // the arguments
  0, //arguments count
  DateFormat_methods_format_INL_acdk_util_RDate__LRString__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_format_INL_acdk_util_RDate__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dateStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_loc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__args[] = 
{
  &DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle,
  &DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle,
  &DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_loc,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_get_IIINL_acdk_util_RLocale__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_u_get", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_get_IIINL_acdk_util_RLocale__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getAvailableLocales__L_acdk_util_RLocaleArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getAvailableLocales__L_acdk_util_RLocaleArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getAvailableLocales__L_acdk_util_RLocaleArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableLocales", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocaleArray::clazzInfo(), // return type
  "_h_getAvailableLocales", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getAvailableLocales__L_acdk_util_RLocaleArray__args, // the arguments
  0, //arguments count
  DateFormat_methods_getAvailableLocales__L_acdk_util_RLocaleArray__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getAvailableLocales__L_acdk_util_RLocaleArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getCalendar__L_acdk_util_RCalendar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getCalendar__L_acdk_util_RCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getCalendar__L_acdk_util_RCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RCalendar::clazzInfo(), // return type
  "_j_getCalendar", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getCalendar__L_acdk_util_RCalendar__args, // the arguments
  0, //arguments count
  DateFormat_methods_getCalendar__L_acdk_util_RCalendar__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getCalendar__L_acdk_util_RCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateInstance__LRDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateInstance__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateInstance__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_a_getDateInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateInstance__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateInstance__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateInstance__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__args[] = 
{
  &DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style,
  &DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_b_getDateInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateInstance_I_LRDateFormat__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateInstance_I_LRDateFormat__args[] = 
{
  &DateFormat_methods_getDateInstance_I_LRDateFormat__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateInstance_I_LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateInstance_I_LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_9_getDateInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateInstance_I_LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateInstance_I_LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateInstance_I_LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_dateStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dateStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_timeStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateTimeInstance_II_LRDateFormat__args[] = 
{
  &DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_dateStyle,
  &DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_timeStyle,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateTimeInstance_II_LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateTimeInstance_II_LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_c_getDateTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateTimeInstance_II_LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateTimeInstance_II_LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateTimeInstance_II_LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateTimeInstance__LRDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateTimeInstance__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateTimeInstance__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_d_getDateTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateTimeInstance__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateTimeInstance__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateTimeInstance__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_I_LRDateFormat__arg_dateStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dateStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateTimeInstance_I_LRDateFormat__args[] = 
{
  &DateFormat_methods_getDateTimeInstance_I_LRDateFormat__arg_dateStyle,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateTimeInstance_I_LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateTimeInstance_I_LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_e_getDateTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateTimeInstance_I_LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateTimeInstance_I_LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateTimeInstance_I_LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dateStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__args[] = 
{
  &DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle,
  &DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle,
  &DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_f_getDateTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getInstance__LRDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getInstance__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getInstance__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_g_getInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getInstance__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getInstance__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getInstance__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getLenient__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getLenient__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getLenient__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLenient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_getLenient", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getLenient__Z_args, // the arguments
  0, //arguments count
  DateFormat_methods_getLenient__Z_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getLenient__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getNumberFormat__LRNumberFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getNumberFormat__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getNumberFormat__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_l_getNumberFormat", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getNumberFormat__LRNumberFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getNumberFormat__LRNumberFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getNumberFormat__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getTimeInstance_I_LRDateFormat__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getTimeInstance_I_LRDateFormat__args[] = 
{
  &DateFormat_methods_getTimeInstance_I_LRDateFormat__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getTimeInstance_I_LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getTimeInstance_I_LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_6_getTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getTimeInstance_I_LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getTimeInstance_I_LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getTimeInstance_I_LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getTimeInstance__LRDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getTimeInstance__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getTimeInstance__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_7_getTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getTimeInstance__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getTimeInstance__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getTimeInstance__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__args[] = 
{
  &DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style,
  &DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormat::clazzInfo(), // return type
  "_8_getTimeInstance", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__args, // the arguments
  0, //arguments count
  DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_getTimeZone__L_acdk_util_RTimeZone__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_getTimeZone__L_acdk_util_RTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_getTimeZone__L_acdk_util_RTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RTimeZone::clazzInfo(), // return type
  "_n_getTimeZone", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_getTimeZone__L_acdk_util_RTimeZone__args, // the arguments
  0, //arguments count
  DateFormat_methods_getTimeZone__L_acdk_util_RTimeZone__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_getTimeZone__L_acdk_util_RTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_hashCode", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_hashCode__I_args, // the arguments
  0, //arguments count
  DateFormat_methods_hashCode__I_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_parse_INLRString__L_acdk_util_RDate__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_parse_INLRString__L_acdk_util_RDate__args[] = 
{
  &DateFormat_methods_parse_INLRString__L_acdk_util_RDate__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_parse_INLRString__L_acdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_parse_INLRString__L_acdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RDate::clazzInfo(), // return type
  "_3_parse", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_parse_INLRString__L_acdk_util_RDate__args, // the arguments
  0, //arguments count
  DateFormat_methods_parse_INLRString__L_acdk_util_RDate__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_parse_INLRString__L_acdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__args[] = 
{
  &DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__arg_text,
  &DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_parse_INLRString_INLRParsePosition__L_acdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RDate::clazzInfo(), // return type
  "_4_parse", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__args, // the arguments
  0, //arguments count
  DateFormat_methods_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_parse_INLRString_INLRParsePosition__L_acdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__args[] = 
{
  &DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_source,
  &DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_parseObject_INLRString_INLRParsePosition__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_parseObject", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__args, // the arguments
  0, //arguments count
  DateFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_arg_newCalendar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newCalendar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_args[] = 
{
  &DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_arg_newCalendar,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_setCalendar_INL_acdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setCalendar", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  DateFormat_methods_setCalendar_INL_acdk_util_RCalendar__V_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_setCalendar_INL_acdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_setLenient_Z_V_arg_lenient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lenient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_setLenient_Z_V_args[] = 
{
  &DateFormat_methods_setLenient_Z_V_arg_lenient,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_setLenient_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_setLenient_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLenient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setLenient", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_setLenient_Z_V_args, // the arguments
  0, //arguments count
  DateFormat_methods_setLenient_Z_V_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_setLenient_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_setNumberFormat_INLRNumberFormat__V_arg_newNumberFormat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newNumberFormat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_setNumberFormat_INLRNumberFormat__V_args[] = 
{
  &DateFormat_methods_setNumberFormat_INLRNumberFormat__V_arg_newNumberFormat,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_setNumberFormat_INLRNumberFormat__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_setNumberFormat_INLRNumberFormat__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNumberFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setNumberFormat", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_setNumberFormat_INLRNumberFormat__V_args, // the arguments
  0, //arguments count
  DateFormat_methods_setNumberFormat_INLRNumberFormat__V_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_setNumberFormat_INLRNumberFormat__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_args[] = 
{
  &DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_arg_zone,
  0
};

::acdk::lang::dmi::ClazzInfo* DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DateFormat_method_setTimeZone_INL_acdk_util_RTimeZone__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setTimeZone", // alternative name of method
  -1, // altlabelHashCode
  DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_args, // the arguments
  0, //arguments count
  DateFormat_methods_setTimeZone_INL_acdk_util_RTimeZone__V_exceptions, // the declared exceptions
  DateFormat_MetainfoWrapper::DateFormat_method_setTimeZone_INL_acdk_util_RTimeZone__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DateFormat_methods[] = 
{
  &DateFormat_method_DateFormat__LRDateFormat_,
  &DateFormat_method_GetClass__L_acdk_lang_RClass_,
  &DateFormat_method_clone__LRObject_,
  &DateFormat_method_equals_INLRObject__Z,
  &DateFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &DateFormat_method_format_INL_acdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &DateFormat_method_format_INL_acdk_util_RDate__LRString_,
  &DateFormat_method_get_IIINL_acdk_util_RLocale__LRDateFormat_,
  &DateFormat_method_getAvailableLocales__L_acdk_util_RLocaleArray_,
  &DateFormat_method_getCalendar__L_acdk_util_RCalendar_,
  &DateFormat_method_getDateInstance__LRDateFormat_,
  &DateFormat_method_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat_,
  &DateFormat_method_getDateInstance_I_LRDateFormat_,
  &DateFormat_method_getDateTimeInstance_II_LRDateFormat_,
  &DateFormat_method_getDateTimeInstance__LRDateFormat_,
  &DateFormat_method_getDateTimeInstance_I_LRDateFormat_,
  &DateFormat_method_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat_,
  &DateFormat_method_getInstance__LRDateFormat_,
  &DateFormat_method_getLenient__Z,
  &DateFormat_method_getNumberFormat__LRNumberFormat_,
  &DateFormat_method_getTimeInstance_I_LRDateFormat_,
  &DateFormat_method_getTimeInstance__LRDateFormat_,
  &DateFormat_method_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat_,
  &DateFormat_method_getTimeZone__L_acdk_util_RTimeZone_,
  &DateFormat_method_hashCode__I,
  &DateFormat_method_parse_INLRString__L_acdk_util_RDate_,
  &DateFormat_method_parse_INLRString_INLRParsePosition__L_acdk_util_RDate_,
  &DateFormat_method_parseObject_INLRString_INLRParsePosition__LRObject_,
  &DateFormat_method_setCalendar_INL_acdk_util_RCalendar__V,
  &DateFormat_method_setLenient_Z_V,
  &DateFormat_method_setNumberFormat_INLRNumberFormat__V,
  &DateFormat_method_setTimeZone_INL_acdk_util_RTimeZone__V,
  0
};


struct DateFormat_MetaInfoInitializer
{  DateFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DateFormat::clazzInfo();
    ci->fields =  _DateFormat_fields;
    ci->methods =  _DateFormat_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DateFormat_MetaInfoInitializer DateFormat_MetaInfoInitializer_staticinstance__;


struct DateFormat_clazzInfo_ClazzAttributesResInitializer1
{
  DateFormat_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getTimeInstance_I_LRDateFormat__arg_style, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getTimeInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateInstance_I_LRDateFormat__arg_style, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateInstance_IINL_acdk_util_RLocale__LRDateFormat__arg_style, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_dateStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateTimeInstance_I_LRDateFormat__arg_dateStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateTimeInstance_II_LRDateFormat__arg_timeStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_getDateTimeInstance_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_timeStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DateFormat_methods_get_IIINL_acdk_util_RLocale__LRDateFormat__arg_dateStyle, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FormatStyleMetaInf::GetEnumInfo()));
  }
};

DateFormat_clazzInfo_ClazzAttributesResInitializer1 DateFormat_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DecimalSubpatternProperties_create_array(int length)
{
  return new ObjectArrayImpl<RDecimalSubpatternProperties>(length);
}

//static
::acdk::lang::RObject
DecimalSubpatternProperties_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DecimalSubpatternProperties_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalSubpatternProperties_method_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalSubpatternProperties(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalSubpatternProperties_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DecimalSubpatternProperties::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalSubpatternProperties_method__analysePattern__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalSubpatternProperties::_analysePattern();
    else
        This->_analysePattern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalSubpatternProperties_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalSubpatternProperties::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalSubpatternProperties_method_equals_LRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalSubpatternProperties::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__exponent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exponent, flags);
    else
      This->_exponent = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__groupingSize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_groupingSize, flags);
    else
      This->_groupingSize = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__leftPercent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_leftPercent, flags);
    else
      This->_leftPercent = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__maximumFractionDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maximumFractionDigits, flags);
    else
      This->_maximumFractionDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__maximumIntegerDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maximumIntegerDigits, flags);
    else
      This->_maximumIntegerDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__minimumFractionDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minimumFractionDigits, flags);
    else
      This->_minimumFractionDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__minimumIntegerDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minimumIntegerDigits, flags);
    else
      This->_minimumIntegerDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__multiplier_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_multiplier, flags);
    else
      This->_multiplier = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__pattern_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pattern, flags);
    else
      This->_pattern = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__prefix_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_prefix, flags);
    else
      This->_prefix = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalSubpatternProperties_fields__suffix_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalSubpatternProperties* This = dmi_cast<DecimalSubpatternProperties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_suffix, flags);
    else
      This->_suffix = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__exponent = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exponent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__exponent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__groupingSize = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_groupingSize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__groupingSize_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__leftPercent = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_leftPercent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__leftPercent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__maximumFractionDigits = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maximumFractionDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__maximumFractionDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__maximumIntegerDigits = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maximumIntegerDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__maximumIntegerDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__minimumFractionDigits = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minimumFractionDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__minimumFractionDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__minimumIntegerDigits = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minimumIntegerDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__minimumIntegerDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__multiplier = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_multiplier", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__multiplier_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__pattern = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pattern", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__pattern_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__prefix = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_prefix", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__prefix_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalSubpatternProperties_fields__suffix = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_suffix", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_fields__suffix_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DecimalSubpatternProperties_fields[] = 
{
  &DecimalSubpatternProperties_fields__exponent,
  &DecimalSubpatternProperties_fields__groupingSize,
  &DecimalSubpatternProperties_fields__leftPercent,
  &DecimalSubpatternProperties_fields__maximumFractionDigits,
  &DecimalSubpatternProperties_fields__maximumIntegerDigits,
  &DecimalSubpatternProperties_fields__minimumFractionDigits,
  &DecimalSubpatternProperties_fields__minimumIntegerDigits,
  &DecimalSubpatternProperties_fields__multiplier,
  &DecimalSubpatternProperties_fields__pattern,
  &DecimalSubpatternProperties_fields__prefix,
  &DecimalSubpatternProperties_fields__suffix,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__args[] = 
{
  &DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalSubpatternProperties_method_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalSubpatternProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalSubpatternProperties::clazzInfo(), // return type
  "_0_DecimalSubpatternProperties", // alternative name of method
  -1, // altlabelHashCode
  DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__args, // the arguments
  0, //arguments count
  DecimalSubpatternProperties_methods_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__exceptions, // the declared exceptions
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_method_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalSubpatternProperties_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalSubpatternProperties_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DecimalSubpatternProperties_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DecimalSubpatternProperties_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalSubpatternProperties_methods__analysePattern__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties_methods__analysePattern__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalSubpatternProperties_method__analysePattern__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_analysePattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3__analysePattern", // alternative name of method
  -1, // altlabelHashCode
  DecimalSubpatternProperties_methods__analysePattern__V_args, // the arguments
  0, //arguments count
  DecimalSubpatternProperties_methods__analysePattern__V_exceptions, // the declared exceptions
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_method__analysePattern__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalSubpatternProperties_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalSubpatternProperties_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_clone", // alternative name of method
  -1, // altlabelHashCode
  DecimalSubpatternProperties_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  DecimalSubpatternProperties_methods_clone__LRObject__exceptions, // the declared exceptions
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalSubpatternProperties_methods_equals_LRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalSubpatternProperties_methods_equals_LRObject__Z_args[] = 
{
  &DecimalSubpatternProperties_methods_equals_LRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalSubpatternProperties_methods_equals_LRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalSubpatternProperties_method_equals_LRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_equals", // alternative name of method
  -1, // altlabelHashCode
  DecimalSubpatternProperties_methods_equals_LRObject__Z_args, // the arguments
  0, //arguments count
  DecimalSubpatternProperties_methods_equals_LRObject__Z_exceptions, // the declared exceptions
  DecimalSubpatternProperties_MetainfoWrapper::DecimalSubpatternProperties_method_equals_LRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DecimalSubpatternProperties_methods[] = 
{
  &DecimalSubpatternProperties_method_DecimalSubpatternProperties_INLRString__LRDecimalSubpatternProperties_,
  &DecimalSubpatternProperties_method_GetClass__L_acdk_lang_RClass_,
  &DecimalSubpatternProperties_method__analysePattern__V,
  &DecimalSubpatternProperties_method_clone__LRObject_,
  &DecimalSubpatternProperties_method_equals_LRObject__Z,
  0
};


struct DecimalSubpatternProperties_MetaInfoInitializer
{  DecimalSubpatternProperties_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DecimalSubpatternProperties::clazzInfo();
    ci->fields =  _DecimalSubpatternProperties_fields;
    ci->methods =  _DecimalSubpatternProperties_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DecimalSubpatternProperties_MetaInfoInitializer DecimalSubpatternProperties_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DecimalFormat_create_array(int length)
{
  return new ObjectArrayImpl<RDecimalFormat>(length);
}

//static
::acdk::lang::RObject
DecimalFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DecimalFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_DecimalFormat__LRDecimalFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalFormat(::acdk::lang::dmi::castTo< RDecimalFormatSymbols>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DecimalFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_applyLocalizedPattern_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormat::applyLocalizedPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->applyLocalizedPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_applyPattern_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormat::applyPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->applyPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormat::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::format(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::format(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::format(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_getDecimalFormatSymbols__LRDecimalFormatSymbols__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::getDecimalFormatSymbols();
    else
        ret = (::acdk::lang::RObject)This->getDecimalFormatSymbols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_getGroupingSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormat::getGroupingSize();
    else
      ret = This->getGroupingSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormat::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_parse_INLRString_INLRParsePosition__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormat::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormat_method_setGroupingSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormat::setGroupingSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setGroupingSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormat_fields__dateFormatSymbols_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dateFormatSymbols, flags);
    else
      This->_dateFormatSymbols = ::acdk::lang::dmi::castTo< RDecimalFormatSymbols>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormat_fields__negativ_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_negativ, flags);
    else
      This->_negativ = ::acdk::lang::dmi::castTo< RDecimalSubpatternProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormat_fields__pattern_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pattern, flags);
    else
      This->_pattern = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormat_fields__positiv_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormat* This = dmi_cast<DecimalFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_positiv, flags);
    else
      This->_positiv = ::acdk::lang::dmi::castTo< RDecimalSubpatternProperties>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormat_fields__dateFormatSymbols = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dateFormatSymbols", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecimalFormatSymbols::clazzInfo(),
  DecimalFormat_MetainfoWrapper::DecimalFormat_fields__dateFormatSymbols_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormat_fields__negativ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_negativ", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecimalSubpatternProperties::clazzInfo(),
  DecimalFormat_MetainfoWrapper::DecimalFormat_fields__negativ_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormat_fields__pattern = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pattern", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalFormat_MetainfoWrapper::DecimalFormat_fields__pattern_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormat_fields__positiv = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_positiv", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecimalSubpatternProperties::clazzInfo(),
  DecimalFormat_MetainfoWrapper::DecimalFormat_fields__positiv_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DecimalFormat_fields[] = 
{
  &DecimalFormat_fields__dateFormatSymbols,
  &DecimalFormat_fields__negativ,
  &DecimalFormat_fields__pattern,
  &DecimalFormat_fields__positiv,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_DecimalFormat__LRDecimalFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_DecimalFormat__LRDecimalFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_DecimalFormat__LRDecimalFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalFormat::clazzInfo(), // return type
  "_0_DecimalFormat", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_DecimalFormat__LRDecimalFormat__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_DecimalFormat__LRDecimalFormat__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_DecimalFormat__LRDecimalFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__arg_symbols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecimalFormatSymbols::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__args[] = 
{
  &DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__arg_symbols,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalFormat::clazzInfo(), // return type
  "_1_DecimalFormat", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_applyLocalizedPattern_INLRString__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_applyLocalizedPattern_INLRString__V_args[] = 
{
  &DecimalFormat_methods_applyLocalizedPattern_INLRString__V_arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_applyLocalizedPattern_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_applyLocalizedPattern_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyLocalizedPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_applyLocalizedPattern", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_applyLocalizedPattern_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_applyLocalizedPattern_INLRString__V_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_applyLocalizedPattern_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_applyPattern_INLRString__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_applyPattern_INLRString__V_args[] = 
{
  &DecimalFormat_methods_applyPattern_INLRString__V_arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_applyPattern_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_applyPattern_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_applyPattern", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_applyPattern_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_applyPattern_INLRString__V_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_applyPattern_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_clone", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_clone__LRObject__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_equals_INLRObject__Z_args[] = 
{
  &DecimalFormat_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fieldPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number,
  &DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_result,
  &DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_6_format", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fieldPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number,
  &DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_result,
  &DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_fieldPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_7_format", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj,
  &DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb,
  &DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_8_format", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_getDecimalFormatSymbols__LRDecimalFormatSymbols__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_getDecimalFormatSymbols__LRDecimalFormatSymbols__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_getDecimalFormatSymbols__LRDecimalFormatSymbols_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecimalFormatSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecimalFormatSymbols::clazzInfo(), // return type
  "_a_getDecimalFormatSymbols", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_getDecimalFormatSymbols__LRDecimalFormatSymbols__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_getDecimalFormatSymbols__LRDecimalFormatSymbols__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_getDecimalFormatSymbols__LRDecimalFormatSymbols__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_getGroupingSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_getGroupingSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_getGroupingSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGroupingSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getGroupingSize", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_getGroupingSize__I_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_getGroupingSize__I_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_getGroupingSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_hashCode", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_hashCode__I_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_hashCode__I_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_parsePosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parsePosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__args[] = 
{
  &DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_text,
  &DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_parsePosition,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_parse_INLRString_INLRParsePosition__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_9_parse", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__args, // the arguments
  0, //arguments count
  DecimalFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_parse_INLRString_INLRParsePosition__LRNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormat_methods_setGroupingSize_I_V_arg_newValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormat_methods_setGroupingSize_I_V_args[] = 
{
  &DecimalFormat_methods_setGroupingSize_I_V_arg_newValue,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormat_methods_setGroupingSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormat_method_setGroupingSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGroupingSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setGroupingSize", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormat_methods_setGroupingSize_I_V_args, // the arguments
  0, //arguments count
  DecimalFormat_methods_setGroupingSize_I_V_exceptions, // the declared exceptions
  DecimalFormat_MetainfoWrapper::DecimalFormat_method_setGroupingSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DecimalFormat_methods[] = 
{
  &DecimalFormat_method_DecimalFormat__LRDecimalFormat_,
  &DecimalFormat_method_DecimalFormat_INLRDecimalFormatSymbols__LRDecimalFormat_,
  &DecimalFormat_method_GetClass__L_acdk_lang_RClass_,
  &DecimalFormat_method_applyLocalizedPattern_INLRString__V,
  &DecimalFormat_method_applyPattern_INLRString__V,
  &DecimalFormat_method_clone__LRObject_,
  &DecimalFormat_method_equals_INLRObject__Z,
  &DecimalFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &DecimalFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &DecimalFormat_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &DecimalFormat_method_getDecimalFormatSymbols__LRDecimalFormatSymbols_,
  &DecimalFormat_method_getGroupingSize__I,
  &DecimalFormat_method_hashCode__I,
  &DecimalFormat_method_parse_INLRString_INLRParsePosition__LRNumber_,
  &DecimalFormat_method_setGroupingSize_I_V,
  0
};


struct DecimalFormat_MetaInfoInitializer
{  DecimalFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DecimalFormat::clazzInfo();
    ci->fields =  _DecimalFormat_fields;
    ci->methods =  _DecimalFormat_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DecimalFormat_MetaInfoInitializer DecimalFormat_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 


//static
::acdk::lang::RObject
DecimalFormatSymbols_create_array(int length)
{
  return new ObjectArrayImpl<RDecimalFormatSymbols>(length);
}

//static
::acdk::lang::RObject
DecimalFormatSymbols_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DecimalFormatSymbols_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_DecimalFormatSymbols__LRDecimalFormatSymbols__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalFormatSymbols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalFormatSymbols(::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DecimalFormatSymbols::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method__init_INL_acdk_util_RLocale__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::_init(::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[0], dc));
    else
        This->_init(::acdk::lang::dmi::castTo< ::acdk::util::RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormatSymbols::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getCurrencySymbol__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormatSymbols::getCurrencySymbol();
    else
        ret = (::acdk::lang::RObject)This->getCurrencySymbol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getDecimalSeparator__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getDecimalSeparator();
    else
      ret = This->getDecimalSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getDigit__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getDigit();
    else
      ret = This->getDigit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getGroupingSeparator__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getGroupingSeparator();
    else
      ret = This->getGroupingSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getInfinity__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormatSymbols::getInfinity();
    else
        ret = (::acdk::lang::RObject)This->getInfinity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getInternationalCurrencySymbol__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormatSymbols::getInternationalCurrencySymbol();
    else
        ret = (::acdk::lang::RObject)This->getInternationalCurrencySymbol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getMinusSign__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getMinusSign();
    else
      ret = This->getMinusSign();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getMonetaryDecimalSeparator__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getMonetaryDecimalSeparator();
    else
      ret = This->getMonetaryDecimalSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getNaN__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalFormatSymbols::getNaN();
    else
        ret = (::acdk::lang::RObject)This->getNaN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getPatternSeparator__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getPatternSeparator();
    else
      ret = This->getPatternSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getPerMill__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getPerMill();
    else
      ret = This->getPerMill();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getPercent__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getPercent();
    else
      ret = This->getPercent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_getZeroDigit__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DecimalFormatSymbols::getZeroDigit();
    else
      ret = This->getZeroDigit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setCurrencySymbol_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setCurrencySymbol(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setCurrencySymbol(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setDecimalSeparator_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setDecimalSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setDecimalSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setDigit_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setGroupingSeparator_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setGroupingSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setGroupingSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setInfinity_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setInfinity(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setInfinity(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setInternationalCurrencySymbol_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setInternationalCurrencySymbol(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setInternationalCurrencySymbol(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setMinusSign_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setMinusSign(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setMinusSign(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setMonetaryDecimalSeparator_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setMonetaryDecimalSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setMonetaryDecimalSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setNaN_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setNaN(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setNaN(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setPatternSeparator_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setPatternSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setPatternSeparator(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setPerMill_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setPerMill(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setPerMill(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setPercent_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setPercent(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setPercent(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalFormatSymbols_method_setZeroDigit_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DecimalFormatSymbols::setZeroDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->setZeroDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__currency_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currency, flags);
    else
      This->_currency = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__currencySymbol_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currencySymbol, flags);
    else
      This->_currencySymbol = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__decimalSeparator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decimalSeparator, flags);
    else
      This->_decimalSeparator = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__digit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_digit, flags);
    else
      This->_digit = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__groupingSeparator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_groupingSeparator, flags);
    else
      This->_groupingSeparator = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__infinity_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_infinity, flags);
    else
      This->_infinity = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__minusSign_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minusSign, flags);
    else
      This->_minusSign = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__monetaryDecimalSeperator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_monetaryDecimalSeperator, flags);
    else
      This->_monetaryDecimalSeperator = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__naN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_naN, flags);
    else
      This->_naN = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__patternSeparator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_patternSeparator, flags);
    else
      This->_patternSeparator = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__perMill_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_perMill, flags);
    else
      This->_perMill = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__percent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_percent, flags);
    else
      This->_percent = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DecimalFormatSymbols_fields__zeroDigit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DecimalFormatSymbols* This = dmi_cast<DecimalFormatSymbols>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_zeroDigit, flags);
    else
      This->_zeroDigit = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__currency = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currency", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__currency_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__currencySymbol = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currencySymbol", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__currencySymbol_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__decimalSeparator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decimalSeparator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__decimalSeparator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__digit = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_digit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__digit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__groupingSeparator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_groupingSeparator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__groupingSeparator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__infinity = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_infinity", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__infinity_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__minusSign = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minusSign", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__minusSign_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__monetaryDecimalSeperator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_monetaryDecimalSeperator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__monetaryDecimalSeperator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__naN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_naN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__naN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__patternSeparator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_patternSeparator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__patternSeparator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__perMill = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_perMill", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__perMill_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__percent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_percent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__percent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DecimalFormatSymbols_fields__zeroDigit = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_zeroDigit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_fields__zeroDigit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DecimalFormatSymbols_fields[] = 
{
  &DecimalFormatSymbols_fields__currency,
  &DecimalFormatSymbols_fields__currencySymbol,
  &DecimalFormatSymbols_fields__decimalSeparator,
  &DecimalFormatSymbols_fields__digit,
  &DecimalFormatSymbols_fields__groupingSeparator,
  &DecimalFormatSymbols_fields__infinity,
  &DecimalFormatSymbols_fields__minusSign,
  &DecimalFormatSymbols_fields__monetaryDecimalSeperator,
  &DecimalFormatSymbols_fields__naN,
  &DecimalFormatSymbols_fields__patternSeparator,
  &DecimalFormatSymbols_fields__perMill,
  &DecimalFormatSymbols_fields__percent,
  &DecimalFormatSymbols_fields__zeroDigit,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_DecimalFormatSymbols__LRDecimalFormatSymbols__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_DecimalFormatSymbols__LRDecimalFormatSymbols__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_DecimalFormatSymbols__LRDecimalFormatSymbols_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalFormatSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalFormatSymbols::clazzInfo(), // return type
  "_1_DecimalFormatSymbols", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_DecimalFormatSymbols__LRDecimalFormatSymbols__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_DecimalFormatSymbols__LRDecimalFormatSymbols__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_DecimalFormatSymbols__LRDecimalFormatSymbols__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__args[] = 
{
  &DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalFormatSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalFormatSymbols::clazzInfo(), // return type
  "_2_DecimalFormatSymbols", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_args[] = 
{
  &DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method__init_INL_acdk_util_RLocale__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0__init", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods__init_INL_acdk_util_RLocale__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method__init_INL_acdk_util_RLocale__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_clone__LRObject__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_equals_INLRObject__Z_args[] = 
{
  &DecimalFormatSymbols_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getCurrencySymbol__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getCurrencySymbol__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getCurrencySymbol__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrencySymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getCurrencySymbol", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getCurrencySymbol__LRString__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getCurrencySymbol__LRString__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getCurrencySymbol__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getDecimalSeparator__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getDecimalSeparator__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getDecimalSeparator__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecimalSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_7_getDecimalSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getDecimalSeparator__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getDecimalSeparator__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getDecimalSeparator__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getDigit__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getDigit__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getDigit__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_9_getDigit", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getDigit__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getDigit__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getDigit__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getGroupingSeparator__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getGroupingSeparator__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getGroupingSeparator__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGroupingSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_b_getGroupingSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getGroupingSeparator__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getGroupingSeparator__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getGroupingSeparator__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getInfinity__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getInfinity__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getInfinity__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInfinity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getInfinity", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getInfinity__LRString__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getInfinity__LRString__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getInfinity__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getInternationalCurrencySymbol__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getInternationalCurrencySymbol__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getInternationalCurrencySymbol__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInternationalCurrencySymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getInternationalCurrencySymbol", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getInternationalCurrencySymbol__LRString__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getInternationalCurrencySymbol__LRString__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getInternationalCurrencySymbol__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getMinusSign__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getMinusSign__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getMinusSign__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinusSign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_h_getMinusSign", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getMinusSign__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getMinusSign__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getMinusSign__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getMonetaryDecimalSeparator__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getMonetaryDecimalSeparator__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getMonetaryDecimalSeparator__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMonetaryDecimalSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_j_getMonetaryDecimalSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getMonetaryDecimalSeparator__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getMonetaryDecimalSeparator__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getMonetaryDecimalSeparator__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getNaN__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getNaN__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getNaN__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNaN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getNaN", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getNaN__LRString__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getNaN__LRString__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getNaN__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getPatternSeparator__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getPatternSeparator__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getPatternSeparator__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPatternSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_n_getPatternSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getPatternSeparator__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getPatternSeparator__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getPatternSeparator__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getPerMill__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getPerMill__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getPerMill__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPerMill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_r_getPerMill", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getPerMill__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getPerMill__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getPerMill__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getPercent__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getPercent__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getPercent__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPercent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_p_getPercent", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getPercent__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getPercent__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getPercent__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_getZeroDigit__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_getZeroDigit__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_getZeroDigit__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getZeroDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_t_getZeroDigit", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_getZeroDigit__Luc2char__args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_getZeroDigit__Luc2char__exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_getZeroDigit__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_arg_currency = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "currency", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_args[] = 
{
  &DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_arg_currency,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setCurrencySymbol_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurrencySymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setCurrencySymbol", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setCurrencySymbol_INLRString__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setCurrencySymbol_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_arg_decimalSeparator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "decimalSeparator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_arg_decimalSeparator,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setDecimalSeparator_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDecimalSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setDecimalSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setDecimalSeparator_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setDecimalSeparator_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setDigit_Luc2char__V_arg_digit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "digit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setDigit_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setDigit_Luc2char__V_arg_digit,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setDigit_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setDigit_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setDigit", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setDigit_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setDigit_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setDigit_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_arg_groupingSeparator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "groupingSeparator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_arg_groupingSeparator,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setGroupingSeparator_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGroupingSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setGroupingSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setGroupingSeparator_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setGroupingSeparator_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setInfinity_INLRString__V_arg_infinity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "infinity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setInfinity_INLRString__V_args[] = 
{
  &DecimalFormatSymbols_methods_setInfinity_INLRString__V_arg_infinity,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setInfinity_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setInfinity_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInfinity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setInfinity", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setInfinity_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setInfinity_INLRString__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setInfinity_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_arg_currency = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "currency", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_args[] = 
{
  &DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_arg_currency,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setInternationalCurrencySymbol_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInternationalCurrencySymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setInternationalCurrencySymbol", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setInternationalCurrencySymbol_INLRString__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setInternationalCurrencySymbol_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_arg_minusSign = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minusSign", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_arg_minusSign,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setMinusSign_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinusSign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setMinusSign", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setMinusSign_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setMinusSign_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_arg_monetaryDecimalSeperator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "monetaryDecimalSeperator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_arg_monetaryDecimalSeperator,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setMonetaryDecimalSeparator_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMonetaryDecimalSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setMonetaryDecimalSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setMonetaryDecimalSeparator_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setMonetaryDecimalSeparator_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setNaN_INLRString__V_arg_naN = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "naN", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setNaN_INLRString__V_args[] = 
{
  &DecimalFormatSymbols_methods_setNaN_INLRString__V_arg_naN,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setNaN_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setNaN_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNaN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setNaN", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setNaN_INLRString__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setNaN_INLRString__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setNaN_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_arg_patternSeparator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "patternSeparator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_arg_patternSeparator,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setPatternSeparator_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPatternSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setPatternSeparator", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setPatternSeparator_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setPatternSeparator_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setPerMill_Luc2char__V_arg_perMill = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "perMill", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setPerMill_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setPerMill_Luc2char__V_arg_perMill,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setPerMill_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setPerMill_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPerMill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setPerMill", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setPerMill_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setPerMill_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setPerMill_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setPercent_Luc2char__V_arg_percent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "percent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setPercent_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setPercent_Luc2char__V_arg_percent,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setPercent_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setPercent_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPercent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setPercent", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setPercent_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setPercent_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setPercent_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_arg_zeroDigit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "zeroDigit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_args[] = 
{
  &DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_arg_zeroDigit,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalFormatSymbols_method_setZeroDigit_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setZeroDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setZeroDigit", // alternative name of method
  -1, // altlabelHashCode
  DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_args, // the arguments
  0, //arguments count
  DecimalFormatSymbols_methods_setZeroDigit_Luc2char__V_exceptions, // the declared exceptions
  DecimalFormatSymbols_MetainfoWrapper::DecimalFormatSymbols_method_setZeroDigit_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DecimalFormatSymbols_methods[] = 
{
  &DecimalFormatSymbols_method_DecimalFormatSymbols__LRDecimalFormatSymbols_,
  &DecimalFormatSymbols_method_DecimalFormatSymbols_INL_acdk_util_RLocale__LRDecimalFormatSymbols_,
  &DecimalFormatSymbols_method_GetClass__L_acdk_lang_RClass_,
  &DecimalFormatSymbols_method__init_INL_acdk_util_RLocale__V,
  &DecimalFormatSymbols_method_clone__LRObject_,
  &DecimalFormatSymbols_method_equals_INLRObject__Z,
  &DecimalFormatSymbols_method_getCurrencySymbol__LRString_,
  &DecimalFormatSymbols_method_getDecimalSeparator__Luc2char_,
  &DecimalFormatSymbols_method_getDigit__Luc2char_,
  &DecimalFormatSymbols_method_getGroupingSeparator__Luc2char_,
  &DecimalFormatSymbols_method_getInfinity__LRString_,
  &DecimalFormatSymbols_method_getInternationalCurrencySymbol__LRString_,
  &DecimalFormatSymbols_method_getMinusSign__Luc2char_,
  &DecimalFormatSymbols_method_getMonetaryDecimalSeparator__Luc2char_,
  &DecimalFormatSymbols_method_getNaN__LRString_,
  &DecimalFormatSymbols_method_getPatternSeparator__Luc2char_,
  &DecimalFormatSymbols_method_getPerMill__Luc2char_,
  &DecimalFormatSymbols_method_getPercent__Luc2char_,
  &DecimalFormatSymbols_method_getZeroDigit__Luc2char_,
  &DecimalFormatSymbols_method_setCurrencySymbol_INLRString__V,
  &DecimalFormatSymbols_method_setDecimalSeparator_Luc2char__V,
  &DecimalFormatSymbols_method_setDigit_Luc2char__V,
  &DecimalFormatSymbols_method_setGroupingSeparator_Luc2char__V,
  &DecimalFormatSymbols_method_setInfinity_INLRString__V,
  &DecimalFormatSymbols_method_setInternationalCurrencySymbol_INLRString__V,
  &DecimalFormatSymbols_method_setMinusSign_Luc2char__V,
  &DecimalFormatSymbols_method_setMonetaryDecimalSeparator_Luc2char__V,
  &DecimalFormatSymbols_method_setNaN_INLRString__V,
  &DecimalFormatSymbols_method_setPatternSeparator_Luc2char__V,
  &DecimalFormatSymbols_method_setPerMill_Luc2char__V,
  &DecimalFormatSymbols_method_setPercent_Luc2char__V,
  &DecimalFormatSymbols_method_setZeroDigit_Luc2char__V,
  0
};


struct DecimalFormatSymbols_MetaInfoInitializer
{  DecimalFormatSymbols_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DecimalFormatSymbols::clazzInfo();
    ci->fields =  _DecimalFormatSymbols_fields;
    ci->methods =  _DecimalFormatSymbols_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DecimalFormatSymbols_MetaInfoInitializer DecimalFormatSymbols_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
FieldPosition_create_array(int length)
{
  return new ObjectArrayImpl<RFieldPosition>(length);
}

//static
::acdk::lang::RObject
FieldPosition_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FieldPosition_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_FieldPosition__LRFieldPosition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FieldPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_FieldPosition_I_LRFieldPosition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FieldPosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FieldPosition::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FieldPosition::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_getBeginIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FieldPosition::getBeginIndex();
    else
      ret = This->getBeginIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_getEndIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FieldPosition::getEndIndex();
    else
      ret = This->getEndIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_getField__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FieldPosition::getField();
    else
      ret = This->getField();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_setBeginIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FieldPosition::setBeginIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setBeginIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_setEndIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FieldPosition::setEndIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setEndIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FieldPosition_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FieldPosition::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FieldPosition_fields__begin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_begin, flags);
    else
      This->_begin = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FieldPosition_fields__end_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_end, flags);
    else
      This->_end = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FieldPosition_fields__fieldID_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FieldPosition* This = dmi_cast<FieldPosition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fieldID, flags);
    else
      This->_fieldID = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FieldPosition_fields__begin = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_begin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FieldPosition_MetainfoWrapper::FieldPosition_fields__begin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FieldPosition_fields__end = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_end", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FieldPosition_MetainfoWrapper::FieldPosition_fields__end_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FieldPosition_fields__fieldID = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fieldID", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FieldPosition_MetainfoWrapper::FieldPosition_fields__fieldID_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FieldPosition_fields[] = 
{
  &FieldPosition_fields__begin,
  &FieldPosition_fields__end,
  &FieldPosition_fields__fieldID,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_FieldPosition__LRFieldPosition__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_FieldPosition__LRFieldPosition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_FieldPosition__LRFieldPosition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FieldPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FieldPosition::clazzInfo(), // return type
  "_0_FieldPosition", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_FieldPosition__LRFieldPosition__args, // the arguments
  0, //arguments count
  FieldPosition_methods_FieldPosition__LRFieldPosition__exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_FieldPosition__LRFieldPosition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FieldPosition_methods_FieldPosition_I_LRFieldPosition__arg_fieldID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fieldID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_FieldPosition_I_LRFieldPosition__args[] = 
{
  &FieldPosition_methods_FieldPosition_I_LRFieldPosition__arg_fieldID,
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_FieldPosition_I_LRFieldPosition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_FieldPosition_I_LRFieldPosition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FieldPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FieldPosition::clazzInfo(), // return type
  "_1_FieldPosition", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_FieldPosition_I_LRFieldPosition__args, // the arguments
  0, //arguments count
  FieldPosition_methods_FieldPosition_I_LRFieldPosition__exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_FieldPosition_I_LRFieldPosition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FieldPosition_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FieldPosition_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_equals_INLRObject__Z_args[] = 
{
  &FieldPosition_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_equals", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  FieldPosition_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_getBeginIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_getBeginIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_getBeginIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBeginIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getBeginIndex", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_getBeginIndex__I_args, // the arguments
  0, //arguments count
  FieldPosition_methods_getBeginIndex__I_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_getBeginIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_getEndIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_getEndIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_getEndIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEndIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getEndIndex", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_getEndIndex__I_args, // the arguments
  0, //arguments count
  FieldPosition_methods_getEndIndex__I_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_getEndIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_getField__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_getField__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_getField__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getField", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_getField__I_args, // the arguments
  0, //arguments count
  FieldPosition_methods_getField__I_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_getField__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FieldPosition_methods_setBeginIndex_I_V_arg_begin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "begin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_setBeginIndex_I_V_args[] = 
{
  &FieldPosition_methods_setBeginIndex_I_V_arg_begin,
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_setBeginIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_setBeginIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBeginIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setBeginIndex", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_setBeginIndex_I_V_args, // the arguments
  0, //arguments count
  FieldPosition_methods_setBeginIndex_I_V_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_setBeginIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FieldPosition_methods_setEndIndex_I_V_arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_setEndIndex_I_V_args[] = 
{
  &FieldPosition_methods_setEndIndex_I_V_arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_setEndIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_setEndIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEndIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setEndIndex", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_setEndIndex_I_V_args, // the arguments
  0, //arguments count
  FieldPosition_methods_setEndIndex_I_V_exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_setEndIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FieldPosition_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FieldPosition_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FieldPosition_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  FieldPosition_methods_toString__LRString__args, // the arguments
  0, //arguments count
  FieldPosition_methods_toString__LRString__exceptions, // the declared exceptions
  FieldPosition_MetainfoWrapper::FieldPosition_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FieldPosition_methods[] = 
{
  &FieldPosition_method_FieldPosition__LRFieldPosition_,
  &FieldPosition_method_FieldPosition_I_LRFieldPosition_,
  &FieldPosition_method_GetClass__L_acdk_lang_RClass_,
  &FieldPosition_method_equals_INLRObject__Z,
  &FieldPosition_method_getBeginIndex__I,
  &FieldPosition_method_getEndIndex__I,
  &FieldPosition_method_getField__I,
  &FieldPosition_method_setBeginIndex_I_V,
  &FieldPosition_method_setEndIndex_I_V,
  &FieldPosition_method_toString__LRString_,
  0
};


struct FieldPosition_MetaInfoInitializer
{  FieldPosition_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FieldPosition::clazzInfo();
    ci->fields =  _FieldPosition_fields;
    ci->methods =  _FieldPosition_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FieldPosition_MetaInfoInitializer FieldPosition_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Format_create_array(int length)
{
  return new ObjectArrayImpl<RFormat>(length);
}

//static
::acdk::lang::RObject
Format_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Format_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Format* This = dmi_cast<Format>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Format::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_dos2unix_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::dos2unix(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_dumpbin_INLRbyteArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::dumpbin(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_format_INLRObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Format* This = dmi_cast<Format>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Format::format(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Format* This = dmi_cast<Format>(This_);
    ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_hexToString_INLRcharArray_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::hexToString(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_hexToString_INLRcharArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::hexToString(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_hexToString_INLRcharArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::hexToString(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_parseObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Format* This = dmi_cast<Format>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Format::parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Format* This = dmi_cast<Format>(This_);
    ret = (::acdk::lang::RObject)This->parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Format_method_unix2dos_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Format::unix2dos(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Format_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_Format__LRFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_Format__LRFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_Format__LRFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Format::clazzInfo(), // return type
  "_0_Format", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_Format__LRFormat__args, // the arguments
  0, //arguments count
  Format_methods_Format__LRFormat__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Format_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_clone", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Format_methods_clone__LRObject__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_dos2unix_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_dos2unix_INLRString__LRString__args[] = 
{
  &Format_methods_dos2unix_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_dos2unix_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_dos2unix_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dos2unix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_dos2unix", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_dos2unix_INLRString__LRString__args, // the arguments
  0, //arguments count
  Format_methods_dos2unix_INLRString__LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_dos2unix_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_dumpbin_INLRbyteArray_I_LRString__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_dumpbin_INLRbyteArray_I_LRString__arg_wide = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "wide", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_dumpbin_INLRbyteArray_I_LRString__args[] = 
{
  &Format_methods_dumpbin_INLRbyteArray_I_LRString__arg_data,
  &Format_methods_dumpbin_INLRbyteArray_I_LRString__arg_wide,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_dumpbin_INLRbyteArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_dumpbin_INLRbyteArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dumpbin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_dumpbin", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_dumpbin_INLRbyteArray_I_LRString__args, // the arguments
  0, //arguments count
  Format_methods_dumpbin_INLRbyteArray_I_LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_dumpbin_INLRbyteArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_format_INLRObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_format_INLRObject__LRString__args[] = 
{
  &Format_methods_format_INLRObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_format_INLRObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_format_INLRObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_format_INLRObject__LRString__args, // the arguments
  0, //arguments count
  Format_methods_format_INLRObject__LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_format_INLRObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_obj,
  &Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb,
  &Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_2_format", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  Format_methods_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray_II_LRString__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray_II_LRString__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_hexToString_INLRcharArray_II_LRString__args[] = 
{
  &Format_methods_hexToString_INLRcharArray_II_LRString__arg_ch,
  &Format_methods_hexToString_INLRcharArray_II_LRString__arg_offset,
  &Format_methods_hexToString_INLRcharArray_II_LRString__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_hexToString_INLRcharArray_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_hexToString_INLRcharArray_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hexToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_hexToString", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_hexToString_INLRcharArray_II_LRString__args, // the arguments
  0, //arguments count
  Format_methods_hexToString_INLRcharArray_II_LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_hexToString_INLRcharArray_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray__LRString__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_hexToString_INLRcharArray__LRString__args[] = 
{
  &Format_methods_hexToString_INLRcharArray__LRString__arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_hexToString_INLRcharArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_hexToString_INLRcharArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "hexToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_hexToString", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_hexToString_INLRcharArray__LRString__args, // the arguments
  0, //arguments count
  Format_methods_hexToString_INLRcharArray__LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_hexToString_INLRcharArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray_I_LRString__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_hexToString_INLRcharArray_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_hexToString_INLRcharArray_I_LRString__args[] = 
{
  &Format_methods_hexToString_INLRcharArray_I_LRString__arg_ch,
  &Format_methods_hexToString_INLRcharArray_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_hexToString_INLRcharArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_hexToString_INLRcharArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "hexToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_hexToString", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_hexToString_INLRcharArray_I_LRString__args, // the arguments
  0, //arguments count
  Format_methods_hexToString_INLRcharArray_I_LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_hexToString_INLRcharArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_parseObject_INLRString__LRObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_parseObject_INLRString__LRObject__args[] = 
{
  &Format_methods_parseObject_INLRString__LRObject__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_parseObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_parseObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_parseObject", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_parseObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  Format_methods_parseObject_INLRString__LRObject__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_parseObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__args[] = 
{
  &Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_str,
  &Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_parseObject_INLRString_INLRParsePosition__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_parseObject", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__args, // the arguments
  0, //arguments count
  Format_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Format_methods_unix2dos_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Format_methods_unix2dos_INLRString__LRString__args[] = 
{
  &Format_methods_unix2dos_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Format_methods_unix2dos_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Format_method_unix2dos_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unix2dos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_unix2dos", // alternative name of method
  -1, // altlabelHashCode
  Format_methods_unix2dos_INLRString__LRString__args, // the arguments
  0, //arguments count
  Format_methods_unix2dos_INLRString__LRString__exceptions, // the declared exceptions
  Format_MetainfoWrapper::Format_method_unix2dos_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Format_methods[] = 
{
  &Format_method_Format__LRFormat_,
  &Format_method_GetClass__L_acdk_lang_RClass_,
  &Format_method_clone__LRObject_,
  &Format_method_dos2unix_INLRString__LRString_,
  &Format_method_dumpbin_INLRbyteArray_I_LRString_,
  &Format_method_format_INLRObject__LRString_,
  &Format_method_format_INLRObject_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &Format_method_hexToString_INLRcharArray_II_LRString_,
  &Format_method_hexToString_INLRcharArray__LRString_,
  &Format_method_hexToString_INLRcharArray_I_LRString_,
  &Format_method_parseObject_INLRString__LRObject_,
  &Format_method_parseObject_INLRString_INLRParsePosition__LRObject_,
  &Format_method_unix2dos_INLRString__LRString_,
  0
};


struct Format_MetaInfoInitializer
{  Format_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Format::clazzInfo();
    ci->fields =  _Format_fields;
    ci->methods =  _Format_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Format_MetaInfoInitializer Format_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 


//static
::acdk::lang::RObject
FormatedOutput_create_array(int length)
{
  return new ObjectArrayImpl<RFormatedOutput>(length);
}

//static
::acdk::lang::RObject
FormatedOutput_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FormatedOutput_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FormatedOutput::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_bold_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->bold(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_br__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->br();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_endDocument__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_p__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->p();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_print_INLRString__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->print(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_println_INLRString__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->println(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_startDocument__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FormatedOutput_method_write_INLRString__LRFormatedOutput__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FormatedOutput* This = dmi_cast<FormatedOutput>(This_);
    ret = (::acdk::lang::RObject)This->write(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FormatedOutput_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FormatedOutput_methods_bold_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_bold_INLRString__LRString__args[] = 
{
  &FormatedOutput_methods_bold_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_bold_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_bold_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bold", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_bold", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_bold_INLRString__LRString__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_bold_INLRString__LRString__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_bold_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_br__LRFormatedOutput__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_br__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_br__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "br", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_3_br", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_br__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_br__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_br__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_endDocument__LRFormatedOutput__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_endDocument__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_endDocument__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_1_endDocument", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_endDocument__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_endDocument__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_endDocument__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_p__LRFormatedOutput__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_p__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_p__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "p", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_2_p", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_p__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_p__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_p__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FormatedOutput_methods_print_INLRString__LRFormatedOutput__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_print_INLRString__LRFormatedOutput__args[] = 
{
  &FormatedOutput_methods_print_INLRString__LRFormatedOutput__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_print_INLRString__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_print_INLRString__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "print", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_5_print", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_print_INLRString__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_print_INLRString__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_print_INLRString__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FormatedOutput_methods_println_INLRString__LRFormatedOutput__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_println_INLRString__LRFormatedOutput__args[] = 
{
  &FormatedOutput_methods_println_INLRString__LRFormatedOutput__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_println_INLRString__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_println_INLRString__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "println", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_6_println", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_println_INLRString__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_println_INLRString__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_println_INLRString__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_startDocument__LRFormatedOutput__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_startDocument__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_startDocument__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_0_startDocument", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_startDocument__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_startDocument__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_startDocument__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FormatedOutput_methods_write_INLRString__LRFormatedOutput__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FormatedOutput_methods_write_INLRString__LRFormatedOutput__args[] = 
{
  &FormatedOutput_methods_write_INLRString__LRFormatedOutput__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* FormatedOutput_methods_write_INLRString__LRFormatedOutput__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FormatedOutput_method_write_INLRString__LRFormatedOutput_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatedOutput::clazzInfo(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  FormatedOutput_methods_write_INLRString__LRFormatedOutput__args, // the arguments
  0, //arguments count
  FormatedOutput_methods_write_INLRString__LRFormatedOutput__exceptions, // the declared exceptions
  FormatedOutput_MetainfoWrapper::FormatedOutput_method_write_INLRString__LRFormatedOutput__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FormatedOutput_methods[] = 
{
  &FormatedOutput_method_GetClass__L_acdk_lang_RClass_,
  &FormatedOutput_method_bold_INLRString__LRString_,
  &FormatedOutput_method_br__LRFormatedOutput_,
  &FormatedOutput_method_endDocument__LRFormatedOutput_,
  &FormatedOutput_method_p__LRFormatedOutput_,
  &FormatedOutput_method_print_INLRString__LRFormatedOutput_,
  &FormatedOutput_method_println_INLRString__LRFormatedOutput_,
  &FormatedOutput_method_startDocument__LRFormatedOutput_,
  &FormatedOutput_method_write_INLRString__LRFormatedOutput_,
  0
};


struct FormatedOutput_MetaInfoInitializer
{  FormatedOutput_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FormatedOutput::clazzInfo();
    ci->fields =  _FormatedOutput_fields;
    ci->methods =  _FormatedOutput_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FormatedOutput_MetaInfoInitializer FormatedOutput_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
NumberFormat_create_array(int length)
{
  return new ObjectArrayImpl<RNumberFormat>(length);
}

//static
::acdk::lang::RObject
NumberFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NumberFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_format_D_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NumberFormat::format(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_format_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NumberFormat::format(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getAvailableLocales__LRObjectArrayImpl_RLocale___dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getAvailableLocales();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getCurrencyInstance__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getCurrencyInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getCurrencyInstance_INLRLocale__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getCurrencyInstance(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getInstance_INLRLocale__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getInstance(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getInstance__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getMaximumFractionDigits__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::getMaximumFractionDigits();
    else
      ret = This->getMaximumFractionDigits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getMaximumIntegerDigits__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::getMaximumIntegerDigits();
    else
      ret = This->getMaximumIntegerDigits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getMinimumFractionDigits__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::getMinimumFractionDigits();
    else
      ret = This->getMinimumFractionDigits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getMinimumIntegerDigits__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::getMinimumIntegerDigits();
    else
      ret = This->getMinimumIntegerDigits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getNumberInstance_INLRLocale__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getNumberInstance(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getPercentInstance__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getPercentInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_getPercentInstance_INLRLocale__LRNumberFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormat::getPercentInstance(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_isGroupingUsed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::isGroupingUsed();
    else
      ret = This->isGroupingUsed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_isParseIntegerOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NumberFormat::isParseIntegerOnly();
    else
      ret = This->isParseIntegerOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_parse_INLRString__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NumberFormat::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_parse_INLRString_INLRParsePosition__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NumberFormat::parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parseObject(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setGroupingUsed_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setGroupingUsed(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setGroupingUsed(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setMaximumFractionDigits_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setMaximumFractionDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMaximumFractionDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setMaximumIntegerDigits_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setMaximumIntegerDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMaximumIntegerDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setMinimumFractionDigits_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setMinimumFractionDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinimumFractionDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setMinimumIntegerDigits_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setMinimumIntegerDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinimumIntegerDigits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormat_method_setParseIntegerOnly_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NumberFormat::setParseIntegerOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setParseIntegerOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields_FRACTION_FIELD_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(NumberFormat::FRACTION_FIELD, flags);
    else
      NumberFormat::FRACTION_FIELD = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields_INTEGER_FIELD_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(NumberFormat::INTEGER_FIELD, flags);
    else
      NumberFormat::INTEGER_FIELD = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__groupingUsed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_groupingUsed, flags);
    else
      This->_groupingUsed = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__maxFractionDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxFractionDigits, flags);
    else
      This->_maxFractionDigits = ::acdk::lang::dmi::castTo< RByte>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__maximumFractionDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maximumFractionDigits, flags);
    else
      This->_maximumFractionDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__maximumIntegerDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maximumIntegerDigits, flags);
    else
      This->_maximumIntegerDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__minimumFractionDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minimumFractionDigits, flags);
    else
      This->_minimumFractionDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__minimumIntegerDigits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minimumIntegerDigits, flags);
    else
      This->_minimumIntegerDigits = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NumberFormat_fields__parseIntegerOnly_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NumberFormat* This = dmi_cast<NumberFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parseIntegerOnly, flags);
    else
      This->_parseIntegerOnly = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields_FRACTION_FIELD = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FRACTION_FIELD", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields_FRACTION_FIELD_accessor, // read/write access to this fields
  (void*)&NumberFormat::FRACTION_FIELD // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields_INTEGER_FIELD = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "INTEGER_FIELD", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields_INTEGER_FIELD_accessor, // read/write access to this fields
  (void*)&NumberFormat::INTEGER_FIELD // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__groupingUsed = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_groupingUsed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__groupingUsed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__maxFractionDigits = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxFractionDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByte::clazzInfo(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__maxFractionDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__maximumFractionDigits = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maximumFractionDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__maximumFractionDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__maximumIntegerDigits = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maximumIntegerDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__maximumIntegerDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__minimumFractionDigits = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minimumFractionDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__minimumFractionDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__minimumIntegerDigits = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minimumIntegerDigits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__minimumIntegerDigits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NumberFormat_fields__parseIntegerOnly = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parseIntegerOnly", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  NumberFormat_MetainfoWrapper::NumberFormat_fields__parseIntegerOnly_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NumberFormat_fields[] = 
{
  &NumberFormat_fields_FRACTION_FIELD,
  &NumberFormat_fields_INTEGER_FIELD,
  &NumberFormat_fields__groupingUsed,
  &NumberFormat_fields__maxFractionDigits,
  &NumberFormat_fields__maximumFractionDigits,
  &NumberFormat_fields__maximumIntegerDigits,
  &NumberFormat_fields__minimumFractionDigits,
  &NumberFormat_fields__minimumIntegerDigits,
  &NumberFormat_fields__parseIntegerOnly,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_u_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NumberFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_NumberFormat__LRNumberFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_NumberFormat__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_NumberFormat__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NumberFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NumberFormat::clazzInfo(), // return type
  "_0_NumberFormat", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_NumberFormat__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_NumberFormat__LRNumberFormat__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_equals_INLRObject__Z_args[] = 
{
  &NumberFormat_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_equals", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  NumberFormat_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_D_LRString__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_format_D_LRString__args[] = 
{
  &NumberFormat_methods_format_D_LRString__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_format_D_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_format_D_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_format", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_format_D_LRString__args, // the arguments
  0, //arguments count
  NumberFormat_methods_format_D_LRString__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_format_D_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number,
  &NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb,
  &NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_n_format", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  NumberFormat_methods_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_J_LRString__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_format_J_LRString__args[] = 
{
  &NumberFormat_methods_format_J_LRString__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_format_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_format_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_format", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_format_J_LRString__args, // the arguments
  0, //arguments count
  NumberFormat_methods_format_J_LRString__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_format_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_number,
  &NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_sb,
  &NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_o_format", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  NumberFormat_methods_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getAvailableLocales__LRObjectArrayImpl_RLocale___args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getAvailableLocales__LRObjectArrayImpl_RLocale___exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getAvailableLocales__LRObjectArrayImpl_RLocale__ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableLocales", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArrayImpl<RLocale>::clazzInfo(), // return type
  "_8_getAvailableLocales", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getAvailableLocales__LRObjectArrayImpl_RLocale___args, // the arguments
  0, //arguments count
  NumberFormat_methods_getAvailableLocales__LRObjectArrayImpl_RLocale___exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getAvailableLocales__LRObjectArrayImpl_RLocale___dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getCurrencyInstance__LRNumberFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getCurrencyInstance__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getCurrencyInstance__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrencyInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_4_getCurrencyInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getCurrencyInstance__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getCurrencyInstance__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getCurrencyInstance__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__args[] = 
{
  &NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getCurrencyInstance_INLRLocale__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrencyInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_5_getCurrencyInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getCurrencyInstance_INLRLocale__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getCurrencyInstance_INLRLocale__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__args[] = 
{
  &NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getInstance_INLRLocale__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_1_getInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getInstance_INLRLocale__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getInstance_INLRLocale__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getInstance__LRNumberFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getInstance__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getInstance__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_2_getInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getInstance__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getInstance__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getInstance__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getMaximumFractionDigits__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getMaximumFractionDigits__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getMaximumFractionDigits__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaximumFractionDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getMaximumFractionDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getMaximumFractionDigits__I_args, // the arguments
  0, //arguments count
  NumberFormat_methods_getMaximumFractionDigits__I_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getMaximumFractionDigits__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getMaximumIntegerDigits__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getMaximumIntegerDigits__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getMaximumIntegerDigits__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaximumIntegerDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getMaximumIntegerDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getMaximumIntegerDigits__I_args, // the arguments
  0, //arguments count
  NumberFormat_methods_getMaximumIntegerDigits__I_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getMaximumIntegerDigits__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getMinimumFractionDigits__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getMinimumFractionDigits__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getMinimumFractionDigits__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimumFractionDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getMinimumFractionDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getMinimumFractionDigits__I_args, // the arguments
  0, //arguments count
  NumberFormat_methods_getMinimumFractionDigits__I_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getMinimumFractionDigits__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getMinimumIntegerDigits__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getMinimumIntegerDigits__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getMinimumIntegerDigits__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimumIntegerDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getMinimumIntegerDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getMinimumIntegerDigits__I_args, // the arguments
  0, //arguments count
  NumberFormat_methods_getMinimumIntegerDigits__I_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getMinimumIntegerDigits__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__args[] = 
{
  &NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getNumberInstance_INLRLocale__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_3_getNumberInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getNumberInstance_INLRLocale__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getNumberInstance_INLRLocale__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getPercentInstance__LRNumberFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getPercentInstance__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getPercentInstance__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPercentInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_6_getPercentInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getPercentInstance__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getPercentInstance__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getPercentInstance__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__args[] = 
{
  &NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_getPercentInstance_INLRLocale__LRNumberFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPercentInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberFormat::clazzInfo(), // return type
  "_7_getPercentInstance", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__args, // the arguments
  0, //arguments count
  NumberFormat_methods_getPercentInstance_INLRLocale__LRNumberFormat__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_getPercentInstance_INLRLocale__LRNumberFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_hashCode", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_hashCode__I_args, // the arguments
  0, //arguments count
  NumberFormat_methods_hashCode__I_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_isGroupingUsed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_isGroupingUsed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_isGroupingUsed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isGroupingUsed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isGroupingUsed", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_isGroupingUsed__Z_args, // the arguments
  0, //arguments count
  NumberFormat_methods_isGroupingUsed__Z_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_isGroupingUsed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_isParseIntegerOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_isParseIntegerOnly__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_isParseIntegerOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isParseIntegerOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isParseIntegerOnly", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_isParseIntegerOnly__Z_args, // the arguments
  0, //arguments count
  NumberFormat_methods_isParseIntegerOnly__Z_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_isParseIntegerOnly__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_parse_INLRString__LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_parse_INLRString__LRNumber__args[] = 
{
  &NumberFormat_methods_parse_INLRString__LRNumber__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_parse_INLRString__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_parse_INLRString__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_p_parse", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_parse_INLRString__LRNumber__args, // the arguments
  0, //arguments count
  NumberFormat_methods_parse_INLRString__LRNumber__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_parse_INLRString__LRNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_pp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__args[] = 
{
  &NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_str,
  &NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__arg_pp,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_parse_INLRString_INLRParsePosition__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_q_parse", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__args, // the arguments
  0, //arguments count
  NumberFormat_methods_parse_INLRString_INLRParsePosition__LRNumber__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_parse_INLRString_INLRParsePosition__LRNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__args[] = 
{
  &NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_str,
  &NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__arg_pp,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_parseObject_INLRString_INLRParsePosition__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_r_parseObject", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__args, // the arguments
  0, //arguments count
  NumberFormat_methods_parseObject_INLRString_INLRParsePosition__LRObject__exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_parseObject_INLRString_INLRParsePosition__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setGroupingUsed_Z_V_arg_groupingUsed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "groupingUsed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setGroupingUsed_Z_V_args[] = 
{
  &NumberFormat_methods_setGroupingUsed_Z_V_arg_groupingUsed,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setGroupingUsed_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setGroupingUsed_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGroupingUsed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setGroupingUsed", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setGroupingUsed_Z_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setGroupingUsed_Z_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setGroupingUsed_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setMaximumFractionDigits_I_V_arg_maximumFractionDigits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maximumFractionDigits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setMaximumFractionDigits_I_V_args[] = 
{
  &NumberFormat_methods_setMaximumFractionDigits_I_V_arg_maximumFractionDigits,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setMaximumFractionDigits_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setMaximumFractionDigits_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaximumFractionDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setMaximumFractionDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setMaximumFractionDigits_I_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setMaximumFractionDigits_I_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setMaximumFractionDigits_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setMaximumIntegerDigits_I_V_arg_maximumIntegerDigits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maximumIntegerDigits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setMaximumIntegerDigits_I_V_args[] = 
{
  &NumberFormat_methods_setMaximumIntegerDigits_I_V_arg_maximumIntegerDigits,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setMaximumIntegerDigits_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setMaximumIntegerDigits_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaximumIntegerDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setMaximumIntegerDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setMaximumIntegerDigits_I_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setMaximumIntegerDigits_I_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setMaximumIntegerDigits_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setMinimumFractionDigits_I_V_arg_minimumFractionDigits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minimumFractionDigits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setMinimumFractionDigits_I_V_args[] = 
{
  &NumberFormat_methods_setMinimumFractionDigits_I_V_arg_minimumFractionDigits,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setMinimumFractionDigits_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setMinimumFractionDigits_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinimumFractionDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setMinimumFractionDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setMinimumFractionDigits_I_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setMinimumFractionDigits_I_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setMinimumFractionDigits_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setMinimumIntegerDigits_I_V_arg_minimumIntegerDigits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minimumIntegerDigits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setMinimumIntegerDigits_I_V_args[] = 
{
  &NumberFormat_methods_setMinimumIntegerDigits_I_V_arg_minimumIntegerDigits,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setMinimumIntegerDigits_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setMinimumIntegerDigits_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinimumIntegerDigits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setMinimumIntegerDigits", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setMinimumIntegerDigits_I_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setMinimumIntegerDigits_I_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setMinimumIntegerDigits_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormat_methods_setParseIntegerOnly_Z_V_arg_parseIntegerOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parseIntegerOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormat_methods_setParseIntegerOnly_Z_V_args[] = 
{
  &NumberFormat_methods_setParseIntegerOnly_Z_V_arg_parseIntegerOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormat_methods_setParseIntegerOnly_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormat_method_setParseIntegerOnly_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParseIntegerOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setParseIntegerOnly", // alternative name of method
  -1, // altlabelHashCode
  NumberFormat_methods_setParseIntegerOnly_Z_V_args, // the arguments
  0, //arguments count
  NumberFormat_methods_setParseIntegerOnly_Z_V_exceptions, // the declared exceptions
  NumberFormat_MetainfoWrapper::NumberFormat_method_setParseIntegerOnly_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NumberFormat_methods[] = 
{
  &NumberFormat_method_GetClass__L_acdk_lang_RClass_,
  &NumberFormat_method_NumberFormat__LRNumberFormat_,
  &NumberFormat_method_equals_INLRObject__Z,
  &NumberFormat_method_format_D_LRString_,
  &NumberFormat_method_format_JINLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &NumberFormat_method_format_J_LRString_,
  &NumberFormat_method_format_DINLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &NumberFormat_method_getAvailableLocales__LRObjectArrayImpl_RLocale__,
  &NumberFormat_method_getCurrencyInstance__LRNumberFormat_,
  &NumberFormat_method_getCurrencyInstance_INLRLocale__LRNumberFormat_,
  &NumberFormat_method_getInstance_INLRLocale__LRNumberFormat_,
  &NumberFormat_method_getInstance__LRNumberFormat_,
  &NumberFormat_method_getMaximumFractionDigits__I,
  &NumberFormat_method_getMaximumIntegerDigits__I,
  &NumberFormat_method_getMinimumFractionDigits__I,
  &NumberFormat_method_getMinimumIntegerDigits__I,
  &NumberFormat_method_getNumberInstance_INLRLocale__LRNumberFormat_,
  &NumberFormat_method_getPercentInstance__LRNumberFormat_,
  &NumberFormat_method_getPercentInstance_INLRLocale__LRNumberFormat_,
  &NumberFormat_method_hashCode__I,
  &NumberFormat_method_isGroupingUsed__Z,
  &NumberFormat_method_isParseIntegerOnly__Z,
  &NumberFormat_method_parse_INLRString__LRNumber_,
  &NumberFormat_method_parse_INLRString_INLRParsePosition__LRNumber_,
  &NumberFormat_method_parseObject_INLRString_INLRParsePosition__LRObject_,
  &NumberFormat_method_setGroupingUsed_Z_V,
  &NumberFormat_method_setMaximumFractionDigits_I_V,
  &NumberFormat_method_setMaximumIntegerDigits_I_V,
  &NumberFormat_method_setMinimumFractionDigits_I_V,
  &NumberFormat_method_setMinimumIntegerDigits_I_V,
  &NumberFormat_method_setParseIntegerOnly_Z_V,
  0
};


struct NumberFormat_MetaInfoInitializer
{  NumberFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NumberFormat::clazzInfo();
    ci->fields =  _NumberFormat_fields;
    ci->methods =  _NumberFormat_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NumberFormat_MetaInfoInitializer NumberFormat_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ParseException_create_array(int length)
{
  return new ObjectArrayImpl<RParseException>(length);
}

//static
::acdk::lang::RObject
ParseException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParseException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParseException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_ParseException__LRParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParseException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_ParseException_INLRString__LRParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParseException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_ParseException_INLRString_I_LRParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParseException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_getErrorOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseException* This = dmi_cast<ParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParseException::getErrorOffset();
    else
      ret = This->getErrorOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseException_fields__offset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseException* This = dmi_cast<ParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_offset, flags);
    else
      This->_offset = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};


void ThrowException_ParseException(IN(::acdk::lang::RThrowable) ex)
{
  throw RParseException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo ParseException_fields__offset = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_offset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ParseException_MetainfoWrapper::ParseException_fields__offset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParseException_fields[] = 
{
  &ParseException_fields__offset,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParseException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_ParseException__LRParseException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_ParseException__LRParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_ParseException__LRParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseException::clazzInfo(), // return type
  "_0_ParseException", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_ParseException__LRParseException__args, // the arguments
  0, //arguments count
  ParseException_methods_ParseException__LRParseException__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_ParseException__LRParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString__LRParseException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_ParseException_INLRString__LRParseException__args[] = 
{
  &ParseException_methods_ParseException_INLRString__LRParseException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_ParseException_INLRString__LRParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_ParseException_INLRString__LRParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseException::clazzInfo(), // return type
  "_1_ParseException", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_ParseException_INLRString__LRParseException__args, // the arguments
  0, //arguments count
  ParseException_methods_ParseException_INLRString__LRParseException__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_ParseException_INLRString__LRParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString_I_LRParseException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString_I_LRParseException__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_ParseException_INLRString_I_LRParseException__args[] = 
{
  &ParseException_methods_ParseException_INLRString_I_LRParseException__arg_msg,
  &ParseException_methods_ParseException_INLRString_I_LRParseException__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_ParseException_INLRString_I_LRParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_ParseException_INLRString_I_LRParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseException::clazzInfo(), // return type
  "_2_ParseException", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_ParseException_INLRString_I_LRParseException__args, // the arguments
  0, //arguments count
  ParseException_methods_ParseException_INLRString_I_LRParseException__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_ParseException_INLRString_I_LRParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_getErrorOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_getErrorOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_getErrorOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getErrorOffset", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_getErrorOffset__I_args, // the arguments
  0, //arguments count
  ParseException_methods_getErrorOffset__I_exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_getErrorOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParseException_methods[] = 
{
  &ParseException_method_GetClass__L_acdk_lang_RClass_,
  &ParseException_method_ParseException__LRParseException_,
  &ParseException_method_ParseException_INLRString__LRParseException_,
  &ParseException_method_ParseException_INLRString_I_LRParseException_,
  &ParseException_method_getErrorOffset__I,
  0
};


struct ParseException_MetaInfoInitializer
{  ParseException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParseException::clazzInfo();
    ci->fields =  _ParseException_fields;
    ci->methods =  _ParseException_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParseException_MetaInfoInitializer ParseException_MetaInfoInitializer_staticinstance__;


struct ParseException_clazzInfo_ClazzAttributesResInitializer2
{
  ParseException_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ParseException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ParseException));
  }
};

ParseException_clazzInfo_ClazzAttributesResInitializer2 ParseException_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ParsePosition_create_array(int length)
{
  return new ObjectArrayImpl<RParsePosition>(length);
}

//static
::acdk::lang::RObject
ParsePosition_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParsePosition_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParsePosition::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_ParsePosition__LRParsePosition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParsePosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_ParsePosition_I_LRParsePosition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParsePosition(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParsePosition::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_getErrorIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParsePosition::getErrorIndex();
    else
      ret = This->getErrorIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_getIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParsePosition::getIndex();
    else
      ret = This->getIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_setErrorIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParsePosition::setErrorIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setErrorIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_setIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParsePosition::setIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParsePosition_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParsePosition::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParsePosition_fields__errorIndex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errorIndex, flags);
    else
      This->_errorIndex = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParsePosition_fields__index_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParsePosition* This = dmi_cast<ParsePosition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_index, flags);
    else
      This->_index = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ParsePosition_fields__errorIndex = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errorIndex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ParsePosition_MetainfoWrapper::ParsePosition_fields__errorIndex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParsePosition_fields__index = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_index", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ParsePosition_MetainfoWrapper::ParsePosition_fields__index_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParsePosition_fields[] = 
{
  &ParsePosition_fields__errorIndex,
  &ParsePosition_fields__index,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParsePosition_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_ParsePosition__LRParsePosition__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_ParsePosition__LRParsePosition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_ParsePosition__LRParsePosition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParsePosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParsePosition::clazzInfo(), // return type
  "_0_ParsePosition", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_ParsePosition__LRParsePosition__args, // the arguments
  0, //arguments count
  ParsePosition_methods_ParsePosition__LRParsePosition__exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_ParsePosition__LRParsePosition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParsePosition_methods_ParsePosition_I_LRParsePosition__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_ParsePosition_I_LRParsePosition__args[] = 
{
  &ParsePosition_methods_ParsePosition_I_LRParsePosition__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_ParsePosition_I_LRParsePosition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_ParsePosition_I_LRParsePosition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParsePosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParsePosition::clazzInfo(), // return type
  "_1_ParsePosition", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_ParsePosition_I_LRParsePosition__args, // the arguments
  0, //arguments count
  ParsePosition_methods_ParsePosition_I_LRParsePosition__exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_ParsePosition_I_LRParsePosition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParsePosition_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_equals_INLRObject__Z_args[] = 
{
  &ParsePosition_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  ParsePosition_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_getErrorIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_getErrorIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_getErrorIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getErrorIndex", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_getErrorIndex__I_args, // the arguments
  0, //arguments count
  ParsePosition_methods_getErrorIndex__I_exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_getErrorIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_getIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_getIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_getIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getIndex", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_getIndex__I_args, // the arguments
  0, //arguments count
  ParsePosition_methods_getIndex__I_exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_getIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParsePosition_methods_setErrorIndex_I_V_arg_errorIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "errorIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_setErrorIndex_I_V_args[] = 
{
  &ParsePosition_methods_setErrorIndex_I_V_arg_errorIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_setErrorIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_setErrorIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setErrorIndex", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_setErrorIndex_I_V_args, // the arguments
  0, //arguments count
  ParsePosition_methods_setErrorIndex_I_V_exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_setErrorIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParsePosition_methods_setIndex_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_setIndex_I_V_args[] = 
{
  &ParsePosition_methods_setIndex_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_setIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_setIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setIndex", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_setIndex_I_V_args, // the arguments
  0, //arguments count
  ParsePosition_methods_setIndex_I_V_exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_setIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParsePosition_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParsePosition_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParsePosition_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_toString", // alternative name of method
  -1, // altlabelHashCode
  ParsePosition_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ParsePosition_methods_toString__LRString__exceptions, // the declared exceptions
  ParsePosition_MetainfoWrapper::ParsePosition_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParsePosition_methods[] = 
{
  &ParsePosition_method_GetClass__L_acdk_lang_RClass_,
  &ParsePosition_method_ParsePosition__LRParsePosition_,
  &ParsePosition_method_ParsePosition_I_LRParsePosition_,
  &ParsePosition_method_equals_INLRObject__Z,
  &ParsePosition_method_getErrorIndex__I,
  &ParsePosition_method_getIndex__I,
  &ParsePosition_method_setErrorIndex_I_V,
  &ParsePosition_method_setIndex_I_V,
  &ParsePosition_method_toString__LRString_,
  0
};


struct ParsePosition_MetaInfoInitializer
{  ParsePosition_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParsePosition::clazzInfo();
    ci->fields =  _ParsePosition_fields;
    ci->methods =  _ParsePosition_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParsePosition_MetaInfoInitializer ParsePosition_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 


//static
::acdk::lang::RObject
RegExp_create_array(int length)
{
  return new ObjectArrayImpl<RRegExp>(length);
}

//static
::acdk::lang::RObject
RegExp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RegExp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RegExp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_RegExp_INLRString_I_LRRegExp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RegExp(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_RegExp_INLRString__LRRegExp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RegExp(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_escape_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RegExp::escape(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_match_INLRString_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegExp::match(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->match(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_match_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegExp::match(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->match(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_matchPos_INLRString_I_LRRegExpMatchPositionArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegExp::matchPos(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->matchPos(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_matchPos_INLRString__LRRegExpMatchPositionArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegExp::matchPos(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->matchPos(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_matchSize_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RegExp::matchSize(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->matchSize(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_matchSize_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RegExp::matchSize(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->matchSize(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_replace_INLRString_INLRString_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegExp::replace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_test_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RegExp::test(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->test(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegExp_method_test_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RegExp::test(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->test(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RegExp_fields__errorCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RegExp* This = dmi_cast<RegExp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errorCode, flags);
    else
      This->_errorCode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RegExp_fields__errorCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errorCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RegExp_MetainfoWrapper::RegExp_fields__errorCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RegExp_fields[] = 
{
  &RegExp_fields__errorCode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RegExp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_RegExp_INLRString_I_LRRegExp__arg_expression = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expression", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_RegExp_INLRString_I_LRRegExp__arg_cflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_RegExp_INLRString_I_LRRegExp__args[] = 
{
  &RegExp_methods_RegExp_INLRString_I_LRRegExp__arg_expression,
  &RegExp_methods_RegExp_INLRString_I_LRRegExp__arg_cflags,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_RegExp_INLRString_I_LRRegExp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_RegExp_INLRString_I_LRRegExp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RegExp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegExp::clazzInfo(), // return type
  "_0_RegExp", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_RegExp_INLRString_I_LRRegExp__args, // the arguments
  0, //arguments count
  RegExp_methods_RegExp_INLRString_I_LRRegExp__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_RegExp_INLRString_I_LRRegExp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_RegExp_INLRString__LRRegExp__arg_expression = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expression", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_RegExp_INLRString__LRRegExp__args[] = 
{
  &RegExp_methods_RegExp_INLRString__LRRegExp__arg_expression,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_RegExp_INLRString__LRRegExp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_RegExp_INLRString__LRRegExp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RegExp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegExp::clazzInfo(), // return type
  "_1_RegExp", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_RegExp_INLRString__LRRegExp__args, // the arguments
  0, //arguments count
  RegExp_methods_RegExp_INLRString__LRRegExp__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_RegExp_INLRString__LRRegExp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_escape_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_escape_INLRString__LRString__args[] = 
{
  &RegExp_methods_escape_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_escape_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_escape_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "escape", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_escape", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_escape_INLRString__LRString__args, // the arguments
  0, //arguments count
  RegExp_methods_escape_INLRString__LRString__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_escape_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_match_INLRString_I_LRStringArray__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_match_INLRString_I_LRStringArray__arg_eflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_match_INLRString_I_LRStringArray__args[] = 
{
  &RegExp_methods_match_INLRString_I_LRStringArray__arg_str,
  &RegExp_methods_match_INLRString_I_LRStringArray__arg_eflags,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_match_INLRString_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_match_INLRString_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "match", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_6_match", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_match_INLRString_I_LRStringArray__args, // the arguments
  0, //arguments count
  RegExp_methods_match_INLRString_I_LRStringArray__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_match_INLRString_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_match_INLRString__LRStringArray__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_match_INLRString__LRStringArray__args[] = 
{
  &RegExp_methods_match_INLRString__LRStringArray__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_match_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_match_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "match", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_7_match", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_match_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  RegExp_methods_match_INLRString__LRStringArray__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_match_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__arg_eflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__args[] = 
{
  &RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__arg_str,
  &RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__arg_eflags,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_matchPos_INLRString_I_LRRegExpMatchPositionArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "matchPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegExpMatchPositionArray::clazzInfo(), // return type
  "_8_matchPos", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__args, // the arguments
  0, //arguments count
  RegExp_methods_matchPos_INLRString_I_LRRegExpMatchPositionArray__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_matchPos_INLRString_I_LRRegExpMatchPositionArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__args[] = 
{
  &RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_matchPos_INLRString__LRRegExpMatchPositionArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "matchPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegExpMatchPositionArray::clazzInfo(), // return type
  "_9_matchPos", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__args, // the arguments
  0, //arguments count
  RegExp_methods_matchPos_INLRString__LRRegExpMatchPositionArray__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_matchPos_INLRString__LRRegExpMatchPositionArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchSize_INLRString_I_I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchSize_INLRString_I_I_arg_eflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_matchSize_INLRString_I_I_args[] = 
{
  &RegExp_methods_matchSize_INLRString_I_I_arg_text,
  &RegExp_methods_matchSize_INLRString_I_I_arg_eflags,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_matchSize_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_matchSize_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "matchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_matchSize", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_matchSize_INLRString_I_I_args, // the arguments
  0, //arguments count
  RegExp_methods_matchSize_INLRString_I_I_exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_matchSize_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_matchSize_INLRString__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_matchSize_INLRString__I_args[] = 
{
  &RegExp_methods_matchSize_INLRString__I_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_matchSize_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_matchSize_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "matchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_matchSize", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_matchSize_INLRString__I_args, // the arguments
  0, //arguments count
  RegExp_methods_matchSize_INLRString__I_exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_matchSize_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_with = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "with", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_replaceAll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "replaceAll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_replace_INLRString_INLRString_Z_LRString__args[] = 
{
  &RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_text,
  &RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_with,
  &RegExp_methods_replace_INLRString_INLRString_Z_LRString__arg_replaceAll,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_replace_INLRString_INLRString_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_replace_INLRString_INLRString_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_replace", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_replace_INLRString_INLRString_Z_LRString__args, // the arguments
  0, //arguments count
  RegExp_methods_replace_INLRString_INLRString_Z_LRString__exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_replace_INLRString_INLRString_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_test_INLRString_I_Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_test_INLRString_I_Z_arg_eflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_test_INLRString_I_Z_args[] = 
{
  &RegExp_methods_test_INLRString_I_Z_arg_str,
  &RegExp_methods_test_INLRString_I_Z_arg_eflags,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_test_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_test_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "test", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_test", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_test_INLRString_I_Z_args, // the arguments
  0, //arguments count
  RegExp_methods_test_INLRString_I_Z_exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_test_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegExp_methods_test_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegExp_methods_test_INLRString__Z_args[] = 
{
  &RegExp_methods_test_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* RegExp_methods_test_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegExp_method_test_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "test", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_test", // alternative name of method
  -1, // altlabelHashCode
  RegExp_methods_test_INLRString__Z_args, // the arguments
  0, //arguments count
  RegExp_methods_test_INLRString__Z_exceptions, // the declared exceptions
  RegExp_MetainfoWrapper::RegExp_method_test_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RegExp_methods[] = 
{
  &RegExp_method_GetClass__L_acdk_lang_RClass_,
  &RegExp_method_RegExp_INLRString_I_LRRegExp_,
  &RegExp_method_RegExp_INLRString__LRRegExp_,
  &RegExp_method_escape_INLRString__LRString_,
  &RegExp_method_match_INLRString_I_LRStringArray_,
  &RegExp_method_match_INLRString__LRStringArray_,
  &RegExp_method_matchPos_INLRString_I_LRRegExpMatchPositionArray_,
  &RegExp_method_matchPos_INLRString__LRRegExpMatchPositionArray_,
  &RegExp_method_matchSize_INLRString_I_I,
  &RegExp_method_matchSize_INLRString__I,
  &RegExp_method_replace_INLRString_INLRString_Z_LRString_,
  &RegExp_method_test_INLRString_I_Z,
  &RegExp_method_test_INLRString__Z,
  0
};


struct RegExp_MetaInfoInitializer
{  RegExp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RegExp::clazzInfo();
    ci->fields =  _RegExp_fields;
    ci->methods =  _RegExp_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RegExp_MetaInfoInitializer RegExp_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


namespace acdk { 
namespace text { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SimpleDateFormat_create_array(int length)
{
  return new ObjectArrayImpl<RSimpleDateFormat>(length);
}

//static
::acdk::lang::RObject
SimpleDateFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SimpleDateFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SimpleDateFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_SimpleDateFormat__LRSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleDateFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_SimpleDateFormat_INLRString__LRSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleDateFormat(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleDateFormat(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDateFormatSymbols>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleDateFormat(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_applyLocalizedPattern_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleDateFormat::applyLocalizedPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->applyLocalizedPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_applyPattern_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleDateFormat::applyPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->applyPattern(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleDateFormat::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_format_INLacdk_util_RDate__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::format(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::format(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[1], dc), ::acdk::lang::dmi::castTo< RFieldPosition>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_get2DigitYearStart__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::get2DigitYearStart();
    else
        ret = (::acdk::lang::RObject)This->get2DigitYearStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_getDateFormatSymbols__LRDateFormatSymbols__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::getDateFormatSymbols();
    else
        ret = (::acdk::lang::RObject)This->getDateFormatSymbols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleDateFormat::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_parse_INLRString__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RParsePosition>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_set2DigitYearStart_INLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleDateFormat::set2DigitYearStart(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc));
    else
        This->set2DigitYearStart(::acdk::lang::dmi::castTo< acdk::util::RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_setDateFormatSymbols_INLRDateFormatSymbols__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleDateFormat::setDateFormatSymbols(::acdk::lang::dmi::castTo< RDateFormatSymbols>(args[0], dc));
    else
        This->setDateFormatSymbols(::acdk::lang::dmi::castTo< RDateFormatSymbols>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_toLocalizedPattern__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::toLocalizedPattern();
    else
        ret = (::acdk::lang::RObject)This->toLocalizedPattern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleDateFormat_method_toPattern__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleDateFormat::toPattern();
    else
        ret = (::acdk::lang::RObject)This->toPattern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleDateFormat_fields__format_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_format, flags);
    else
      This->_format = ::acdk::lang::dmi::castTo< RDateFormatSymbols>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleDateFormat_fields__loc_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_loc, flags);
    else
      This->_loc = ::acdk::lang::dmi::castTo< acdk::util::RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleDateFormat_fields__pattern_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleDateFormat* This = dmi_cast<SimpleDateFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pattern, flags);
    else
      This->_pattern = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SimpleDateFormat_fields__format = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_format", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormatSymbols::clazzInfo(),
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_fields__format_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleDateFormat_fields__loc = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_loc", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo(),
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_fields__loc_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleDateFormat_fields__pattern = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pattern", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_fields__pattern_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SimpleDateFormat_fields[] = 
{
  &SimpleDateFormat_fields__format,
  &SimpleDateFormat_fields__loc,
  &SimpleDateFormat_fields__pattern,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_SimpleDateFormat__LRSimpleDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_SimpleDateFormat__LRSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_SimpleDateFormat__LRSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleDateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleDateFormat::clazzInfo(), // return type
  "_0_SimpleDateFormat", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_SimpleDateFormat__LRSimpleDateFormat__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_SimpleDateFormat__LRSimpleDateFormat__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_SimpleDateFormat__LRSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__args[] = 
{
  &SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_SimpleDateFormat_INLRString__LRSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleDateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleDateFormat::clazzInfo(), // return type
  "_1_SimpleDateFormat", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_SimpleDateFormat_INLRString__LRSimpleDateFormat__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_SimpleDateFormat_INLRString__LRSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__arg_formatData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "formatData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormatSymbols::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__args[] = 
{
  &SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__arg_pattern,
  &SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__arg_formatData,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleDateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleDateFormat::clazzInfo(), // return type
  "_2_SimpleDateFormat", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__arg_loc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__args[] = 
{
  &SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__arg_pattern,
  &SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__arg_loc,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleDateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleDateFormat::clazzInfo(), // return type
  "_3_SimpleDateFormat", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_args[] = 
{
  &SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_applyLocalizedPattern_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyLocalizedPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_applyLocalizedPattern", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_applyLocalizedPattern_INLRString__V_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_applyLocalizedPattern_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_applyPattern_INLRString__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_applyPattern_INLRString__V_args[] = 
{
  &SimpleDateFormat_methods_applyPattern_INLRString__V_arg_pattern,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_applyPattern_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_applyPattern_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_applyPattern", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_applyPattern_INLRString__V_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_applyPattern_INLRString__V_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_applyPattern_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_clone", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_clone__LRObject__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_equals_INLRObject__Z_args[] = 
{
  &SimpleDateFormat_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__args[] = 
{
  &SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_format_INLacdk_util_RDate__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_format", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_format_INLacdk_util_RDate__LRString__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_format_INLacdk_util_RDate__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toAppendTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFieldPosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args[] = 
{
  &SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_date,
  &SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_toAppendTo,
  &SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_9_format", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_get2DigitYearStart__Lacdk_util_RDate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_get2DigitYearStart__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_get2DigitYearStart__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get2DigitYearStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_a_get2DigitYearStart", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_get2DigitYearStart__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_get2DigitYearStart__Lacdk_util_RDate__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_get2DigitYearStart__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_getDateFormatSymbols__LRDateFormatSymbols__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_getDateFormatSymbols__LRDateFormatSymbols__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_getDateFormatSymbols__LRDateFormatSymbols_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateFormatSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormatSymbols::clazzInfo(), // return type
  "_b_getDateFormatSymbols", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_getDateFormatSymbols__LRDateFormatSymbols__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_getDateFormatSymbols__LRDateFormatSymbols__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_getDateFormatSymbols__LRDateFormatSymbols__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_hashCode", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_hashCode__I_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_hashCode__I_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__args[] = 
{
  &SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_parse_INLRString__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_d_parse", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_parse_INLRString__Lacdk_util_RDate__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_parse_INLRString__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParsePosition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__args[] = 
{
  &SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__arg_text,
  &SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_parse_INLRString_INLRParsePosition__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_e_parse", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_parse_INLRString_INLRParsePosition__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_arg_startDate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "startDate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_args[] = 
{
  &SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_arg_startDate,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_set2DigitYearStart_INLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set2DigitYearStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_set2DigitYearStart", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_set2DigitYearStart_INLacdk_util_RDate__V_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_set2DigitYearStart_INLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_arg_newFormatSymbols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newFormatSymbols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDateFormatSymbols::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_args[] = 
{
  &SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_arg_newFormatSymbols,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_setDateFormatSymbols_INLRDateFormatSymbols__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDateFormatSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setDateFormatSymbols", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_setDateFormatSymbols_INLRDateFormatSymbols__V_exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_setDateFormatSymbols_INLRDateFormatSymbols__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_toLocalizedPattern__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_toLocalizedPattern__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_toLocalizedPattern__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLocalizedPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_toLocalizedPattern", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_toLocalizedPattern__LRString__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_toLocalizedPattern__LRString__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_toLocalizedPattern__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleDateFormat_methods_toPattern__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleDateFormat_methods_toPattern__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleDateFormat_method_toPattern__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_toPattern", // alternative name of method
  -1, // altlabelHashCode
  SimpleDateFormat_methods_toPattern__LRString__args, // the arguments
  0, //arguments count
  SimpleDateFormat_methods_toPattern__LRString__exceptions, // the declared exceptions
  SimpleDateFormat_MetainfoWrapper::SimpleDateFormat_method_toPattern__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SimpleDateFormat_methods[] = 
{
  &SimpleDateFormat_method_GetClass__L_acdk_lang_RClass_,
  &SimpleDateFormat_method_SimpleDateFormat__LRSimpleDateFormat_,
  &SimpleDateFormat_method_SimpleDateFormat_INLRString__LRSimpleDateFormat_,
  &SimpleDateFormat_method_SimpleDateFormat_INLRString_INLRDateFormatSymbols__LRSimpleDateFormat_,
  &SimpleDateFormat_method_SimpleDateFormat_INLRString_INLacdk_util_RLocale__LRSimpleDateFormat_,
  &SimpleDateFormat_method_applyLocalizedPattern_INLRString__V,
  &SimpleDateFormat_method_applyPattern_INLRString__V,
  &SimpleDateFormat_method_clone__LRObject_,
  &SimpleDateFormat_method_equals_INLRObject__Z,
  &SimpleDateFormat_method_format_INLacdk_util_RDate__LRString_,
  &SimpleDateFormat_method_format_INLacdk_util_RDate_INLRStringBuffer_INLRFieldPosition__LRStringBuffer_,
  &SimpleDateFormat_method_get2DigitYearStart__Lacdk_util_RDate_,
  &SimpleDateFormat_method_getDateFormatSymbols__LRDateFormatSymbols_,
  &SimpleDateFormat_method_hashCode__I,
  &SimpleDateFormat_method_parse_INLRString__Lacdk_util_RDate_,
  &SimpleDateFormat_method_parse_INLRString_INLRParsePosition__Lacdk_util_RDate_,
  &SimpleDateFormat_method_set2DigitYearStart_INLacdk_util_RDate__V,
  &SimpleDateFormat_method_setDateFormatSymbols_INLRDateFormatSymbols__V,
  &SimpleDateFormat_method_toLocalizedPattern__LRString_,
  &SimpleDateFormat_method_toPattern__LRString_,
  0
};


struct SimpleDateFormat_MetaInfoInitializer
{  SimpleDateFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SimpleDateFormat::clazzInfo();
    ci->fields =  _SimpleDateFormat_fields;
    ci->methods =  _SimpleDateFormat_methods;
    ci->_scopeParent = acdk_text_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SimpleDateFormat_MetaInfoInitializer SimpleDateFormat_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace text


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) text_dummyExportFunc() {}
#endif

