// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../boot.h"
#include "../boot.h"
#include "../boot_all.h"
#include "../Config.h"
#include "../HelloWorldClass.h"
#include "../HelloWorldInterface.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_boot_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "boot", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_boot_unitInfo(&acdk_boot_unitInfo);


namespace acdk { 
namespace boot { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
HelloWorldClass_create_array(int length)
{
  return new ObjectArrayImpl<RHelloWorldClass>(length);
}

//static
::acdk::lang::RObject
HelloWorldClass_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HelloWorldClass_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldClass_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HelloWorldClass::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldClass_method_HelloWorldClass_INLRString__LRHelloWorldClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HelloWorldClass((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldClass_method_getGreetings__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelloWorldClass* This = dmi_cast<HelloWorldClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HelloWorldClass::getGreetings();
    else
        ret = (::acdk::lang::RObject)This->getGreetings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldClass_method_sayHello_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelloWorldClass* This = dmi_cast<HelloWorldClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HelloWorldClass::sayHello((RString)args[0].getObjectVar());
    else
        This->sayHello((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HelloWorldClass_fields__greetings_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HelloWorldClass* This = dmi_cast<HelloWorldClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_greetings, flags);
    else
      This->_greetings = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HelloWorldClass_fields__ival_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HelloWorldClass* This = dmi_cast<HelloWorldClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ival, flags);
    else
      This->_ival = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HelloWorldClass_fields__greetings = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_greetings", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_fields__greetings_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HelloWorldClass_fields__ival = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ival", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_fields__ival_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HelloWorldClass_fields[] = 
{
  &HelloWorldClass_fields__greetings,
  &HelloWorldClass_fields__ival,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldClass_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldClass_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldClass_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldClass_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HelloWorldClass_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__args[] = 
{
  &HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldClass_method_HelloWorldClass_INLRString__LRHelloWorldClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HelloWorldClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HelloWorldClass::clazzInfo(), // return type
  "_0_HelloWorldClass", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__args, // the arguments
  0, //arguments count
  HelloWorldClass_methods_HelloWorldClass_INLRString__LRHelloWorldClass__exceptions, // the declared exceptions
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_method_HelloWorldClass_INLRString__LRHelloWorldClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldClass_methods_getGreetings__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldClass_methods_getGreetings__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldClass_method_getGreetings__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreetings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getGreetings", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldClass_methods_getGreetings__LRString__args, // the arguments
  0, //arguments count
  HelloWorldClass_methods_getGreetings__LRString__exceptions, // the declared exceptions
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_method_getGreetings__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelloWorldClass_methods_sayHello_INLRString__V_arg_username = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "username", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldClass_methods_sayHello_INLRString__V_args[] = 
{
  &HelloWorldClass_methods_sayHello_INLRString__V_arg_username,
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldClass_methods_sayHello_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldClass_method_sayHello_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sayHello", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_sayHello", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldClass_methods_sayHello_INLRString__V_args, // the arguments
  0, //arguments count
  HelloWorldClass_methods_sayHello_INLRString__V_exceptions, // the declared exceptions
  HelloWorldClass_MetainfoWrapper::HelloWorldClass_method_sayHello_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HelloWorldClass_methods[] = 
{
  &HelloWorldClass_method_GetClass__L_acdk_lang_RClass_,
  &HelloWorldClass_method_HelloWorldClass_INLRString__LRHelloWorldClass_,
  &HelloWorldClass_method_getGreetings__LRString_,
  &HelloWorldClass_method_sayHello_INLRString__V,
  0
};


struct HelloWorldClass_MetaInfoInitializer
{  HelloWorldClass_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HelloWorldClass::clazzInfo();
    ci->fields =  _HelloWorldClass_fields;
    ci->methods =  _HelloWorldClass_methods;
    ci->_scopeParent = acdk_boot_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HelloWorldClass_MetaInfoInitializer HelloWorldClass_MetaInfoInitializer_staticinstance__;


struct HelloWorldClass_clazzInfo_ClazzAttributesResInitializer1
{
  HelloWorldClass_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)HelloWorldClass::clazzInfo(), "Key1", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("Val1", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)HelloWorldClass::clazzInfo(), "Key2", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("Val2", false));
  }
};

HelloWorldClass_clazzInfo_ClazzAttributesResInitializer1 HelloWorldClass_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace boot


namespace acdk { 
namespace boot { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
HelloWorldInterface_create_array(int length)
{
  return new ObjectArrayImpl<RHelloWorldInterface>(length);
}

//static
::acdk::lang::RObject
HelloWorldInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HelloWorldInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HelloWorldInterface::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldInterface_method_getGreetings__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelloWorldInterface* This = dmi_cast<HelloWorldInterface>(This_);
    ret = (::acdk::lang::RObject)This->getGreetings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HelloWorldInterface_method_sayHello_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HelloWorldInterface* This = dmi_cast<HelloWorldInterface>(This_);
    This->sayHello((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _HelloWorldInterface_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HelloWorldInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HelloWorldInterface_MetainfoWrapper::HelloWorldInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldInterface_methods_getGreetings__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldInterface_methods_getGreetings__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldInterface_method_getGreetings__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreetings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getGreetings", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldInterface_methods_getGreetings__LRString__args, // the arguments
  0, //arguments count
  HelloWorldInterface_methods_getGreetings__LRString__exceptions, // the declared exceptions
  HelloWorldInterface_MetainfoWrapper::HelloWorldInterface_method_getGreetings__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HelloWorldInterface_methods_sayHello_INLRString__V_arg_username = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "username", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HelloWorldInterface_methods_sayHello_INLRString__V_args[] = 
{
  &HelloWorldInterface_methods_sayHello_INLRString__V_arg_username,
  0
};

::acdk::lang::dmi::ClazzInfo* HelloWorldInterface_methods_sayHello_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HelloWorldInterface_method_sayHello_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sayHello", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_sayHello", // alternative name of method
  -1, // altlabelHashCode
  HelloWorldInterface_methods_sayHello_INLRString__V_args, // the arguments
  0, //arguments count
  HelloWorldInterface_methods_sayHello_INLRString__V_exceptions, // the declared exceptions
  HelloWorldInterface_MetainfoWrapper::HelloWorldInterface_method_sayHello_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HelloWorldInterface_methods[] = 
{
  &HelloWorldInterface_method_GetClass__L_acdk_lang_RClass_,
  &HelloWorldInterface_method_getGreetings__LRString_,
  &HelloWorldInterface_method_sayHello_INLRString__V,
  0
};


struct HelloWorldInterface_MetaInfoInitializer
{  HelloWorldInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HelloWorldInterface::clazzInfo();
    ci->fields =  _HelloWorldInterface_fields;
    ci->methods =  _HelloWorldInterface_methods;
    ci->_scopeParent = acdk_boot_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HelloWorldInterface_MetaInfoInitializer HelloWorldInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace boot


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) boot_dummyExportFunc() {}
#endif

